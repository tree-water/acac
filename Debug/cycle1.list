
cycle1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a25c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0800a440  0800a440  0000b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae10  0800ae10  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae10  0800ae10  0000be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae18  0800ae18  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae18  0800ae18  0000be18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae1c  0800ae1c  0000be1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ae20  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001d4  0800aff4  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800aff4  0000c5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001862d  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d0  00000000  00000000  00024831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00028008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe6  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029325  00000000  00000000  0002a48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4e4  00000000  00000000  000537b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106ba1  00000000  00000000  0006dc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  0017487c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0017afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a424 	.word	0x0800a424

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a424 	.word	0x0800a424

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <MX_COMP1_Init+0x48>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000efa:	2250      	movs	r2, #80	@ 0x50
 8000efc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000f06:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f0a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000f14:	2231      	movs	r2, #49	@ 0x31
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_COMP1_Init+0x44>)
 8000f1a:	f001 fb21 	bl	8002560 <HAL_COMP_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8000f24:	f000 fa70 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000204 	.word	0x20000204
 8000f30:	40010200 	.word	0x40010200

08000f34 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <HAL_COMP_MspInit+0x90>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d131      	bne.n	8000fba <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <HAL_COMP_MspInit+0x94>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <HAL_COMP_MspInit+0x94>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_COMP_MspInit+0x94>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA0     ------> COMP1_OUT
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8c:	f002 f992 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f90:	2302      	movs	r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f002 f985 	bl	80032b4 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2040      	movs	r0, #64	@ 0x40
 8000fb0:	f001 fe17 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8000fb4:	2040      	movs	r0, #64	@ 0x40
 8000fb6:	f001 fe2e 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010200 	.word	0x40010200
 8000fc8:	40021000 	.word	0x40021000

08000fcc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2230      	movs	r2, #48	@ 0x30
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 f9eb 	bl	80083b4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_DAC1_Init+0x6c>)
 8000fe0:	4a16      	ldr	r2, [pc, #88]	@ (800103c <MX_DAC1_Init+0x70>)
 8000fe2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <MX_DAC1_Init+0x6c>)
 8000fe6:	f001 fe30 	bl	8002c4a <HAL_DAC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ff0:	f000 fa0a 	bl	8001408 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001010:	2304      	movs	r3, #4
 8001012:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <MX_DAC1_Init+0x6c>)
 8001020:	f001 fed0 	bl	8002dc4 <HAL_DAC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800102a:	f000 f9ed 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	@ 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000228 	.word	0x20000228
 800103c:	50000800 	.word	0x50000800

08001040 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a15      	ldr	r2, [pc, #84]	@ (80010b4 <HAL_DAC_MspInit+0x74>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d124      	bne.n	80010ac <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_DAC_MspInit+0x78>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_DAC_MspInit+0x78>)
 8001068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_DAC_MspInit+0x78>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_DAC_MspInit+0x78>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_DAC_MspInit+0x78>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_DAC_MspInit+0x78>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001092:	2310      	movs	r3, #16
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a8:	f002 f904 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	50000800 	.word	0x50000800
 80010b8:	40021000 	.word	0x40021000

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <MX_GPIO_Init+0xa8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <MX_GPIO_Init+0xa8>)
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <MX_GPIO_Init+0xa8>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <MX_GPIO_Init+0xa8>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001164 <MX_GPIO_Init+0xa8>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_GPIO_Init+0xa8>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_GPIO_Init+0xa8>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <MX_GPIO_Init+0xa8>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_GPIO_Init+0xa8>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_GPIO_Init+0xa8>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <MX_GPIO_Init+0xa8>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_GPIO_Init+0xa8>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2120      	movs	r1, #32
 8001136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113a:	f002 fa3d 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800113e:	2320      	movs	r3, #32
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f002 f8ac 	bl	80032b4 <HAL_GPIO_Init>

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000

08001168 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001170:	1d39      	adds	r1, r7, #4
 8001172:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001176:	2201      	movs	r2, #1
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <__io_putchar+0x20>)
 800117a:	f005 f83d 	bl	80061f8 <HAL_UART_Transmit>
	return ch;
 800117e:	687b      	ldr	r3, [r7, #4]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000340 	.word	0x20000340

0800118c <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(hcomp==&hcomp1){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_COMP_TriggerCallback+0x2c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d109      	bne.n	80011b0 <HAL_COMP_TriggerCallback+0x24>
        __HAL_TIM_SET_COUNTER(&htim2, 0); // 将定时器计数器设置为 0
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <HAL_COMP_TriggerCallback+0x30>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Base_Start_IT(&htim2);
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_COMP_TriggerCallback+0x30>)
 80011a6:	f003 fb3f 	bl	8004828 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start(&htim2);
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <HAL_COMP_TriggerCallback+0x30>)
 80011ac:	f003 faa4 	bl	80046f8 <HAL_TIM_Base_Start>
	}
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000204 	.word	0x20000204
 80011bc:	200002f4 	.word	0x200002f4

080011c0 <HAL_TIM_PeriodElapsedCallback>:

// 更新回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d132      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x76>
        HAL_TIM_Base_Stop(&htim2);
 80011d0:	481b      	ldr	r0, [pc, #108]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011d2:	f003 fb01 	bl	80047d8 <HAL_TIM_Base_Stop>
		if(HAL_COMP_GetOutputLevel(&hcomp1)==COMP_OUTPUT_LEVEL_HIGH){//判断为上升沿
 80011d6:	481b      	ldr	r0, [pc, #108]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011d8:	f001 fc18 	bl	8002a0c <HAL_COMP_GetOutputLevel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d111      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2120      	movs	r1, #32
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ea:	f002 f9e5 	bl	80035b8 <HAL_GPIO_WritePin>
			TIM1->CCR1=zkb;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80011f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fa:	ee17 2a90 	vmov	r2, s15
 80011fe:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2=0;
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		if(HAL_COMP_GetOutputLevel(&hcomp1)==COMP_OUTPUT_LEVEL_LOW){//判断为上升沿
 8001206:	480f      	ldr	r0, [pc, #60]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001208:	f001 fc00 	bl	8002a0c <HAL_COMP_GetOutputLevel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d111      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x76>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2120      	movs	r1, #32
 8001216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121a:	f002 f9cd 	bl	80035b8 <HAL_GPIO_WritePin>
			TIM1->CCR1=0;
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2=zkb;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800122c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001230:	ee17 2a90 	vmov	r2, s15
 8001234:	639a      	str	r2, [r3, #56]	@ 0x38
		}
    }
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002f4 	.word	0x200002f4
 8001244:	20000204 	.word	0x20000204
 8001248:	2000023c 	.word	0x2000023c
 800124c:	40012c00 	.word	0x40012c00

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f000 ff74 	bl	8002142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f889 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f7ff ff2d 	bl	80010bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001262:	f000 fe05 	bl	8001e70 <MX_USART1_UART_Init>
  MX_COMP1_Init();
 8001266:	f7ff fe3f 	bl	8000ee8 <MX_COMP1_Init>
  MX_DAC1_Init();
 800126a:	f7ff feaf 	bl	8000fcc <MX_DAC1_Init>
  MX_TIM1_Init();
 800126e:	f000 fc3d 	bl	8001aec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001272:	f000 fcfd 	bl	8001c70 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001276:	f000 fe47 	bl	8001f08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800127a:	f000 fa05 	bl	8001688 <OLED_Init>
  OLED_Clear();
 800127e:	f000 f951 	bl	8001524 <OLED_Clear>
  OLED_ShowString(0, 0, "cycle1");
 8001282:	4a30      	ldr	r2, [pc, #192]	@ (8001344 <main+0xf4>)
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f9d0 	bl	800162c <OLED_ShowString>
  printf("start\n");
 800128c:	482e      	ldr	r0, [pc, #184]	@ (8001348 <main+0xf8>)
 800128e:	f006 ff91 	bl	80081b4 <puts>

//  HAL_UARTEx_ReceiveToIdle_IT(&huart1, g_vofa_rx_buffer, VOFA_FRAME_RECEIVE_MAX_LENGTH);
  uint32_t VOLTAGE_COMP=3084;
 8001292:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8001296:	607b      	str	r3, [r7, #4]

  HAL_COMP_Start(&hcomp1);
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <main+0xfc>)
 800129a:	f001 fafb 	bl	8002894 <HAL_COMP_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, VOLTAGE_COMP);//DAC输出2.5V电压
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	482a      	ldr	r0, [pc, #168]	@ (8001350 <main+0x100>)
 80012a6:	f001 fd5f 	bl	8002d68 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);//启动DAC1
 80012aa:	2100      	movs	r1, #0
 80012ac:	4828      	ldr	r0, [pc, #160]	@ (8001350 <main+0x100>)
 80012ae:	f001 fcef 	bl	8002c90 <HAL_DAC_Start>

  HAL_TIM_Base_Start(&htim1);
 80012b2:	4828      	ldr	r0, [pc, #160]	@ (8001354 <main+0x104>)
 80012b4:	f003 fa20 	bl	80046f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80012b8:	2100      	movs	r1, #0
 80012ba:	4826      	ldr	r0, [pc, #152]	@ (8001354 <main+0x104>)
 80012bc:	f003 fb8e 	bl	80049dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80012c0:	2104      	movs	r1, #4
 80012c2:	4824      	ldr	r0, [pc, #144]	@ (8001354 <main+0x104>)
 80012c4:	f003 fb8a 	bl	80049dc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	4822      	ldr	r0, [pc, #136]	@ (8001354 <main+0x104>)
 80012cc:	f004 fcda 	bl	8005c84 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80012d0:	2104      	movs	r1, #4
 80012d2:	4820      	ldr	r0, [pc, #128]	@ (8001354 <main+0x104>)
 80012d4:	f004 fcd6 	bl	8005c84 <HAL_TIMEx_PWMN_Start>

  zkb=1000;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <main+0x108>)
 80012da:	4a20      	ldr	r2, [pc, #128]	@ (800135c <main+0x10c>)
 80012dc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(stringbuf,"U:%6.2f I:%5.2f",AC_OUT.U,AC_OUT.I);
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <main+0x110>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f958 	bl	8000598 <__aeabi_f2d>
 80012e8:	4604      	mov	r4, r0
 80012ea:	460d      	mov	r5, r1
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <main+0x110>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f951 	bl	8000598 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9cd 2300 	strd	r2, r3, [sp]
 80012fe:	4622      	mov	r2, r4
 8001300:	462b      	mov	r3, r5
 8001302:	4918      	ldr	r1, [pc, #96]	@ (8001364 <main+0x114>)
 8001304:	4818      	ldr	r0, [pc, #96]	@ (8001368 <main+0x118>)
 8001306:	f006 ff5d 	bl	80081c4 <siprintf>
	  OLED_ShowString(0, 2, stringbuf);
 800130a:	4a17      	ldr	r2, [pc, #92]	@ (8001368 <main+0x118>)
 800130c:	2102      	movs	r1, #2
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f98c 	bl	800162c <OLED_ShowString>
	  sprintf(stringbuf,"duty:%3.1f%%",zkb/20);
 8001314:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <main+0x108>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800131e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001322:	ee16 0a90 	vmov	r0, s13
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	490f      	ldr	r1, [pc, #60]	@ (800136c <main+0x11c>)
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <main+0x118>)
 8001332:	f006 ff47 	bl	80081c4 <siprintf>
	  OLED_ShowString(0, 4, stringbuf);
 8001336:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <main+0x118>)
 8001338:	2104      	movs	r1, #4
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f976 	bl	800162c <OLED_ShowString>
  {
 8001340:	bf00      	nop
 8001342:	e7cc      	b.n	80012de <main+0x8e>
 8001344:	0800a440 	.word	0x0800a440
 8001348:	0800a448 	.word	0x0800a448
 800134c:	20000204 	.word	0x20000204
 8001350:	20000228 	.word	0x20000228
 8001354:	200002a8 	.word	0x200002a8
 8001358:	2000023c 	.word	0x2000023c
 800135c:	447a0000 	.word	0x447a0000
 8001360:	200001f0 	.word	0x200001f0
 8001364:	0800a450 	.word	0x0800a450
 8001368:	20000240 	.word	0x20000240
 800136c:	0800a460 	.word	0x0800a460

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	@ 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	2238      	movs	r2, #56	@ 0x38
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f007 f818 	bl	80083b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001392:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001396:	f002 f927 	bl	80035e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a4:	2340      	movs	r3, #64	@ 0x40
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80013b4:	2319      	movs	r3, #25
 80013b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 f9c1 	bl	8003750 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80013d4:	f000 f818 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2303      	movs	r3, #3
 80013de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2103      	movs	r1, #3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fcbf 	bl	8003d74 <HAL_RCC_ClockConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013fc:	f000 f804 	bl	8001408 <Error_Handler>
  }
}
 8001400:	bf00      	nop
 8001402:	3750      	adds	r7, #80	@ 0x50
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <Error_Handler+0x8>

08001414 <OLED_WR_Byte>:
#include "oledfont.h"  
//��SSD1106д��һ���ֽڡ�
//dat:Ҫд�������/����
//cmd:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	460a      	mov	r2, r1
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <OLED_WR_Byte+0x24>
	  OLED_DC_Set();
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001430:	4826      	ldr	r0, [pc, #152]	@ (80014cc <OLED_WR_Byte+0xb8>)
 8001432:	f002 f8c1 	bl	80035b8 <HAL_GPIO_WritePin>
 8001436:	e005      	b.n	8001444 <OLED_WR_Byte+0x30>
	else 
	  OLED_DC_Clr();		  
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800143e:	4823      	ldr	r0, [pc, #140]	@ (80014cc <OLED_WR_Byte+0xb8>)
 8001440:	f002 f8ba 	bl	80035b8 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800144a:	4820      	ldr	r0, [pc, #128]	@ (80014cc <OLED_WR_Byte+0xb8>)
 800144c:	f002 f8b4 	bl	80035b8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e026      	b.n	80014a4 <OLED_WR_Byte+0x90>
	{			  
		OLED_SCLK_Clr();
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800145c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001460:	f002 f8aa 	bl	80035b8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da07      	bge.n	800147c <OLED_WR_Byte+0x68>
		   OLED_SDIN_Set();
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001476:	f002 f89f 	bl	80035b8 <HAL_GPIO_WritePin>
 800147a:	e006      	b.n	800148a <OLED_WR_Byte+0x76>
		else 
		   OLED_SDIN_Clr();
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001486:	f002 f897 	bl	80035b8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001494:	f002 f890 	bl	80035b8 <HAL_GPIO_WritePin>
		dat<<=1;   
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	d9d5      	bls.n	8001456 <OLED_WR_Byte+0x42>
	}				 		  
	OLED_CS_Set();
 80014aa:	2201      	movs	r2, #1
 80014ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014b0:	4806      	ldr	r0, [pc, #24]	@ (80014cc <OLED_WR_Byte+0xb8>)
 80014b2:	f002 f881 	bl	80035b8 <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <OLED_WR_Byte+0xb8>)
 80014be:	f002 f87b 	bl	80035b8 <HAL_GPIO_WritePin>
} 
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	48000400 	.word	0x48000400

080014d0 <OLED_Set_Pos>:

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3b50      	subs	r3, #80	@ 0x50
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff93 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff89 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	f003 030e 	and.w	r3, r3, #14
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff7c 	bl	8001414 <OLED_WR_Byte>
}   	  
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	u8 i,n;		    
	for(i=0;i<8;i++)  
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	e01f      	b.n	8001570 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	3b50      	subs	r3, #80	@ 0x50
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff6b 	bl	8001414 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ff67 	bl	8001414 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8001546:	2100      	movs	r1, #0
 8001548:	2010      	movs	r0, #16
 800154a:	f7ff ff63 	bl	8001414 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 800154e:	2300      	movs	r3, #0
 8001550:	71bb      	strb	r3, [r7, #6]
 8001552:	e006      	b.n	8001562 <OLED_Clear+0x3e>
 8001554:	2101      	movs	r1, #1
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff ff5c 	bl	8001414 <OLED_WR_Byte>
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	3301      	adds	r3, #1
 8001560:	71bb      	strb	r3, [r7, #6]
 8001562:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	daf4      	bge.n	8001554 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	3301      	adds	r3, #1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b07      	cmp	r3, #7
 8001574:	d9dc      	bls.n	8001530 <OLED_Clear+0xc>
	} //������ʾ
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(u8 x,u8 y,u8 chr)
{      	
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
 800158a:	460b      	mov	r3, r1
 800158c:	71bb      	strb	r3, [r7, #6]
 800158e:	4613      	mov	r3, r2
 8001590:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 8001592:	2300      	movs	r3, #0
 8001594:	73bb      	strb	r3, [r7, #14]
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	3b20      	subs	r3, #32
 800159e:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da04      	bge.n	80015b2 <OLED_ShowChar+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	3302      	adds	r3, #2
 80015b0:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff89 	bl	80014d0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e00c      	b.n	80015de <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	011a      	lsls	r2, r3, #4
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <OLED_ShowChar+0xa8>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	2101      	movs	r1, #1
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff1e 	bl	8001414 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	3301      	adds	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	d9ef      	bls.n	80015c4 <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff6e 	bl	80014d0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e00d      	b.n	8001616 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	011a      	lsls	r2, r3, #4
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	4413      	add	r3, r2
 8001602:	3308      	adds	r3, #8
 8001604:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <OLED_ShowChar+0xa8>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	2101      	movs	r1, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff02 	bl	8001414 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b07      	cmp	r3, #7
 800161a:	d9ee      	bls.n	80015fa <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	0800a470 	.word	0x0800a470

0800162c <OLED_ShowString>:
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0'); 
	}
} 
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(u8 x,u8 y,u8 *chr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	603a      	str	r2, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	460b      	mov	r3, r1
 800163a:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001640:	e016      	b.n	8001670 <OLED_ShowString+0x44>
	{		OLED_ShowChar(x,y,chr[j]);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	79b9      	ldrb	r1, [r7, #6]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff96 	bl	8001580 <OLED_ShowChar>
			x+=8;
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	3308      	adds	r3, #8
 8001658:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b78      	cmp	r3, #120	@ 0x78
 800165e:	d904      	bls.n	800166a <OLED_ShowString+0x3e>
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	3302      	adds	r3, #2
 8001668:	71bb      	strb	r3, [r7, #6]
			j++;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e2      	bne.n	8001642 <OLED_ShowString+0x16>
	}
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <OLED_Init>:
} 


//��ʼ��				    
void OLED_Init(void)
{ 	
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <OLED_Init+0x1a0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a61      	ldr	r2, [pc, #388]	@ (8001828 <OLED_Init+0x1a0>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001828 <OLED_Init+0x1a0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <OLED_Init+0x1a0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001828 <OLED_Init+0x1a0>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c2:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <OLED_Init+0x1a0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4851      	ldr	r0, [pc, #324]	@ (800182c <OLED_Init+0x1a4>)
 80016e8:	f001 fde4 	bl	80032b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80016f2:	484e      	ldr	r0, [pc, #312]	@ (800182c <OLED_Init+0x1a4>)
 80016f4:	f001 ff60 	bl	80035b8 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f001 fdce 	bl	80032b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800171e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001722:	f001 ff49 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001726:	2064      	movs	r0, #100	@ 0x64
 8001728:	f000 fd7c 	bl	8002224 <HAL_Delay>

	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 800172c:	2100      	movs	r1, #0
 800172e:	20ae      	movs	r0, #174	@ 0xae
 8001730:	f7ff fe70 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8001734:	2100      	movs	r1, #0
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fe6c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800173c:	2100      	movs	r1, #0
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff fe68 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8001744:	2100      	movs	r1, #0
 8001746:	2040      	movs	r0, #64	@ 0x40
 8001748:	f7ff fe64 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 800174c:	2100      	movs	r1, #0
 800174e:	2081      	movs	r0, #129	@ 0x81
 8001750:	f7ff fe60 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8001754:	2100      	movs	r1, #0
 8001756:	20cf      	movs	r0, #207	@ 0xcf
 8001758:	f7ff fe5c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 800175c:	2100      	movs	r1, #0
 800175e:	20a1      	movs	r0, #161	@ 0xa1
 8001760:	f7ff fe58 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8001764:	2100      	movs	r1, #0
 8001766:	20c8      	movs	r0, #200	@ 0xc8
 8001768:	f7ff fe54 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 800176c:	2100      	movs	r1, #0
 800176e:	20a6      	movs	r0, #166	@ 0xa6
 8001770:	f7ff fe50 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001774:	2100      	movs	r1, #0
 8001776:	20a8      	movs	r0, #168	@ 0xa8
 8001778:	f7ff fe4c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 800177c:	2100      	movs	r1, #0
 800177e:	203f      	movs	r0, #63	@ 0x3f
 8001780:	f7ff fe48 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8001784:	2100      	movs	r1, #0
 8001786:	20d3      	movs	r0, #211	@ 0xd3
 8001788:	f7ff fe44 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fe40 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8001794:	2100      	movs	r1, #0
 8001796:	20d5      	movs	r0, #213	@ 0xd5
 8001798:	f7ff fe3c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 800179c:	2100      	movs	r1, #0
 800179e:	20f0      	movs	r0, #240	@ 0xf0
 80017a0:	f7ff fe38 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 80017a4:	2100      	movs	r1, #0
 80017a6:	20d9      	movs	r0, #217	@ 0xd9
 80017a8:	f7ff fe34 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80017ac:	2100      	movs	r1, #0
 80017ae:	20f1      	movs	r0, #241	@ 0xf1
 80017b0:	f7ff fe30 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 80017b4:	2100      	movs	r1, #0
 80017b6:	20da      	movs	r0, #218	@ 0xda
 80017b8:	f7ff fe2c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 80017bc:	2100      	movs	r1, #0
 80017be:	2012      	movs	r0, #18
 80017c0:	f7ff fe28 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 80017c4:	2100      	movs	r1, #0
 80017c6:	20db      	movs	r0, #219	@ 0xdb
 80017c8:	f7ff fe24 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 80017cc:	2100      	movs	r1, #0
 80017ce:	2040      	movs	r0, #64	@ 0x40
 80017d0:	f7ff fe20 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80017d4:	2100      	movs	r1, #0
 80017d6:	2020      	movs	r0, #32
 80017d8:	f7ff fe1c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 80017dc:	2100      	movs	r1, #0
 80017de:	2002      	movs	r0, #2
 80017e0:	f7ff fe18 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 80017e4:	2100      	movs	r1, #0
 80017e6:	208d      	movs	r0, #141	@ 0x8d
 80017e8:	f7ff fe14 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 80017ec:	2100      	movs	r1, #0
 80017ee:	2014      	movs	r0, #20
 80017f0:	f7ff fe10 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 80017f4:	2100      	movs	r1, #0
 80017f6:	20a4      	movs	r0, #164	@ 0xa4
 80017f8:	f7ff fe0c 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 80017fc:	2100      	movs	r1, #0
 80017fe:	20a6      	movs	r0, #166	@ 0xa6
 8001800:	f7ff fe08 	bl	8001414 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8001804:	2100      	movs	r1, #0
 8001806:	20af      	movs	r0, #175	@ 0xaf
 8001808:	f7ff fe04 	bl	8001414 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 800180c:	2100      	movs	r1, #0
 800180e:	20af      	movs	r0, #175	@ 0xaf
 8001810:	f7ff fe00 	bl	8001414 <OLED_WR_Byte>
	OLED_Clear();
 8001814:	f7ff fe86 	bl	8001524 <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 8001818:	2100      	movs	r1, #0
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fe58 	bl	80014d0 <OLED_Set_Pos>
}  
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <HAL_MspInit+0x44>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001866:	f001 ff63 	bl	8003730 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ce:	f000 fc8b 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018de:	f003 f98f 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200002a8 	.word	0x200002a8

080018ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <TIM2_IRQHandler+0x10>)
 80018f2:	f003 f985 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002f4 	.word	0x200002f4

08001900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <USART1_IRQHandler+0x10>)
 8001906:	f004 fd05 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000340 	.word	0x20000340

08001914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <USART2_IRQHandler+0x10>)
 800191a:	f004 fcfb 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003d4 	.word	0x200003d4

08001928 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <COMP1_2_3_IRQHandler+0x10>)
 800192e:	f000 fff9 	bl	8002924 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000204 	.word	0x20000204

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001956:	f006 fd7f 	bl	8008458 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
  return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
  while (1) {}    /* Make sure we hang here */
 800197e:	bf00      	nop
 8001980:	e7fd      	b.n	800197e <_exit+0x12>

08001982 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e00a      	b.n	80019aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001994:	f3af 8000 	nop.w
 8001998:	4601      	mov	r1, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf0      	blt.n	8001994 <_read+0x12>
  }

  return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e009      	b.n	80019e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbc6 	bl	8001168 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf1      	blt.n	80019ce <_write+0x12>
  }
  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f006 fce4 	bl	8008458 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20020000 	.word	0x20020000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200002a4 	.word	0x200002a4
 8001ac4:	200005b8 	.word	0x200005b8

08001ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09c      	sub	sp, #112	@ 0x70
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2234      	movs	r2, #52	@ 0x34
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 fc44 	bl	80083b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b2e:	4a4f      	ldr	r2, [pc, #316]	@ (8001c6c <MX_TIM1_Init+0x180>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b32:	4b4d      	ldr	r3, [pc, #308]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b40:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b48      	ldr	r3, [pc, #288]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b4c:	4b46      	ldr	r3, [pc, #280]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b52:	4b45      	ldr	r3, [pc, #276]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b58:	4843      	ldr	r0, [pc, #268]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b5a:	f002 fd75 	bl	8004648 <HAL_TIM_Base_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b64:	f7ff fc50 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b72:	4619      	mov	r1, r3
 8001b74:	483c      	ldr	r0, [pc, #240]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b76:	f003 faa7 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b80:	f7ff fc42 	bl	8001408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b84:	4838      	ldr	r0, [pc, #224]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001b86:	f002 fec7 	bl	8004918 <HAL_TIM_PWM_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b90:	f7ff fc3a 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4830      	ldr	r0, [pc, #192]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001ba8:	f004 f92e 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001bb2:	f7ff fc29 	bl	8001408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4823      	ldr	r0, [pc, #140]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001bdc:	f003 f960 	bl	8004ea0 <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001be6:	f7ff fc0f 	bl	8001408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bee:	2204      	movs	r2, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481d      	ldr	r0, [pc, #116]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001bf4:	f003 f954 	bl	8004ea0 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001bfe:	f7ff fc03 	bl	8001408 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001c02:	4819      	ldr	r0, [pc, #100]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001c04:	f004 fa2a 	bl	800605c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001c08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001c18:	230a      	movs	r3, #10
 8001c1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4807      	ldr	r0, [pc, #28]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001c4c:	f004 f972 	bl	8005f34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8001c56:	f7ff fbd7 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c5a:	4803      	ldr	r0, [pc, #12]	@ (8001c68 <MX_TIM1_Init+0x17c>)
 8001c5c:	f000 f896 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001c60:	bf00      	nop
 8001c62:	3770      	adds	r7, #112	@ 0x70
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200002a8 	.word	0x200002a8
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001c90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001c98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001ca6:	223c      	movs	r2, #60	@ 0x3c
 8001ca8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb6:	4814      	ldr	r0, [pc, #80]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001cb8:	f002 fcc6 	bl	8004648 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cc2:	f7ff fba1 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001cd4:	f003 f9f8 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cde:	f7ff fb93 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <MX_TIM2_Init+0x98>)
 8001cf0:	f004 f88a 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cfa:	f7ff fb85 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002f4 	.word	0x200002f4

08001d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <HAL_TIM_Base_MspInit+0x78>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2019      	movs	r0, #25
 8001d3c:	f000 ff51 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d40:	2019      	movs	r0, #25
 8001d42:	f000 ff68 	bl	8002c16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d46:	e018      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d113      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_TIM_Base_MspInit+0x7c>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	201c      	movs	r0, #28
 8001d70:	f000 ff37 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d74:	201c      	movs	r0, #28
 8001d76:	f000 ff4e 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e60 <HAL_TIM_MspPostInit+0xd4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d154      	bne.n	8001e58 <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	4a26      	ldr	r2, [pc, #152]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	4a20      	ldr	r2, [pc, #128]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_TIM_MspPostInit+0xd8>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df6:	2303      	movs	r3, #3
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e06:	2302      	movs	r3, #2
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4815      	ldr	r0, [pc, #84]	@ (8001e68 <HAL_TIM_MspPostInit+0xdc>)
 8001e12:	f001 fa4f 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e26:	2306      	movs	r3, #6
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e34:	f001 fa3e 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e48:	2306      	movs	r3, #6
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4806      	ldr	r0, [pc, #24]	@ (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001e54:	f001 fa2e 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48000800 	.word	0x48000800
 8001e6c:	48000400 	.word	0x48000400

08001e70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <MX_USART1_UART_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eba:	f004 f94d 	bl	8006158 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f7ff faa0 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ecc:	f005 fb37 	bl	800753e <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ed6:	f7ff fa97 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ede:	f005 fb6c 	bl	80075ba <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f7ff fa8e 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eee:	f005 faed 	bl	80074cc <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f7ff fa86 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000340 	.word	0x20000340
 8001f04:	40013800 	.word	0x40013800

08001f08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f0e:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <MX_USART2_UART_Init+0x94>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f14:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f44:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f50:	4811      	ldr	r0, [pc, #68]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f52:	f004 f901 	bl	8006158 <HAL_UART_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f5c:	f7ff fa54 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f60:	2100      	movs	r1, #0
 8001f62:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f64:	f005 faeb 	bl	800753e <HAL_UARTEx_SetTxFifoThreshold>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f6e:	f7ff fa4b 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4808      	ldr	r0, [pc, #32]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f76:	f005 fb20 	bl	80075ba <HAL_UARTEx_SetRxFifoThreshold>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f80:	f7ff fa42 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f86:	f005 faa1 	bl	80074cc <HAL_UARTEx_DisableFifoMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f90:	f7ff fa3a 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200003d4 	.word	0x200003d4
 8001f9c:	40004400 	.word	0x40004400

08001fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0a0      	sub	sp, #128	@ 0x80
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb8:	f107 0318 	add.w	r3, r7, #24
 8001fbc:	2254      	movs	r2, #84	@ 0x54
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 f9f7 	bl	80083b4 <memset>
  if(uartHandle->Instance==USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a45      	ldr	r2, [pc, #276]	@ (80020e0 <HAL_UART_MspInit+0x140>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13e      	bne.n	800204e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 f8e5 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe8:	f7ff fa0e 	bl	8001408 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fec:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	4a36      	ldr	r2, [pc, #216]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800201c:	2330      	movs	r3, #48	@ 0x30
 800201e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800202c:	2307      	movs	r3, #7
 800202e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002034:	4619      	mov	r1, r3
 8002036:	482c      	ldr	r0, [pc, #176]	@ (80020e8 <HAL_UART_MspInit+0x148>)
 8002038:	f001 f93c 	bl	80032b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2101      	movs	r1, #1
 8002040:	2025      	movs	r0, #37	@ 0x25
 8002042:	f000 fdce 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002046:	2025      	movs	r0, #37	@ 0x25
 8002048:	f000 fde5 	bl	8002c16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800204c:	e043      	b.n	80020d6 <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a26      	ldr	r2, [pc, #152]	@ (80020ec <HAL_UART_MspInit+0x14c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d13e      	bne.n	80020d6 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	f107 0318 	add.w	r3, r7, #24
 8002064:	4618      	mov	r0, r3
 8002066:	f002 f8a1 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002070:	f7ff f9ca 	bl	8001408 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800207e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a4:	230c      	movs	r3, #12
 80020a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b4:	2307      	movs	r3, #7
 80020b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020bc:	4619      	mov	r1, r3
 80020be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c2:	f001 f8f7 	bl	80032b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2026      	movs	r0, #38	@ 0x26
 80020cc:	f000 fd89 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020d0:	2026      	movs	r0, #38	@ 0x26
 80020d2:	f000 fda0 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3780      	adds	r7, #128	@ 0x80
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000800 	.word	0x48000800
 80020ec:	40004400 	.word	0x40004400

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff fce8 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f006 f9a1 	bl	8008464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7ff f895 	bl	8001250 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   r0, =_estack
 8002128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002134:	0800ae20 	.word	0x0800ae20
  ldr r2, =_sbss
 8002138:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800213c:	200005b8 	.word	0x200005b8

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>

08002142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 fd3d 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f80e 	bl	8002174 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	e001      	b.n	8002168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002164:	f7ff fb64 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002168:	79fb      	ldrb	r3, [r7, #7]

}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002180:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <HAL_InitTick+0x68>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d022      	beq.n	80021ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <HAL_InitTick+0x6c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <HAL_InitTick+0x68>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002194:	fbb1 f3f3 	udiv	r3, r1, r3
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fd48 	bl	8002c32 <HAL_SYSTICK_Config>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d809      	bhi.n	80021c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ae:	2200      	movs	r2, #0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	f04f 30ff 	mov.w	r0, #4294967295
 80021b6:	f000 fd14 	bl	8002be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_InitTick+0x70>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e007      	b.n	80021d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e004      	b.n	80021d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_IncTick+0x1c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_IncTick+0x20>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	4a03      	ldr	r2, [pc, #12]	@ (8002204 <HAL_IncTick+0x1c>)
 80021f8:	6013      	str	r3, [r2, #0]
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	20000468 	.word	0x20000468
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000468 	.word	0x20000468

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d004      	beq.n	8002248 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_Delay+0x40>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002248:	bf00      	nop
 800224a:	f7ff ffdf 	bl	800220c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	429a      	cmp	r2, r3
 8002258:	d8f7      	bhi.n	800224a <HAL_Delay+0x26>
  {
  }
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000008 	.word	0x20000008

08002268 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <LL_EXTI_EnableIT_0_31+0x20>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4904      	ldr	r1, [pc, #16]	@ (8002288 <LL_EXTI_EnableIT_0_31+0x20>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40010400 	.word	0x40010400

0800228c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <LL_EXTI_EnableIT_32_63+0x20>)
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	4904      	ldr	r1, [pc, #16]	@ (80022ac <LL_EXTI_EnableIT_32_63+0x20>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	620b      	str	r3, [r1, #32]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40010400 	.word	0x40010400

080022b0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4904      	ldr	r1, [pc, #16]	@ (80022d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010400 	.word	0x40010400

080022d8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <LL_EXTI_DisableIT_32_63+0x24>)
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4904      	ldr	r1, [pc, #16]	@ (80022fc <LL_EXTI_DisableIT_32_63+0x24>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	620b      	str	r3, [r1, #32]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010400 	.word	0x40010400

08002300 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <LL_EXTI_EnableEvent_0_31+0x20>)
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4904      	ldr	r1, [pc, #16]	@ (8002320 <LL_EXTI_EnableEvent_0_31+0x20>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]

}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <LL_EXTI_EnableEvent_32_63+0x20>)
 800232e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002330:	4904      	ldr	r1, [pc, #16]	@ (8002344 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40010400 	.word	0x40010400

08002348 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	43db      	mvns	r3, r3
 8002358:	4904      	ldr	r1, [pc, #16]	@ (800236c <LL_EXTI_DisableEvent_0_31+0x24>)
 800235a:	4013      	ands	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40010400 	.word	0x40010400

08002370 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <LL_EXTI_DisableEvent_32_63+0x24>)
 800237a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	43db      	mvns	r3, r3
 8002380:	4904      	ldr	r1, [pc, #16]	@ (8002394 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002382:	4013      	ands	r3, r2
 8002384:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40010400 	.word	0x40010400

08002398 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4904      	ldr	r1, [pc, #16]	@ (80023b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40010400 	.word	0x40010400

080023bc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80023c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023c8:	4904      	ldr	r1, [pc, #16]	@ (80023dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40010400 	.word	0x40010400

080023e0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	4904      	ldr	r1, [pc, #16]	@ (8002404 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]

}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010400 	.word	0x40010400

08002408 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	43db      	mvns	r3, r3
 8002418:	4904      	ldr	r1, [pc, #16]	@ (800242c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800241a:	4013      	ands	r3, r2
 800241c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010400 	.word	0x40010400

08002430 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4904      	ldr	r1, [pc, #16]	@ (8002450 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40010400 	.word	0x40010400

08002454 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800245e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002460:	4904      	ldr	r1, [pc, #16]	@ (8002474 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4313      	orrs	r3, r2
 8002466:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40010400 	.word	0x40010400

08002478 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	43db      	mvns	r3, r3
 8002488:	4904      	ldr	r1, [pc, #16]	@ (800249c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800248a:	4013      	ands	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40010400 	.word	0x40010400

080024a0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4904      	ldr	r1, [pc, #16]	@ (80024c4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010400 	.word	0x40010400

080024c8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40010400 	.word	0x40010400

080024f4 <LL_EXTI_IsActiveFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_32_63(uint32_t ExtiLine)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <LL_EXTI_IsActiveFlag_32_63+0x28>)
 80024fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4013      	ands	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d101      	bne.n	800250e <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40010400 	.word	0x40010400

08002520 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002528:	4a04      	ldr	r2, [pc, #16]	@ (800253c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6153      	str	r3, [r2, #20]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40010400 	.word	0x40010400

08002540 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	77fb      	strb	r3, [r7, #31]
 800257a:	e181      	b.n	8002880 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800258a:	d102      	bne.n	8002592 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
 8002590:	e176      	b.n	8002880 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7f5b      	ldrb	r3, [r3, #29]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d108      	bne.n	80025ae <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe fcc3 	bl	8000f34 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025b8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b90      	ldr	r3, [pc, #576]	@ (8002820 <HAL_COMP_Init+0x2c0>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6979      	ldr	r1, [r7, #20]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_COMP_Init+0xc8>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002600:	4b88      	ldr	r3, [pc, #544]	@ (8002824 <HAL_COMP_Init+0x2c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	4a88      	ldr	r2, [pc, #544]	@ (8002828 <HAL_COMP_Init+0x2c8>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800261a:	e002      	b.n	8002622 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3b01      	subs	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7f      	ldr	r2, [pc, #508]	@ (800282c <HAL_COMP_Init+0x2cc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d028      	beq.n	8002684 <HAL_COMP_Init+0x124>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7e      	ldr	r2, [pc, #504]	@ (8002830 <HAL_COMP_Init+0x2d0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d020      	beq.n	800267e <HAL_COMP_Init+0x11e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7c      	ldr	r2, [pc, #496]	@ (8002834 <HAL_COMP_Init+0x2d4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d018      	beq.n	8002678 <HAL_COMP_Init+0x118>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7b      	ldr	r2, [pc, #492]	@ (8002838 <HAL_COMP_Init+0x2d8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d010      	beq.n	8002672 <HAL_COMP_Init+0x112>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a79      	ldr	r2, [pc, #484]	@ (800283c <HAL_COMP_Init+0x2dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d008      	beq.n	800266c <HAL_COMP_Init+0x10c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a78      	ldr	r2, [pc, #480]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_COMP_Init+0x108>
 8002664:	2301      	movs	r3, #1
 8002666:	e00f      	b.n	8002688 <HAL_COMP_Init+0x128>
 8002668:	2302      	movs	r3, #2
 800266a:	e00d      	b.n	8002688 <HAL_COMP_Init+0x128>
 800266c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002670:	e00a      	b.n	8002688 <HAL_COMP_Init+0x128>
 8002672:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002676:	e007      	b.n	8002688 <HAL_COMP_Init+0x128>
 8002678:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800267c:	e004      	b.n	8002688 <HAL_COMP_Init+0x128>
 800267e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002682:	e001      	b.n	8002688 <HAL_COMP_Init+0x128>
 8002684:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002688:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80b6 	beq.w	8002804 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d011      	beq.n	80026c8 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a65      	ldr	r2, [pc, #404]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_COMP_Init+0x158>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a64      	ldr	r2, [pc, #400]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d103      	bne.n	80026c0 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80026b8:	6938      	ldr	r0, [r7, #16]
 80026ba:	f7ff fe7f 	bl	80023bc <LL_EXTI_EnableRisingTrig_32_63>
 80026be:	e014      	b.n	80026ea <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80026c0:	6938      	ldr	r0, [r7, #16]
 80026c2:	f7ff fe69 	bl	8002398 <LL_EXTI_EnableRisingTrig_0_31>
 80026c6:	e010      	b.n	80026ea <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_COMP_Init+0x17c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d103      	bne.n	80026e4 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80026dc:	6938      	ldr	r0, [r7, #16]
 80026de:	f7ff fe93 	bl	8002408 <LL_EXTI_DisableRisingTrig_32_63>
 80026e2:	e002      	b.n	80026ea <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7ff fe7b 	bl	80023e0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d011      	beq.n	800271a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a51      	ldr	r2, [pc, #324]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_COMP_Init+0x1aa>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a4f      	ldr	r2, [pc, #316]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d103      	bne.n	8002712 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800270a:	6938      	ldr	r0, [r7, #16]
 800270c:	f7ff fea2 	bl	8002454 <LL_EXTI_EnableFallingTrig_32_63>
 8002710:	e014      	b.n	800273c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002712:	6938      	ldr	r0, [r7, #16]
 8002714:	f7ff fe8c 	bl	8002430 <LL_EXTI_EnableFallingTrig_0_31>
 8002718:	e010      	b.n	800273c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a48      	ldr	r2, [pc, #288]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <HAL_COMP_Init+0x1ce>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a46      	ldr	r2, [pc, #280]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d103      	bne.n	8002736 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f7ff feb6 	bl	80024a0 <LL_EXTI_DisableFallingTrig_32_63>
 8002734:	e002      	b.n	800273c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002736:	6938      	ldr	r0, [r7, #16]
 8002738:	f7ff fe9e 	bl	8002478 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3f      	ldr	r2, [pc, #252]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_COMP_Init+0x1f0>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3e      	ldr	r2, [pc, #248]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d103      	bne.n	8002758 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002750:	6938      	ldr	r0, [r7, #16]
 8002752:	f7ff fef5 	bl	8002540 <LL_EXTI_ClearFlag_32_63>
 8002756:	e002      	b.n	800275e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002758:	6938      	ldr	r0, [r7, #16]
 800275a:	f7ff fee1 	bl	8002520 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d011      	beq.n	800278e <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_COMP_Init+0x21e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a32      	ldr	r2, [pc, #200]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d103      	bne.n	8002786 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800277e:	6938      	ldr	r0, [r7, #16]
 8002780:	f7ff fdd0 	bl	8002324 <LL_EXTI_EnableEvent_32_63>
 8002784:	e014      	b.n	80027b0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8002786:	6938      	ldr	r0, [r7, #16]
 8002788:	f7ff fdba 	bl	8002300 <LL_EXTI_EnableEvent_0_31>
 800278c:	e010      	b.n	80027b0 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2b      	ldr	r2, [pc, #172]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_COMP_Init+0x242>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d103      	bne.n	80027aa <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80027a2:	6938      	ldr	r0, [r7, #16]
 80027a4:	f7ff fde4 	bl	8002370 <LL_EXTI_DisableEvent_32_63>
 80027a8:	e002      	b.n	80027b0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80027aa:	6938      	ldr	r0, [r7, #16]
 80027ac:	f7ff fdcc 	bl	8002348 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d011      	beq.n	80027e0 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_COMP_Init+0x270>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80027d0:	6938      	ldr	r0, [r7, #16]
 80027d2:	f7ff fd5b 	bl	800228c <LL_EXTI_EnableIT_32_63>
 80027d6:	e04b      	b.n	8002870 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80027d8:	6938      	ldr	r0, [r7, #16]
 80027da:	f7ff fd45 	bl	8002268 <LL_EXTI_EnableIT_0_31>
 80027de:	e047      	b.n	8002870 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_COMP_Init+0x294>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a15      	ldr	r2, [pc, #84]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80027f4:	6938      	ldr	r0, [r7, #16]
 80027f6:	f7ff fd6f 	bl	80022d8 <LL_EXTI_DisableIT_32_63>
 80027fa:	e039      	b.n	8002870 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80027fc:	6938      	ldr	r0, [r7, #16]
 80027fe:	f7ff fd57 	bl	80022b0 <LL_EXTI_DisableIT_0_31>
 8002802:	e035      	b.n	8002870 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_COMP_Init+0x2e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_COMP_Init+0x2b8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a0c      	ldr	r2, [pc, #48]	@ (8002844 <HAL_COMP_Init+0x2e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d117      	bne.n	8002848 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8002818:	6938      	ldr	r0, [r7, #16]
 800281a:	f7ff fda9 	bl	8002370 <LL_EXTI_DisableEvent_32_63>
 800281e:	e016      	b.n	800284e <HAL_COMP_Init+0x2ee>
 8002820:	ff007e0f 	.word	0xff007e0f
 8002824:	20000000 	.word	0x20000000
 8002828:	053e2d63 	.word	0x053e2d63
 800282c:	40010200 	.word	0x40010200
 8002830:	40010204 	.word	0x40010204
 8002834:	40010208 	.word	0x40010208
 8002838:	4001020c 	.word	0x4001020c
 800283c:	40010210 	.word	0x40010210
 8002840:	40010214 	.word	0x40010214
 8002844:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002848:	6938      	ldr	r0, [r7, #16]
 800284a:	f7ff fd7d 	bl	8002348 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a0e      	ldr	r2, [pc, #56]	@ (800288c <HAL_COMP_Init+0x32c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_COMP_Init+0x302>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0c      	ldr	r2, [pc, #48]	@ (8002890 <HAL_COMP_Init+0x330>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d103      	bne.n	800286a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8002862:	6938      	ldr	r0, [r7, #16]
 8002864:	f7ff fd38 	bl	80022d8 <LL_EXTI_DisableIT_32_63>
 8002868:	e002      	b.n	8002870 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800286a:	6938      	ldr	r0, [r7, #16]
 800286c:	f7ff fd20 	bl	80022b0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7f5b      	ldrb	r3, [r3, #29]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8002880:	7ffb      	ldrb	r3, [r7, #31]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40010214 	.word	0x40010214
 8002890:	40010218 	.word	0x40010218

08002894 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e02e      	b.n	800290e <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028be:	d102      	bne.n	80028c6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e023      	b.n	800290e <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7f5b      	ldrb	r3, [r3, #29]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d11c      	bne.n	800290a <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <HAL_COMP_Start+0x88>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_COMP_Start+0x8c>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0cda      	lsrs	r2, r3, #19
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028fa:	e002      	b.n	8002902 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3b01      	subs	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <HAL_COMP_Start+0x68>
 8002908:	e001      	b.n	800290e <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	20000000 	.word	0x20000000
 8002920:	431bde83 	.word	0x431bde83

08002924 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2f      	ldr	r2, [pc, #188]	@ (80029f0 <HAL_COMP_IRQHandler+0xcc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d028      	beq.n	8002988 <HAL_COMP_IRQHandler+0x64>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2e      	ldr	r2, [pc, #184]	@ (80029f4 <HAL_COMP_IRQHandler+0xd0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d020      	beq.n	8002982 <HAL_COMP_IRQHandler+0x5e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <HAL_COMP_IRQHandler+0xd4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_COMP_IRQHandler+0x58>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <HAL_COMP_IRQHandler+0xd8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d010      	beq.n	8002976 <HAL_COMP_IRQHandler+0x52>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	@ (8002a00 <HAL_COMP_IRQHandler+0xdc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d008      	beq.n	8002970 <HAL_COMP_IRQHandler+0x4c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_COMP_IRQHandler+0xe0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_COMP_IRQHandler+0x48>
 8002968:	2301      	movs	r3, #1
 800296a:	e00f      	b.n	800298c <HAL_COMP_IRQHandler+0x68>
 800296c:	2302      	movs	r3, #2
 800296e:	e00d      	b.n	800298c <HAL_COMP_IRQHandler+0x68>
 8002970:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002974:	e00a      	b.n	800298c <HAL_COMP_IRQHandler+0x68>
 8002976:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800297a:	e007      	b.n	800298c <HAL_COMP_IRQHandler+0x68>
 800297c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002980:	e004      	b.n	800298c <HAL_COMP_IRQHandler+0x68>
 8002982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002986:	e001      	b.n	800298c <HAL_COMP_IRQHandler+0x68>
 8002988:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800298c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(COMP7)
  if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1b      	ldr	r2, [pc, #108]	@ (8002a04 <HAL_COMP_IRQHandler+0xe0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_COMP_IRQHandler+0x82>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_COMP_IRQHandler+0xe4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <HAL_COMP_IRQHandler+0x94>
  {
    if (LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 80029a6:	68b8      	ldr	r0, [r7, #8]
 80029a8:	f7ff fda4 	bl	80024f4 <LL_EXTI_IsActiveFlag_32_63>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 80029b2:	2302      	movs	r3, #2
 80029b4:	60fb      	str	r3, [r7, #12]
    if (LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 80029b6:	e007      	b.n	80029c8 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	f7ff fd85 	bl	80024c8 <LL_EXTI_IsActiveFlag_0_31>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(COMP7)
    if (tmp_comp_exti_flag_set == 2UL)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d103      	bne.n	80029dc <HAL_COMP_IRQHandler+0xb8>
    {
      LL_EXTI_ClearFlag_32_63(exti_line);
 80029d4:	68b8      	ldr	r0, [r7, #8]
 80029d6:	f7ff fdb3 	bl	8002540 <LL_EXTI_ClearFlag_32_63>
 80029da:	e002      	b.n	80029e2 <HAL_COMP_IRQHandler+0xbe>
    }
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f7ff fd9f 	bl	8002520 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fbd2 	bl	800118c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40010200 	.word	0x40010200
 80029f4:	40010204 	.word	0x40010204
 80029f8:	40010208 	.word	0x40010208
 80029fc:	4001020c 	.word	0x4001020c
 8002a00:	40010210 	.word	0x40010210
 8002a04:	40010214 	.word	0x40010214
 8002a08:	40010218 	.word	0x40010218

08002a0c <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(const COMP_HandleTypeDef *hcomp)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0f9b      	lsrs	r3, r3, #30
 8002a1c:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	@ (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	@ (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff8e 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	@ (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff29 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff40 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff90 	bl	8002b20 <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff5f 	bl	8002acc <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff33 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffa4 	bl	8002b88 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e014      	b.n	8002c86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe f9e7 	bl	8001040 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e056      	b.n	8002d52 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	795b      	ldrb	r3, [r3, #5]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_DAC_Start+0x20>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e050      	b.n	8002d52 <HAL_DAC_Start+0xc2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd4:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_DAC_Start+0xd0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	4a22      	ldr	r2, [pc, #136]	@ (8002d64 <HAL_DAC_Start+0xd4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8002ce6:	e002      	b.n	8002cee <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d11d      	bne.n	8002d44 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	e014      	b.n	8002d44 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0202 	orr.w	r2, r2, #2
 8002d42:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000
 8002d64:	053e2d63 	.word	0x053e2d63

08002d68 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e018      	b.n	8002db6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e004      	b.n	8002dac <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	3314      	adds	r3, #20
 8002daa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	461a      	mov	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_DAC_ConfigChannel+0x1c>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e19e      	b.n	8003122 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	795b      	ldrb	r3, [r3, #5]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_DAC_ConfigChannel+0x2c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e198      	b.n	8003122 <HAL_DAC_ConfigChannel+0x35e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d17a      	bne.n	8002efa <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e04:	f7ff fa02 	bl	800220c <HAL_GetTick>
 8002e08:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d13d      	bne.n	8002e8c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e10:	e018      	b.n	8002e44 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e12:	f7ff f9fb 	bl	800220c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d911      	bls.n	8002e44 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f043 0208 	orr.w	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e16e      	b.n	8003122 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1df      	bne.n	8002e12 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e5c:	e020      	b.n	8002ea0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e5e:	f7ff f9d5 	bl	800220c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d90f      	bls.n	8002e8c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	da0a      	bge.n	8002e8c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f043 0208 	orr.w	r2, r3, #8
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2203      	movs	r2, #3
 8002e86:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e14a      	b.n	8003122 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dbe3      	blt.n	8002e5e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	ea02 0103 	and.w	r1, r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	21ff      	movs	r1, #255	@ 0xff
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	ea02 0103 	and.w	r1, r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d11d      	bne.n	8002f3e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	221f      	movs	r2, #31
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f32:	4313      	orrs	r3, r2
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f56:	4013      	ands	r3, r2
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	e00f      	b.n	8002f88 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d102      	bne.n	8002f76 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002f70:	2301      	movs	r3, #1
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	e008      	b.n	8002f88 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	e001      	b.n	8002f88 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002faa:	4013      	ands	r3, r2
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	791b      	ldrb	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_DAC_ConfigChannel+0x1f8>
 8002fb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fba:	e000      	b.n	8002fbe <HAL_DAC_ConfigChannel+0x1fa>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	795b      	ldrb	r3, [r3, #5]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <HAL_DAC_ConfigChannel+0x224>
 8002fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe6:	e000      	b.n	8002fea <HAL_DAC_ConfigChannel+0x226>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d114      	bne.n	800302a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003000:	f001 f856 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8003004:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4a48      	ldr	r2, [pc, #288]	@ (800312c <HAL_DAC_ConfigChannel+0x368>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d904      	bls.n	8003018 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
 8003016:	e00f      	b.n	8003038 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4a45      	ldr	r2, [pc, #276]	@ (8003130 <HAL_DAC_ConfigChannel+0x36c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d90a      	bls.n	8003036 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
 8003028:	e006      	b.n	8003038 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003030:	4313      	orrs	r3, r2
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
 8003034:	e000      	b.n	8003038 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003036:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003046:	4313      	orrs	r3, r2
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003050:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43da      	mvns	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308a:	4013      	ands	r3, r2
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a2:	4313      	orrs	r3, r2
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	22c0      	movs	r2, #192	@ 0xc0
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	400a      	ands	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	ea02 0103 	and.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003120:	7ffb      	ldrb	r3, [r7, #31]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3728      	adds	r7, #40	@ 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	09896800 	.word	0x09896800
 8003130:	04c4b400 	.word	0x04c4b400

08003134 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d005      	beq.n	8003158 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	e037      	b.n	80031c8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020e 	bic.w	r2, r2, #14
 8003166:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003172:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003176:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031a4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031c6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d00d      	beq.n	800321a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e047      	b.n	80032aa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020e 	bic.w	r2, r2, #14
 8003228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f003 021f 	and.w	r2, r3, #31
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003266:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00c      	beq.n	800328a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800327e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003288:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
    }
  }
  return status;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032c2:	e15a      	b.n	800357a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 814c 	beq.w	8003574 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d005      	beq.n	80032f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d130      	bne.n	8003356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800332a:	2201      	movs	r2, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0201 	and.w	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d017      	beq.n	8003392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d123      	bne.n	80033e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	08da      	lsrs	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3208      	adds	r2, #8
 80033e0:	6939      	ldr	r1, [r7, #16]
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0203 	and.w	r2, r3, #3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a6 	beq.w	8003574 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003428:	4b5b      	ldr	r3, [pc, #364]	@ (8003598 <HAL_GPIO_Init+0x2e4>)
 800342a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342c:	4a5a      	ldr	r2, [pc, #360]	@ (8003598 <HAL_GPIO_Init+0x2e4>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6613      	str	r3, [r2, #96]	@ 0x60
 8003434:	4b58      	ldr	r3, [pc, #352]	@ (8003598 <HAL_GPIO_Init+0x2e4>)
 8003436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003440:	4a56      	ldr	r2, [pc, #344]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800346a:	d01f      	beq.n	80034ac <HAL_GPIO_Init+0x1f8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4c      	ldr	r2, [pc, #304]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d019      	beq.n	80034a8 <HAL_GPIO_Init+0x1f4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4b      	ldr	r2, [pc, #300]	@ (80035a4 <HAL_GPIO_Init+0x2f0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_GPIO_Init+0x1f0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4a      	ldr	r2, [pc, #296]	@ (80035a8 <HAL_GPIO_Init+0x2f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00d      	beq.n	80034a0 <HAL_GPIO_Init+0x1ec>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a49      	ldr	r2, [pc, #292]	@ (80035ac <HAL_GPIO_Init+0x2f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <HAL_GPIO_Init+0x1e8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <HAL_GPIO_Init+0x2fc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_GPIO_Init+0x1e4>
 8003494:	2305      	movs	r3, #5
 8003496:	e00a      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 8003498:	2306      	movs	r3, #6
 800349a:	e008      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 800349c:	2304      	movs	r3, #4
 800349e:	e006      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034a0:	2303      	movs	r3, #3
 80034a2:	e004      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e002      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034ac:	2300      	movs	r3, #0
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	f002 0203 	and.w	r2, r2, #3
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	4093      	lsls	r3, r2
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034be:	4937      	ldr	r1, [pc, #220]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034cc:	4b39      	ldr	r3, [pc, #228]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f0:	4a30      	ldr	r2, [pc, #192]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034f6:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351a:	4a26      	ldr	r2, [pc, #152]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003520:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800354a:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800356e:	4a11      	ldr	r2, [pc, #68]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f ae9d 	bne.w	80032c4 <HAL_GPIO_Init+0x10>
  }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40021000 	.word	0x40021000
 800359c:	40010000 	.word	0x40010000
 80035a0:	48000400 	.word	0x48000400
 80035a4:	48000800 	.word	0x48000800
 80035a8:	48000c00 	.word	0x48000c00
 80035ac:	48001000 	.word	0x48001000
 80035b0:	48001400 	.word	0x48001400
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d141      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003602:	d131      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003604:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360a:	4a46      	ldr	r2, [pc, #280]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003610:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003614:	4b43      	ldr	r3, [pc, #268]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800361c:	4a41      	ldr	r2, [pc, #260]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003624:	4b40      	ldr	r3, [pc, #256]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2232      	movs	r2, #50	@ 0x32
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	4a3f      	ldr	r2, [pc, #252]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	0c9b      	lsrs	r3, r3, #18
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363a:	e002      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364e:	d102      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f2      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003656:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003662:	d158      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e057      	b.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003668:	4b2e      	ldr	r3, [pc, #184]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366e:	4a2d      	ldr	r2, [pc, #180]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003678:	e04d      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003680:	d141      	bne.n	8003706 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003682:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368e:	d131      	bne.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003690:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003696:	4a23      	ldr	r2, [pc, #140]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a0:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2232      	movs	r2, #50	@ 0x32
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	0c9b      	lsrs	r3, r3, #18
 80036c2:	3301      	adds	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c6:	e002      	b.n	80036ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036da:	d102      	bne.n	80036e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f2      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e2:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ee:	d112      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e011      	b.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003704:	e007      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003706:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800370e:	4a05      	ldr	r2, [pc, #20]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003714:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40007000 	.word	0x40007000
 8003728:	20000000 	.word	0x20000000
 800372c:	431bde83 	.word	0x431bde83

08003730 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a04      	ldr	r2, [pc, #16]	@ (800374c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800373a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800373e:	6093      	str	r3, [r2, #8]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40007000 	.word	0x40007000

08003750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e2fe      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d075      	beq.n	800385a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376e:	4b97      	ldr	r3, [pc, #604]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003778:	4b94      	ldr	r3, [pc, #592]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d102      	bne.n	800378e <HAL_RCC_OscConfig+0x3e>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d002      	beq.n	8003794 <HAL_RCC_OscConfig+0x44>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d10b      	bne.n	80037ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	4b8d      	ldr	r3, [pc, #564]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05b      	beq.n	8003858 <HAL_RCC_OscConfig+0x108>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d157      	bne.n	8003858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e2d9      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b4:	d106      	bne.n	80037c4 <HAL_RCC_OscConfig+0x74>
 80037b6:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a84      	ldr	r2, [pc, #528]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e01d      	b.n	8003800 <HAL_RCC_OscConfig+0xb0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x98>
 80037ce:	4b7f      	ldr	r3, [pc, #508]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7e      	ldr	r2, [pc, #504]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b7c      	ldr	r3, [pc, #496]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7b      	ldr	r2, [pc, #492]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0xb0>
 80037e8:	4b78      	ldr	r3, [pc, #480]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a77      	ldr	r2, [pc, #476]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b75      	ldr	r3, [pc, #468]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a74      	ldr	r2, [pc, #464]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe fd00 	bl	800220c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe fcfc 	bl	800220c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	@ 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e29e      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003822:	4b6a      	ldr	r3, [pc, #424]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0xc0>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fcec 	bl	800220c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fe fce8 	bl	800220c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	@ 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e28a      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384a:	4b60      	ldr	r3, [pc, #384]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0xe8>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003866:	4b59      	ldr	r3, [pc, #356]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003870:	4b56      	ldr	r3, [pc, #344]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d102      	bne.n	8003886 <HAL_RCC_OscConfig+0x136>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d002      	beq.n	800388c <HAL_RCC_OscConfig+0x13c>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d11f      	bne.n	80038cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800388c:	4b4f      	ldr	r3, [pc, #316]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_OscConfig+0x154>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e25d      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4b49      	ldr	r3, [pc, #292]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	4946      	ldr	r1, [pc, #280]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038b8:	4b45      	ldr	r3, [pc, #276]	@ (80039d0 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fc59 	bl	8002174 <HAL_InitTick>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d043      	beq.n	8003950 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e249      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3c      	ldr	r2, [pc, #240]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fc94 	bl	800220c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fe fc90 	bl	800220c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e232      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fa:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003906:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	492d      	ldr	r1, [pc, #180]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
 800391a:	e01a      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391c:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2a      	ldr	r2, [pc, #168]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003922:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fc70 	bl	800220c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7fe fc6c 	bl	800220c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e20e      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003942:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x1e0>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d041      	beq.n	80039e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800396c:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fe fc49 	bl	800220c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397e:	f7fe fc45 	bl	800220c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1e7      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ef      	beq.n	800397e <HAL_RCC_OscConfig+0x22e>
 800399e:	e020      	b.n	80039e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a6:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <HAL_RCC_OscConfig+0x27c>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe fc2c 	bl	800220c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b6:	e00d      	b.n	80039d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fe fc28 	bl	800220c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d906      	bls.n	80039d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1ca      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ea      	bne.n	80039b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80a6 	beq.w	8003b3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039f4:	4b84      	ldr	r3, [pc, #528]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2b4>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x2b6>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a16:	4b7c      	ldr	r3, [pc, #496]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a26:	4b79      	ldr	r3, [pc, #484]	@ (8003c0c <HAL_RCC_OscConfig+0x4bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a32:	4b76      	ldr	r3, [pc, #472]	@ (8003c0c <HAL_RCC_OscConfig+0x4bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	@ (8003c0c <HAL_RCC_OscConfig+0x4bc>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe fbe5 	bl	800220c <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe fbe1 	bl	800220c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e183      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a58:	4b6c      	ldr	r3, [pc, #432]	@ (8003c0c <HAL_RCC_OscConfig+0x4bc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d108      	bne.n	8003a7e <HAL_RCC_OscConfig+0x32e>
 8003a6c:	4b66      	ldr	r3, [pc, #408]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	4a65      	ldr	r2, [pc, #404]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a7c:	e024      	b.n	8003ac8 <HAL_RCC_OscConfig+0x378>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d110      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x358>
 8003a86:	4b60      	ldr	r3, [pc, #384]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a96:	4b5c      	ldr	r3, [pc, #368]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003aa6:	e00f      	b.n	8003ac8 <HAL_RCC_OscConfig+0x378>
 8003aa8:	4b57      	ldr	r3, [pc, #348]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a56      	ldr	r2, [pc, #344]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab8:	4b53      	ldr	r3, [pc, #332]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a52      	ldr	r2, [pc, #328]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d016      	beq.n	8003afe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fe fb9c 	bl	800220c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fb98 	bl	800220c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e138      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aee:	4b46      	ldr	r3, [pc, #280]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ed      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x388>
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fe fb85 	bl	800220c <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe fb81 	bl	800220c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e121      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ed      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b2a:	7ffb      	ldrb	r3, [r7, #31]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b35      	ldr	r3, [pc, #212]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	4a34      	ldr	r2, [pc, #208]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b50:	4b2d      	ldr	r3, [pc, #180]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b56:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fe fb54 	bl	800220c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b68:	f7fe fb50 	bl	800220c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0f2      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b7a:	4b23      	ldr	r3, [pc, #140]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ef      	beq.n	8003b68 <HAL_RCC_OscConfig+0x418>
 8003b88:	e01b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b90:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fb37 	bl	800220c <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba2:	f7fe fb33 	bl	800220c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0d5      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb4:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ef      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80c9 	beq.w	8003d5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	f000 8083 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d15e      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe fb0d 	bl	800220c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fb09 	bl	800220c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d905      	bls.n	8003c10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0ab      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c10:	4b55      	ldr	r3, [pc, #340]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ec      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1c:	4b52      	ldr	r3, [pc, #328]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4b52      	ldr	r3, [pc, #328]	@ (8003d6c <HAL_RCC_OscConfig+0x61c>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6a11      	ldr	r1, [r2, #32]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c36:	0212      	lsls	r2, r2, #8
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c3e:	0852      	lsrs	r2, r2, #1
 8003c40:	3a01      	subs	r2, #1
 8003c42:	0552      	lsls	r2, r2, #21
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c4a:	0852      	lsrs	r2, r2, #1
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0652      	lsls	r2, r2, #25
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c56:	06d2      	lsls	r2, r2, #27
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	4943      	ldr	r1, [pc, #268]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a40      	ldr	r2, [pc, #256]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a3d      	ldr	r2, [pc, #244]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fac8 	bl	800220c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fe fac4 	bl	800220c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e066      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	4b35      	ldr	r3, [pc, #212]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x530>
 8003c9e:	e05e      	b.n	8003d5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a30      	ldr	r2, [pc, #192]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe faae 	bl	800220c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe faaa 	bl	800220c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e04c      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc6:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cd2:	4b25      	ldr	r3, [pc, #148]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4924      	ldr	r1, [pc, #144]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003cd8:	4b25      	ldr	r3, [pc, #148]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]
 8003cde:	e03e      	b.n	8003d5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e039      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cec:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <HAL_RCC_OscConfig+0x618>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d12c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d123      	bne.n	8003d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d11b      	bne.n	8003d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d113      	bne.n	8003d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	019f800c 	.word	0x019f800c
 8003d70:	feeefffc 	.word	0xfeeefffc

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e11e      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b91      	ldr	r3, [pc, #580]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b8e      	ldr	r3, [pc, #568]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	498c      	ldr	r1, [pc, #560]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e106      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d073      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d129      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd0:	4b81      	ldr	r3, [pc, #516]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0f4      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003de0:	f000 f99e 	bl	8004120 <RCC_GetSysClockFreqFromPLLSource>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fdc <HAL_RCC_ClockConfig+0x268>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d93f      	bls.n	8003e6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dee:	4b7a      	ldr	r3, [pc, #488]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d033      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d12f      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e0e:	4b72      	ldr	r3, [pc, #456]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e16:	4a70      	ldr	r2, [pc, #448]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e024      	b.n	8003e6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0c6      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e3c:	4b66      	ldr	r3, [pc, #408]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0be      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e4c:	f000 f8ce 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a61      	ldr	r2, [pc, #388]	@ (8003fdc <HAL_RCC_ClockConfig+0x268>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d909      	bls.n	8003e6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e62:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 0203 	bic.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4957      	ldr	r1, [pc, #348]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e80:	f7fe f9c4 	bl	800220c <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7fe f9c0 	bl	800220c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e095      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 020c 	and.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d1eb      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d023      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec8:	4b43      	ldr	r3, [pc, #268]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a42      	ldr	r2, [pc, #264]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003ece:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ed2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef0:	4b39      	ldr	r3, [pc, #228]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4936      	ldr	r1, [pc, #216]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f0a:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f16:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d21d      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f24:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 020f 	bic.w	r2, r3, #15
 8003f2c:	4929      	ldr	r1, [pc, #164]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f34:	f7fe f96a 	bl	800220c <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe f966 	bl	800220c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e03b      	b.n	8003fca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b20      	ldr	r3, [pc, #128]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1ed      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4917      	ldr	r1, [pc, #92]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8a:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	490f      	ldr	r1, [pc, #60]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f9e:	f000 f825 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490c      	ldr	r1, [pc, #48]	@ (8003fe0 <HAL_RCC_ClockConfig+0x26c>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe4 <HAL_RCC_ClockConfig+0x270>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <HAL_RCC_ClockConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f8d6 	bl	8002174 <HAL_InitTick>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40022000 	.word	0x40022000
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	04c4b400 	.word	0x04c4b400
 8003fe0:	0800aa60 	.word	0x0800aa60
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	20000004 	.word	0x20000004

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d102      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	e047      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004004:	4b27      	ldr	r3, [pc, #156]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d102      	bne.n	8004016 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004010:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	e03e      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004016:	4b23      	ldr	r3, [pc, #140]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d136      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800402c:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	3301      	adds	r3, #1
 8004038:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d10c      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004040:	4a1a      	ldr	r2, [pc, #104]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404a:	68d2      	ldr	r2, [r2, #12]
 800404c:	0a12      	lsrs	r2, r2, #8
 800404e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
      break;
 8004058:	e00c      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800405a:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	4a10      	ldr	r2, [pc, #64]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	0a12      	lsrs	r2, r2, #8
 8004068:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800406c:	fb02 f303 	mul.w	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]
      break;
 8004072:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0e5b      	lsrs	r3, r3, #25
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	e001      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004094:	693b      	ldr	r3, [r7, #16]
}
 8004096:	4618      	mov	r0, r3
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b03      	ldr	r3, [pc, #12]	@ (80040c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000000 	.word	0x20000000

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4904      	ldr	r1, [pc, #16]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	0800aa70 	.word	0x0800aa70

080040f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040f8:	f7ff ffda 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0adb      	lsrs	r3, r3, #11
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4904      	ldr	r1, [pc, #16]	@ (800411c <HAL_RCC_GetPCLK2Freq+0x28>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	0800aa70 	.word	0x0800aa70

08004120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b1e      	ldr	r3, [pc, #120]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004130:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d10c      	bne.n	800415e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004144:	4a17      	ldr	r2, [pc, #92]	@ (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414e:	68d2      	ldr	r2, [r2, #12]
 8004150:	0a12      	lsrs	r2, r2, #8
 8004152:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	617b      	str	r3, [r7, #20]
    break;
 800415c:	e00c      	b.n	8004178 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800415e:	4a12      	ldr	r2, [pc, #72]	@ (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	0a12      	lsrs	r2, r2, #8
 800416c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    break;
 8004176:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0e5b      	lsrs	r3, r3, #25
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004192:	687b      	ldr	r3, [r7, #4]
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40021000 	.word	0x40021000
 80041a4:	007a1200 	.word	0x007a1200
 80041a8:	00f42400 	.word	0x00f42400

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041b4:	2300      	movs	r3, #0
 80041b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041b8:	2300      	movs	r3, #0
 80041ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8098 	beq.w	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4b40      	ldr	r3, [pc, #256]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	4a3f      	ldr	r2, [pc, #252]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e6:	4b3d      	ldr	r3, [pc, #244]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f6:	4b3a      	ldr	r3, [pc, #232]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a39      	ldr	r2, [pc, #228]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004202:	f7fe f803 	bl	800220c <HAL_GetTick>
 8004206:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004208:	e009      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fd ffff 	bl	800220c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d902      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	74fb      	strb	r3, [r7, #19]
        break;
 800421c:	e005      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421e:	4b30      	ldr	r3, [pc, #192]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ef      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d159      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004230:	4b2a      	ldr	r3, [pc, #168]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01e      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	d019      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800424c:	4b23      	ldr	r3, [pc, #140]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004258:	4b20      	ldr	r3, [pc, #128]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004278:	4a18      	ldr	r2, [pc, #96]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd ffbf 	bl	800220c <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004290:	e00b      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd ffbb 	bl	800220c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d902      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	74fb      	strb	r3, [r7, #19]
            break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ec      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042cc:	4903      	ldr	r1, [pc, #12]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042d4:	e008      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	74bb      	strb	r3, [r7, #18]
 80042da:	e005      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e8:	7c7b      	ldrb	r3, [r7, #17]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4ba7      	ldr	r3, [pc, #668]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	4aa6      	ldr	r2, [pc, #664]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004306:	4ba1      	ldr	r3, [pc, #644]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f023 0203 	bic.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	499d      	ldr	r1, [pc, #628]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004328:	4b98      	ldr	r3, [pc, #608]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432e:	f023 020c 	bic.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4995      	ldr	r1, [pc, #596]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800434a:	4b90      	ldr	r3, [pc, #576]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	498c      	ldr	r1, [pc, #560]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800436c:	4b87      	ldr	r3, [pc, #540]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4984      	ldr	r1, [pc, #528]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800438e:	4b7f      	ldr	r3, [pc, #508]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	497b      	ldr	r1, [pc, #492]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043b0:	4b76      	ldr	r3, [pc, #472]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	4973      	ldr	r1, [pc, #460]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d2:	4b6e      	ldr	r3, [pc, #440]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	496a      	ldr	r1, [pc, #424]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f4:	4b65      	ldr	r3, [pc, #404]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4962      	ldr	r1, [pc, #392]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004416:	4b5d      	ldr	r3, [pc, #372]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	4959      	ldr	r1, [pc, #356]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004438:	4b54      	ldr	r3, [pc, #336]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	4951      	ldr	r1, [pc, #324]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445a:	4b4c      	ldr	r3, [pc, #304]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004460:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	4948      	ldr	r1, [pc, #288]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800447c:	4b43      	ldr	r3, [pc, #268]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	4940      	ldr	r1, [pc, #256]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449c:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a3a      	ldr	r2, [pc, #232]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b4:	4b35      	ldr	r3, [pc, #212]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	4932      	ldr	r1, [pc, #200]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d2:	d105      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d4:	4b2d      	ldr	r3, [pc, #180]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a2c      	ldr	r2, [pc, #176]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044ec:	4b27      	ldr	r3, [pc, #156]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fa:	4924      	ldr	r1, [pc, #144]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450c:	4b1f      	ldr	r3, [pc, #124]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004516:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004532:	4916      	ldr	r1, [pc, #88]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b11      	ldr	r3, [pc, #68]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a10      	ldr	r2, [pc, #64]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d019      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	4908      	ldr	r1, [pc, #32]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457a:	d109      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a02      	ldr	r2, [pc, #8]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d015      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800459c:	4b29      	ldr	r3, [pc, #164]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	4926      	ldr	r1, [pc, #152]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ba:	d105      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045bc:	4b21      	ldr	r3, [pc, #132]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a20      	ldr	r2, [pc, #128]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e2:	4918      	ldr	r1, [pc, #96]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045f4:	4b13      	ldr	r3, [pc, #76]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a12      	ldr	r2, [pc, #72]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800460c:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800460e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004612:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461a:	490a      	ldr	r1, [pc, #40]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800462a:	d105      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a04      	ldr	r2, [pc, #16]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004636:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004638:	7cbb      	ldrb	r3, [r7, #18]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e049      	b.n	80046ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd fb4c 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fe5c 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d001      	beq.n	8004710 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e04c      	b.n	80047aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <HAL_TIM_Base_Start+0xc0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472a:	d01d      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <HAL_TIM_Base_Start+0xc4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <HAL_TIM_Base_Start+0xc8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <HAL_TIM_Base_Start+0xcc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <HAL_TIM_Base_Start+0xd0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1c      	ldr	r2, [pc, #112]	@ (80047cc <HAL_TIM_Base_Start+0xd4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIM_Base_Start+0x70>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <HAL_TIM_Base_Start+0xd8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d115      	bne.n	8004794 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <HAL_TIM_Base_Start+0xdc>)
 8004770:	4013      	ands	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b06      	cmp	r3, #6
 8004778:	d015      	beq.n	80047a6 <HAL_TIM_Base_Start+0xae>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004780:	d011      	beq.n	80047a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	e008      	b.n	80047a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e000      	b.n	80047a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40015000 	.word	0x40015000
 80047d4:	00010007 	.word	0x00010007

080047d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10f      	bne.n	8004810 <HAL_TIM_Base_Stop+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_Base_Stop+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e054      	b.n	80048ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a26      	ldr	r2, [pc, #152]	@ (80048f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486a:	d01d      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a22      	ldr	r2, [pc, #136]	@ (80048fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a21      	ldr	r2, [pc, #132]	@ (8004900 <HAL_TIM_Base_Start_IT+0xd8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1f      	ldr	r2, [pc, #124]	@ (8004904 <HAL_TIM_Base_Start_IT+0xdc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1e      	ldr	r2, [pc, #120]	@ (8004908 <HAL_TIM_Base_Start_IT+0xe0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1c      	ldr	r2, [pc, #112]	@ (800490c <HAL_TIM_Base_Start_IT+0xe4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x80>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004910 <HAL_TIM_Base_Start_IT+0xe8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d115      	bne.n	80048d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	4b19      	ldr	r3, [pc, #100]	@ (8004914 <HAL_TIM_Base_Start_IT+0xec>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b06      	cmp	r3, #6
 80048b8:	d015      	beq.n	80048e6 <HAL_TIM_Base_Start_IT+0xbe>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c0:	d011      	beq.n	80048e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	e008      	b.n	80048e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40000c00 	.word	0x40000c00
 8004908:	40013400 	.word	0x40013400
 800490c:	40014000 	.word	0x40014000
 8004910:	40015000 	.word	0x40015000
 8004914:	00010007 	.word	0x00010007

08004918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e049      	b.n	80049be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f841 	bl	80049c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 fcf4 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start+0x24>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e03c      	b.n	8004a7a <HAL_TIM_PWM_Start+0x9e>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x3e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e02f      	b.n	8004a7a <HAL_TIM_PWM_Start+0x9e>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x58>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e022      	b.n	8004a7a <HAL_TIM_PWM_Start+0x9e>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d109      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x72>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e015      	b.n	8004a7a <HAL_TIM_PWM_Start+0x9e>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d109      	bne.n	8004a68 <HAL_TIM_PWM_Start+0x8c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e008      	b.n	8004a7a <HAL_TIM_PWM_Start+0x9e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0a6      	b.n	8004bd0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xb6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a90:	e023      	b.n	8004ada <HAL_TIM_PWM_Start+0xfe>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0xc6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa0:	e01b      	b.n	8004ada <HAL_TIM_PWM_Start+0xfe>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xd6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_PWM_Start+0xfe>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xe6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_PWM_Start+0xfe>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0xf6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_PWM_Start+0xfe>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 f8a8 	bl	8005c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd8 <HAL_TIM_PWM_Start+0x1fc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x148>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a39      	ldr	r2, [pc, #228]	@ (8004bdc <HAL_TIM_PWM_Start+0x200>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x148>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a37      	ldr	r2, [pc, #220]	@ (8004be0 <HAL_TIM_PWM_Start+0x204>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x148>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a36      	ldr	r2, [pc, #216]	@ (8004be4 <HAL_TIM_PWM_Start+0x208>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x148>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a34      	ldr	r2, [pc, #208]	@ (8004be8 <HAL_TIM_PWM_Start+0x20c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x148>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a33      	ldr	r2, [pc, #204]	@ (8004bec <HAL_TIM_PWM_Start+0x210>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_TIM_PWM_Start+0x14c>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_TIM_PWM_Start+0x14e>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a25      	ldr	r2, [pc, #148]	@ (8004bd8 <HAL_TIM_PWM_Start+0x1fc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b50:	d01d      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a26      	ldr	r2, [pc, #152]	@ (8004bf0 <HAL_TIM_PWM_Start+0x214>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <HAL_TIM_PWM_Start+0x218>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a23      	ldr	r2, [pc, #140]	@ (8004bf8 <HAL_TIM_PWM_Start+0x21c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <HAL_TIM_PWM_Start+0x200>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <HAL_TIM_PWM_Start+0x204>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x1b2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <HAL_TIM_PWM_Start+0x210>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d115      	bne.n	8004bba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_TIM_PWM_Start+0x220>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d015      	beq.n	8004bcc <HAL_TIM_PWM_Start+0x1f0>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba6:	d011      	beq.n	8004bcc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	e008      	b.n	8004bcc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e000      	b.n	8004bce <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40013400 	.word	0x40013400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40014400 	.word	0x40014400
 8004be8:	40014800 	.word	0x40014800
 8004bec:	40015000 	.word	0x40015000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	00010007 	.word	0x00010007

08004c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0202 	mvn.w	r2, #2
 8004c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb5c 	bl	8005308 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fb4e 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb5f 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d020      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01b      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0204 	mvn.w	r2, #4
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fb36 	bl	8005308 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb28 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fb39 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d020      	beq.n	8004cfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0208 	mvn.w	r2, #8
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fb10 	bl	8005308 <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb02 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb13 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d020      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0210 	mvn.w	r2, #16
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 faea 	bl	8005308 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fadc 	bl	80052f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 faed 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0201 	mvn.w	r2, #1
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fc fa2a 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d104      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00c      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f001 f97e 	bl	8006096 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00c      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 f976 	bl	80060aa <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 faa7 	bl	8005330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f06f 0220 	mvn.w	r2, #32
 8004dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f001 f93e 	bl	8006082 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f001 f94a 	bl	80060be <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00c      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 f942 	bl	80060d2 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00c      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f93a 	bl	80060e6 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f932 	bl	80060fa <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0ff      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b14      	cmp	r3, #20
 8004eca:	f200 80f0 	bhi.w	80050ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ece:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	080050af 	.word	0x080050af
 8004edc:	080050af 	.word	0x080050af
 8004ee0:	080050af 	.word	0x080050af
 8004ee4:	08004f69 	.word	0x08004f69
 8004ee8:	080050af 	.word	0x080050af
 8004eec:	080050af 	.word	0x080050af
 8004ef0:	080050af 	.word	0x080050af
 8004ef4:	08004fab 	.word	0x08004fab
 8004ef8:	080050af 	.word	0x080050af
 8004efc:	080050af 	.word	0x080050af
 8004f00:	080050af 	.word	0x080050af
 8004f04:	08004feb 	.word	0x08004feb
 8004f08:	080050af 	.word	0x080050af
 8004f0c:	080050af 	.word	0x080050af
 8004f10:	080050af 	.word	0x080050af
 8004f14:	0800502d 	.word	0x0800502d
 8004f18:	080050af 	.word	0x080050af
 8004f1c:	080050af 	.word	0x080050af
 8004f20:	080050af 	.word	0x080050af
 8004f24:	0800506d 	.word	0x0800506d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fabc 	bl	80054ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0208 	orr.w	r2, r2, #8
 8004f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0204 	bic.w	r2, r2, #4
 8004f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6999      	ldr	r1, [r3, #24]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	619a      	str	r2, [r3, #24]
      break;
 8004f66:	e0a5      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fb36 	bl	80055e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	619a      	str	r2, [r3, #24]
      break;
 8004fa8:	e084      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fba9 	bl	8005708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0208 	orr.w	r2, r2, #8
 8004fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0204 	bic.w	r2, r2, #4
 8004fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69d9      	ldr	r1, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	61da      	str	r2, [r3, #28]
      break;
 8004fe8:	e064      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fc1b 	bl	800582c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69d9      	ldr	r1, [r3, #28]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	021a      	lsls	r2, r3, #8
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	61da      	str	r2, [r3, #28]
      break;
 800502a:	e043      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fc8e 	bl	8005954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800506a:	e023      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fcd8 	bl	8005a28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005086:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005096:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	021a      	lsls	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80050ac:	e002      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
      break;
 80050b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop

080050c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_ConfigClockSource+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0f6      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x20a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800510e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6f      	ldr	r2, [pc, #444]	@ (80052dc <HAL_TIM_ConfigClockSource+0x214>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f000 80c1 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005124:	4a6d      	ldr	r2, [pc, #436]	@ (80052dc <HAL_TIM_ConfigClockSource+0x214>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f200 80c6 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800512c:	4a6c      	ldr	r2, [pc, #432]	@ (80052e0 <HAL_TIM_ConfigClockSource+0x218>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f000 80b9 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005134:	4a6a      	ldr	r2, [pc, #424]	@ (80052e0 <HAL_TIM_ConfigClockSource+0x218>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f200 80be 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800513c:	4a69      	ldr	r2, [pc, #420]	@ (80052e4 <HAL_TIM_ConfigClockSource+0x21c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f000 80b1 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005144:	4a67      	ldr	r2, [pc, #412]	@ (80052e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	f200 80b6 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800514c:	4a66      	ldr	r2, [pc, #408]	@ (80052e8 <HAL_TIM_ConfigClockSource+0x220>)
 800514e:	4293      	cmp	r3, r2
 8005150:	f000 80a9 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005154:	4a64      	ldr	r2, [pc, #400]	@ (80052e8 <HAL_TIM_ConfigClockSource+0x220>)
 8005156:	4293      	cmp	r3, r2
 8005158:	f200 80ae 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800515c:	4a63      	ldr	r2, [pc, #396]	@ (80052ec <HAL_TIM_ConfigClockSource+0x224>)
 800515e:	4293      	cmp	r3, r2
 8005160:	f000 80a1 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005164:	4a61      	ldr	r2, [pc, #388]	@ (80052ec <HAL_TIM_ConfigClockSource+0x224>)
 8005166:	4293      	cmp	r3, r2
 8005168:	f200 80a6 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800516c:	4a60      	ldr	r2, [pc, #384]	@ (80052f0 <HAL_TIM_ConfigClockSource+0x228>)
 800516e:	4293      	cmp	r3, r2
 8005170:	f000 8099 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005174:	4a5e      	ldr	r2, [pc, #376]	@ (80052f0 <HAL_TIM_ConfigClockSource+0x228>)
 8005176:	4293      	cmp	r3, r2
 8005178:	f200 809e 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800517c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005180:	f000 8091 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005184:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005188:	f200 8096 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800518c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005190:	f000 8089 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 8005194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005198:	f200 808e 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a0:	d03e      	beq.n	8005220 <HAL_TIM_ConfigClockSource+0x158>
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a6:	f200 8087 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ae:	f000 8086 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x1f6>
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b6:	d87f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b8:	2b70      	cmp	r3, #112	@ 0x70
 80051ba:	d01a      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0x12a>
 80051bc:	2b70      	cmp	r3, #112	@ 0x70
 80051be:	d87b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c0:	2b60      	cmp	r3, #96	@ 0x60
 80051c2:	d050      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x19e>
 80051c4:	2b60      	cmp	r3, #96	@ 0x60
 80051c6:	d877      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c8:	2b50      	cmp	r3, #80	@ 0x50
 80051ca:	d03c      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x17e>
 80051cc:	2b50      	cmp	r3, #80	@ 0x50
 80051ce:	d873      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d058      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x1be>
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d86f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d8:	2b30      	cmp	r3, #48	@ 0x30
 80051da:	d064      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 80051dc:	2b30      	cmp	r3, #48	@ 0x30
 80051de:	d86b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d060      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d867      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d05a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x1de>
 80051f0:	e062      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	f000 fcf9 	bl	8005bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]
      break;
 800521e:	e04f      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	f000 fce2 	bl	8005bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005242:	609a      	str	r2, [r3, #8]
      break;
 8005244:	e03c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fc54 	bl	8005b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2150      	movs	r1, #80	@ 0x50
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fcad 	bl	8005bbe <TIM_ITRx_SetConfig>
      break;
 8005264:	e02c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	461a      	mov	r2, r3
 8005274:	f000 fc73 	bl	8005b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2160      	movs	r1, #96	@ 0x60
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fc9d 	bl	8005bbe <TIM_ITRx_SetConfig>
      break;
 8005284:	e01c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	461a      	mov	r2, r3
 8005294:	f000 fc34 	bl	8005b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2140      	movs	r1, #64	@ 0x40
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fc8d 	bl	8005bbe <TIM_ITRx_SetConfig>
      break;
 80052a4:	e00c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 fc84 	bl	8005bbe <TIM_ITRx_SetConfig>
      break;
 80052b6:	e003      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e000      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80052be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	00100070 	.word	0x00100070
 80052e0:	00100060 	.word	0x00100060
 80052e4:	00100050 	.word	0x00100050
 80052e8:	00100040 	.word	0x00100040
 80052ec:	00100030 	.word	0x00100030
 80052f0:	00100020 	.word	0x00100020

080052f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a4c      	ldr	r2, [pc, #304]	@ (8005488 <TIM_Base_SetConfig+0x144>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d017      	beq.n	800538c <TIM_Base_SetConfig+0x48>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005362:	d013      	beq.n	800538c <TIM_Base_SetConfig+0x48>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a49      	ldr	r2, [pc, #292]	@ (800548c <TIM_Base_SetConfig+0x148>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00f      	beq.n	800538c <TIM_Base_SetConfig+0x48>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a48      	ldr	r2, [pc, #288]	@ (8005490 <TIM_Base_SetConfig+0x14c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_Base_SetConfig+0x48>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a47      	ldr	r2, [pc, #284]	@ (8005494 <TIM_Base_SetConfig+0x150>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_Base_SetConfig+0x48>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a46      	ldr	r2, [pc, #280]	@ (8005498 <TIM_Base_SetConfig+0x154>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x48>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a45      	ldr	r2, [pc, #276]	@ (800549c <TIM_Base_SetConfig+0x158>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d108      	bne.n	800539e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a39      	ldr	r2, [pc, #228]	@ (8005488 <TIM_Base_SetConfig+0x144>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d023      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ac:	d01f      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a36      	ldr	r2, [pc, #216]	@ (800548c <TIM_Base_SetConfig+0x148>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01b      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a35      	ldr	r2, [pc, #212]	@ (8005490 <TIM_Base_SetConfig+0x14c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d017      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a34      	ldr	r2, [pc, #208]	@ (8005494 <TIM_Base_SetConfig+0x150>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a33      	ldr	r2, [pc, #204]	@ (8005498 <TIM_Base_SetConfig+0x154>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00f      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a33      	ldr	r2, [pc, #204]	@ (80054a0 <TIM_Base_SetConfig+0x15c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <TIM_Base_SetConfig+0x160>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a31      	ldr	r2, [pc, #196]	@ (80054a8 <TIM_Base_SetConfig+0x164>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0xaa>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <TIM_Base_SetConfig+0x158>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a18      	ldr	r2, [pc, #96]	@ (8005488 <TIM_Base_SetConfig+0x144>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_Base_SetConfig+0x110>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <TIM_Base_SetConfig+0x154>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00f      	beq.n	8005454 <TIM_Base_SetConfig+0x110>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1a      	ldr	r2, [pc, #104]	@ (80054a0 <TIM_Base_SetConfig+0x15c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_Base_SetConfig+0x110>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <TIM_Base_SetConfig+0x160>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_Base_SetConfig+0x110>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a18      	ldr	r2, [pc, #96]	@ (80054a8 <TIM_Base_SetConfig+0x164>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0x110>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a13      	ldr	r2, [pc, #76]	@ (800549c <TIM_Base_SetConfig+0x158>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d105      	bne.n	800547a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f023 0201 	bic.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	611a      	str	r2, [r3, #16]
  }
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40015000 	.word	0x40015000
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800

080054ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 0201 	bic.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 0302 	bic.w	r3, r3, #2
 80054f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a30      	ldr	r2, [pc, #192]	@ (80055c8 <TIM_OC1_SetConfig+0x11c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <TIM_OC1_SetConfig+0x88>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a2f      	ldr	r2, [pc, #188]	@ (80055cc <TIM_OC1_SetConfig+0x120>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_OC1_SetConfig+0x88>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a2e      	ldr	r2, [pc, #184]	@ (80055d0 <TIM_OC1_SetConfig+0x124>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_OC1_SetConfig+0x88>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a2d      	ldr	r2, [pc, #180]	@ (80055d4 <TIM_OC1_SetConfig+0x128>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_OC1_SetConfig+0x88>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a2c      	ldr	r2, [pc, #176]	@ (80055d8 <TIM_OC1_SetConfig+0x12c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC1_SetConfig+0x88>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2b      	ldr	r2, [pc, #172]	@ (80055dc <TIM_OC1_SetConfig+0x130>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10c      	bne.n	800554e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0308 	bic.w	r3, r3, #8
 800553a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 0304 	bic.w	r3, r3, #4
 800554c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1d      	ldr	r2, [pc, #116]	@ (80055c8 <TIM_OC1_SetConfig+0x11c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <TIM_OC1_SetConfig+0xd2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1c      	ldr	r2, [pc, #112]	@ (80055cc <TIM_OC1_SetConfig+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_OC1_SetConfig+0xd2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <TIM_OC1_SetConfig+0x124>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_OC1_SetConfig+0xd2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <TIM_OC1_SetConfig+0x128>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC1_SetConfig+0xd2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <TIM_OC1_SetConfig+0x12c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC1_SetConfig+0xd2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <TIM_OC1_SetConfig+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d111      	bne.n	80055a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40013400 	.word	0x40013400
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800
 80055dc:	40015000 	.word	0x40015000

080055e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0210 	bic.w	r2, r3, #16
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0320 	bic.w	r3, r3, #32
 800562e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a2c      	ldr	r2, [pc, #176]	@ (80056f0 <TIM_OC2_SetConfig+0x110>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_OC2_SetConfig+0x74>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a2b      	ldr	r2, [pc, #172]	@ (80056f4 <TIM_OC2_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC2_SetConfig+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a2a      	ldr	r2, [pc, #168]	@ (80056f8 <TIM_OC2_SetConfig+0x118>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10d      	bne.n	8005670 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800566e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a1f      	ldr	r2, [pc, #124]	@ (80056f0 <TIM_OC2_SetConfig+0x110>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <TIM_OC2_SetConfig+0xc0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1e      	ldr	r2, [pc, #120]	@ (80056f4 <TIM_OC2_SetConfig+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00f      	beq.n	80056a0 <TIM_OC2_SetConfig+0xc0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1e      	ldr	r2, [pc, #120]	@ (80056fc <TIM_OC2_SetConfig+0x11c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_OC2_SetConfig+0xc0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <TIM_OC2_SetConfig+0x120>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC2_SetConfig+0xc0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <TIM_OC2_SetConfig+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC2_SetConfig+0xc0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a17      	ldr	r2, [pc, #92]	@ (80056f8 <TIM_OC2_SetConfig+0x118>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d113      	bne.n	80056c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40015000 	.word	0x40015000
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800

08005708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a2b      	ldr	r2, [pc, #172]	@ (8005814 <TIM_OC3_SetConfig+0x10c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_OC3_SetConfig+0x72>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a2a      	ldr	r2, [pc, #168]	@ (8005818 <TIM_OC3_SetConfig+0x110>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_OC3_SetConfig+0x72>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a29      	ldr	r2, [pc, #164]	@ (800581c <TIM_OC3_SetConfig+0x114>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10d      	bne.n	8005796 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1e      	ldr	r2, [pc, #120]	@ (8005814 <TIM_OC3_SetConfig+0x10c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <TIM_OC3_SetConfig+0xbe>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <TIM_OC3_SetConfig+0x110>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_OC3_SetConfig+0xbe>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005820 <TIM_OC3_SetConfig+0x118>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_OC3_SetConfig+0xbe>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <TIM_OC3_SetConfig+0x11c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_OC3_SetConfig+0xbe>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <TIM_OC3_SetConfig+0x120>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC3_SetConfig+0xbe>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a16      	ldr	r2, [pc, #88]	@ (800581c <TIM_OC3_SetConfig+0x114>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d113      	bne.n	80057ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40015000 	.word	0x40015000
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800587a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2c      	ldr	r2, [pc, #176]	@ (800593c <TIM_OC4_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_OC4_SetConfig+0x74>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2b      	ldr	r2, [pc, #172]	@ (8005940 <TIM_OC4_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC4_SetConfig+0x74>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <TIM_OC4_SetConfig+0x118>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10d      	bne.n	80058bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1f      	ldr	r2, [pc, #124]	@ (800593c <TIM_OC4_SetConfig+0x110>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_OC4_SetConfig+0xc0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005940 <TIM_OC4_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_OC4_SetConfig+0xc0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <TIM_OC4_SetConfig+0x11c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_OC4_SetConfig+0xc0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1d      	ldr	r2, [pc, #116]	@ (800594c <TIM_OC4_SetConfig+0x120>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_OC4_SetConfig+0xc0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a1c      	ldr	r2, [pc, #112]	@ (8005950 <TIM_OC4_SetConfig+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC4_SetConfig+0xc0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <TIM_OC4_SetConfig+0x118>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d113      	bne.n	8005914 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	019b      	lsls	r3, r3, #6
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40015000 	.word	0x40015000
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800

08005954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <TIM_OC5_SetConfig+0xbc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_OC5_SetConfig+0x82>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <TIM_OC5_SetConfig+0xc0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_OC5_SetConfig+0x82>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <TIM_OC5_SetConfig+0xc4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_OC5_SetConfig+0x82>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <TIM_OC5_SetConfig+0xc8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_OC5_SetConfig+0x82>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <TIM_OC5_SetConfig+0xcc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC5_SetConfig+0x82>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a14      	ldr	r2, [pc, #80]	@ (8005a24 <TIM_OC5_SetConfig+0xd0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d109      	bne.n	80059ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800
 8005a24:	40015000 	.word	0x40015000

08005a28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	051b      	lsls	r3, r3, #20
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae8 <TIM_OC6_SetConfig+0xc0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <TIM_OC6_SetConfig+0x84>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a19      	ldr	r2, [pc, #100]	@ (8005aec <TIM_OC6_SetConfig+0xc4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00f      	beq.n	8005aac <TIM_OC6_SetConfig+0x84>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a18      	ldr	r2, [pc, #96]	@ (8005af0 <TIM_OC6_SetConfig+0xc8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00b      	beq.n	8005aac <TIM_OC6_SetConfig+0x84>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <TIM_OC6_SetConfig+0xcc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <TIM_OC6_SetConfig+0x84>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a16      	ldr	r2, [pc, #88]	@ (8005af8 <TIM_OC6_SetConfig+0xd0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC6_SetConfig+0x84>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a15      	ldr	r2, [pc, #84]	@ (8005afc <TIM_OC6_SetConfig+0xd4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d109      	bne.n	8005ac0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	029b      	lsls	r3, r3, #10
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	621a      	str	r2, [r3, #32]
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800
 8005afc:	40015000 	.word	0x40015000

08005b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0201 	bic.w	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f023 030a 	bic.w	r3, r3, #10
 8005b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b087      	sub	sp, #28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f023 0210 	bic.w	r2, r3, #16
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	031b      	lsls	r3, r3, #12
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f043 0307 	orr.w	r3, r3, #7
 8005be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	609a      	str	r2, [r3, #8]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	021a      	lsls	r2, r3, #8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1a      	ldr	r2, [r3, #32]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_TIMEx_PWMN_Start+0x24>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e022      	b.n	8005cee <HAL_TIMEx_PWMN_Start+0x6a>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d109      	bne.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x3e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	bf14      	ite	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	2300      	moveq	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	e015      	b.n	8005cee <HAL_TIMEx_PWMN_Start+0x6a>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d109      	bne.n	8005cdc <HAL_TIMEx_PWMN_Start+0x58>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e008      	b.n	8005cee <HAL_TIMEx_PWMN_Start+0x6a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e073      	b.n	8005dde <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIMEx_PWMN_Start+0x82>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d04:	e013      	b.n	8005d2e <HAL_TIMEx_PWMN_Start+0xaa>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIMEx_PWMN_Start+0x92>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d14:	e00b      	b.n	8005d2e <HAL_TIMEx_PWMN_Start+0xaa>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d104      	bne.n	8005d26 <HAL_TIMEx_PWMN_Start+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d24:	e003      	b.n	8005d2e <HAL_TIMEx_PWMN_Start+0xaa>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2204      	movs	r2, #4
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f9e9 	bl	800610e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a25      	ldr	r2, [pc, #148]	@ (8005de8 <HAL_TIMEx_PWMN_Start+0x164>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d022      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d5e:	d01d      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a21      	ldr	r2, [pc, #132]	@ (8005dec <HAL_TIMEx_PWMN_Start+0x168>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d018      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a20      	ldr	r2, [pc, #128]	@ (8005df0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d013      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	@ (8005df4 <HAL_TIMEx_PWMN_Start+0x170>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00e      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <HAL_TIMEx_PWMN_Start+0x174>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d009      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <HAL_TIMEx_PWMN_Start+0x178>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_TIMEx_PWMN_Start+0x118>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	@ (8005e00 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d115      	bne.n	8005dc8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	4b18      	ldr	r3, [pc, #96]	@ (8005e04 <HAL_TIMEx_PWMN_Start+0x180>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b06      	cmp	r3, #6
 8005dac:	d015      	beq.n	8005dda <HAL_TIMEx_PWMN_Start+0x156>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db4:	d011      	beq.n	8005dda <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	e008      	b.n	8005dda <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e000      	b.n	8005ddc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40015000 	.word	0x40015000
 8005e04:	00010007 	.word	0x00010007

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e074      	b.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a34      	ldr	r2, [pc, #208]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d009      	beq.n	8005e5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a33      	ldr	r2, [pc, #204]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d004      	beq.n	8005e5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a31      	ldr	r2, [pc, #196]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a21      	ldr	r2, [pc, #132]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d022      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea0:	d01d      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1c      	ldr	r2, [pc, #112]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a11      	ldr	r2, [pc, #68]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10c      	bne.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40013400 	.word	0x40013400
 8005f20:	40015000 	.word	0x40015000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40014000 	.word	0x40014000

08005f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e078      	b.n	8006042 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a19      	ldr	r2, [pc, #100]	@ (8006058 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d11c      	bne.n	8006030 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	051b      	lsls	r3, r3, #20
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40013400 	.word	0x40013400
 8006058:	40015000 	.word	0x40015000

0800605c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006072:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800610e:	b480      	push	{r7}
 8006110:	b087      	sub	sp, #28
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	2204      	movs	r2, #4
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	43db      	mvns	r3, r3
 8006130:	401a      	ands	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	fa01 f303 	lsl.w	r3, r1, r3
 8006146:	431a      	orrs	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e042      	b.n	80061f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fb ff0f 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2224      	movs	r2, #36	@ 0x24
 8006186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 ff14 	bl	8006fd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fc15 	bl	80069d8 <UART_SetConfig>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e01b      	b.n	80061f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 ff93 	bl	8007114 <UART_CheckIdleState>
 80061ee:	4603      	mov	r3, r0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	@ 0x28
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620e:	2b20      	cmp	r3, #32
 8006210:	d17b      	bne.n	800630a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_UART_Transmit+0x26>
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e074      	b.n	800630c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2221      	movs	r2, #33	@ 0x21
 800622e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006232:	f7fb ffeb 	bl	800220c <HAL_GetTick>
 8006236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006250:	d108      	bne.n	8006264 <HAL_UART_Transmit+0x6c>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	e003      	b.n	800626c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800626c:	e030      	b.n	80062d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	2180      	movs	r1, #128	@ 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fff5 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e03d      	b.n	800630c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	3302      	adds	r3, #2
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	e007      	b.n	80062be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1c8      	bne.n	800626e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2140      	movs	r1, #64	@ 0x40
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 ffbe 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e006      	b.n	800630c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	@ 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800633a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800633e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006342:	4013      	ands	r3, r2
 8006344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11b      	bne.n	8006388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8300 	beq.w	800697e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      }
      return;
 8006386:	e2fa      	b.n	800697e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8123 	beq.w	80065d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006396:	4b8d      	ldr	r3, [pc, #564]	@ (80065cc <HAL_UART_IRQHandler+0x2b8>)
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800639e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063a2:	4b8b      	ldr	r3, [pc, #556]	@ (80065d0 <HAL_UART_IRQHandler+0x2bc>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8116 	beq.w	80065d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0xc8>
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f043 0201 	orr.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0xf8>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2202      	movs	r2, #2
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0x128>
 8006418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2204      	movs	r2, #4
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	f043 0202 	orr.w	r2, r3, #2
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d017      	beq.n	8006478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006458:	4b5c      	ldr	r3, [pc, #368]	@ (80065cc <HAL_UART_IRQHandler+0x2b8>)
 800645a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646e:	f043 0208 	orr.w	r2, r3, #8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006480:	2b00      	cmp	r3, #0
 8006482:	d012      	beq.n	80064aa <HAL_UART_IRQHandler+0x196>
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8266 	beq.w	8006982 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d013      	beq.n	80064ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006506:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800650a:	2b00      	cmp	r3, #0
 800650c:	d054      	beq.n	80065b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 ff17 	bl	8007342 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651e:	2b40      	cmp	r3, #64	@ 0x40
 8006520:	d146      	bne.n	80065b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800653c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800654e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800655a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d9      	bne.n	8006522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d017      	beq.n	80065a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657e:	4a15      	ldr	r2, [pc, #84]	@ (80065d4 <HAL_UART_IRQHandler+0x2c0>)
 8006580:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006588:	4618      	mov	r0, r3
 800658a:	f7fc fe2c 	bl	80031e6 <HAL_DMA_Abort_IT>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d019      	beq.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80065a2:	4610      	mov	r0, r2
 80065a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	e00f      	b.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f9ff 	bl	80069ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ae:	e00b      	b.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9fb 	bl	80069ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b6:	e007      	b.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f9f7 	bl	80069ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80065c6:	e1dc      	b.n	8006982 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	bf00      	nop
    return;
 80065ca:	e1da      	b.n	8006982 <HAL_UART_IRQHandler+0x66e>
 80065cc:	10000001 	.word	0x10000001
 80065d0:	04000120 	.word	0x04000120
 80065d4:	0800740f 	.word	0x0800740f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f040 8170 	bne.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8169 	beq.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8162 	beq.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2210      	movs	r2, #16
 8006604:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006610:	2b40      	cmp	r3, #64	@ 0x40
 8006612:	f040 80d8 	bne.w	80067c6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80af 	beq.w	800678c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006638:	429a      	cmp	r2, r3
 800663a:	f080 80a7 	bcs.w	800678c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006644:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8087 	bne.w	800676a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800668a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1da      	bne.n	800665c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e1      	bne.n	80066a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800670c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006738:	f023 0310 	bic.w	r3, r3, #16
 800673c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e4      	bne.n	8006728 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006764:	4618      	mov	r0, r3
 8006766:	f7fc fce5 	bl	8003134 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800677c:	b29b      	uxth	r3, r3
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f91b 	bl	80069c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800678a:	e0fc      	b.n	8006986 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006796:	429a      	cmp	r2, r3
 8006798:	f040 80f5 	bne.w	8006986 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	f040 80eb 	bne.w	8006986 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8fe 	bl	80069c0 <HAL_UARTEx_RxEventCallback>
      return;
 80067c4:	e0df      	b.n	8006986 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80d1 	beq.w	800698a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80067e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80cc 	beq.w	800698a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006814:	647b      	str	r3, [r7, #68]	@ 0x44
 8006816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800681a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e4      	bne.n	80067f2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	623b      	str	r3, [r7, #32]
   return(result);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006850:	633a      	str	r2, [r7, #48]	@ 0x30
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e1      	bne.n	8006828 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	60fb      	str	r3, [r7, #12]
   return(result);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0310 	bic.w	r3, r3, #16
 800688c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	617b      	str	r3, [r7, #20]
   return(result);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e4      	bne.n	8006878 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f880 	bl	80069c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068c0:	e063      	b.n	800698a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <HAL_UART_IRQHandler+0x5d8>
 80068ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fdd3 	bl	8007490 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ea:	e051      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006914:	2b00      	cmp	r3, #0
 8006916:	d03a      	beq.n	800698e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
    }
    return;
 8006920:	e035      	b.n	800698e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_UART_IRQHandler+0x62e>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fd7d 	bl	800743a <UART_EndTransmit_IT>
    return;
 8006940:	e026      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_UART_IRQHandler+0x64e>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006952:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fdac 	bl	80074b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006960:	e016      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006966:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <HAL_UART_IRQHandler+0x67c>
 800696e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0c      	bge.n	8006990 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fd94 	bl	80074a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800697c:	e008      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
      return;
 800697e:	bf00      	nop
 8006980:	e006      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
    return;
 8006982:	bf00      	nop
 8006984:	e004      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
      return;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
      return;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
    return;
 800698e:	bf00      	nop
  }
}
 8006990:	37e8      	adds	r7, #232	@ 0xe8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop

08006998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069dc:	b08c      	sub	sp, #48	@ 0x30
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	431a      	orrs	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4baa      	ldr	r3, [pc, #680]	@ (8006cb0 <UART_SetConfig+0x2d8>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a10:	430b      	orrs	r3, r1
 8006a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a9f      	ldr	r2, [pc, #636]	@ (8006cb4 <UART_SetConfig+0x2dc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a40:	4313      	orrs	r3, r2
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	f023 010f 	bic.w	r1, r3, #15
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a90      	ldr	r2, [pc, #576]	@ (8006cb8 <UART_SetConfig+0x2e0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d125      	bne.n	8006ac8 <UART_SetConfig+0xf0>
 8006a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8006cbc <UART_SetConfig+0x2e4>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d81a      	bhi.n	8006ac0 <UART_SetConfig+0xe8>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <UART_SetConfig+0xb8>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	08006aa9 	.word	0x08006aa9
 8006a9c:	08006ab9 	.word	0x08006ab9
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e116      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e112      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e10e      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e10a      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e106      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a7c      	ldr	r2, [pc, #496]	@ (8006cc0 <UART_SetConfig+0x2e8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d138      	bne.n	8006b44 <UART_SetConfig+0x16c>
 8006ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8006cbc <UART_SetConfig+0x2e4>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad8:	f003 030c 	and.w	r3, r3, #12
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d82d      	bhi.n	8006b3c <UART_SetConfig+0x164>
 8006ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <UART_SetConfig+0x110>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b3d 	.word	0x08006b3d
 8006af8:	08006b2d 	.word	0x08006b2d
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006b3d 	.word	0x08006b3d
 8006b04:	08006b3d 	.word	0x08006b3d
 8006b08:	08006b25 	.word	0x08006b25
 8006b0c:	08006b3d 	.word	0x08006b3d
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b22:	e0d8      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e0d4      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e0d0      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3a:	e0cc      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e0c8      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5e      	ldr	r2, [pc, #376]	@ (8006cc4 <UART_SetConfig+0x2ec>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d125      	bne.n	8006b9a <UART_SetConfig+0x1c2>
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8006cbc <UART_SetConfig+0x2e4>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b58:	2b30      	cmp	r3, #48	@ 0x30
 8006b5a:	d016      	beq.n	8006b8a <UART_SetConfig+0x1b2>
 8006b5c:	2b30      	cmp	r3, #48	@ 0x30
 8006b5e:	d818      	bhi.n	8006b92 <UART_SetConfig+0x1ba>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d00a      	beq.n	8006b7a <UART_SetConfig+0x1a2>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d814      	bhi.n	8006b92 <UART_SetConfig+0x1ba>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <UART_SetConfig+0x19a>
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d008      	beq.n	8006b82 <UART_SetConfig+0x1aa>
 8006b70:	e00f      	b.n	8006b92 <UART_SetConfig+0x1ba>
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b78:	e0ad      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b80:	e0a9      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b82:	2304      	movs	r3, #4
 8006b84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b88:	e0a5      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b90:	e0a1      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b92:	2310      	movs	r3, #16
 8006b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b98:	e09d      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc8 <UART_SetConfig+0x2f0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d125      	bne.n	8006bf0 <UART_SetConfig+0x218>
 8006ba4:	4b45      	ldr	r3, [pc, #276]	@ (8006cbc <UART_SetConfig+0x2e4>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006baa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bb0:	d016      	beq.n	8006be0 <UART_SetConfig+0x208>
 8006bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bb4:	d818      	bhi.n	8006be8 <UART_SetConfig+0x210>
 8006bb6:	2b80      	cmp	r3, #128	@ 0x80
 8006bb8:	d00a      	beq.n	8006bd0 <UART_SetConfig+0x1f8>
 8006bba:	2b80      	cmp	r3, #128	@ 0x80
 8006bbc:	d814      	bhi.n	8006be8 <UART_SetConfig+0x210>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <UART_SetConfig+0x1f0>
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x200>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x210>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e082      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e07e      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e07a      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be6:	e076      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	e072      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a35      	ldr	r2, [pc, #212]	@ (8006ccc <UART_SetConfig+0x2f4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d12a      	bne.n	8006c50 <UART_SetConfig+0x278>
 8006bfa:	4b30      	ldr	r3, [pc, #192]	@ (8006cbc <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c08:	d01a      	beq.n	8006c40 <UART_SetConfig+0x268>
 8006c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c0e:	d81b      	bhi.n	8006c48 <UART_SetConfig+0x270>
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c14:	d00c      	beq.n	8006c30 <UART_SetConfig+0x258>
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c1a:	d815      	bhi.n	8006c48 <UART_SetConfig+0x270>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <UART_SetConfig+0x250>
 8006c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x260>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x270>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	e052      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c36:	e04e      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3e:	e04a      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c46:	e046      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4e:	e042      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <UART_SetConfig+0x2dc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d13a      	bne.n	8006cd0 <UART_SetConfig+0x2f8>
 8006c5a:	4b18      	ldr	r3, [pc, #96]	@ (8006cbc <UART_SetConfig+0x2e4>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c68:	d01a      	beq.n	8006ca0 <UART_SetConfig+0x2c8>
 8006c6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c6e:	d81b      	bhi.n	8006ca8 <UART_SetConfig+0x2d0>
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c74:	d00c      	beq.n	8006c90 <UART_SetConfig+0x2b8>
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7a:	d815      	bhi.n	8006ca8 <UART_SetConfig+0x2d0>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <UART_SetConfig+0x2b0>
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c84:	d008      	beq.n	8006c98 <UART_SetConfig+0x2c0>
 8006c86:	e00f      	b.n	8006ca8 <UART_SetConfig+0x2d0>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e022      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e01e      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9e:	e01a      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca6:	e016      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cae:	e012      	b.n	8006cd6 <UART_SetConfig+0x2fe>
 8006cb0:	cfff69f3 	.word	0xcfff69f3
 8006cb4:	40008000 	.word	0x40008000
 8006cb8:	40013800 	.word	0x40013800
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40004400 	.word	0x40004400
 8006cc4:	40004800 	.word	0x40004800
 8006cc8:	40004c00 	.word	0x40004c00
 8006ccc:	40005000 	.word	0x40005000
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4aae      	ldr	r2, [pc, #696]	@ (8006f94 <UART_SetConfig+0x5bc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	f040 8097 	bne.w	8006e10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d823      	bhi.n	8006d32 <UART_SetConfig+0x35a>
 8006cea:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <UART_SetConfig+0x318>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d33 	.word	0x08006d33
 8006cf8:	08006d1d 	.word	0x08006d1d
 8006cfc:	08006d33 	.word	0x08006d33
 8006d00:	08006d23 	.word	0x08006d23
 8006d04:	08006d33 	.word	0x08006d33
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d33 	.word	0x08006d33
 8006d10:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d14:	f7fd f9d8 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8006d18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d1a:	e010      	b.n	8006d3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d1c:	4b9e      	ldr	r3, [pc, #632]	@ (8006f98 <UART_SetConfig+0x5c0>)
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d20:	e00d      	b.n	8006d3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fd f963 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8006d26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8130 	beq.w	8006fa6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	4a94      	ldr	r2, [pc, #592]	@ (8006f9c <UART_SetConfig+0x5c4>)
 8006d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	4413      	add	r3, r2
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d305      	bcc.n	8006d76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d903      	bls.n	8006d7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d7c:	e113      	b.n	8006fa6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	2200      	movs	r2, #0
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	60fa      	str	r2, [r7, #12]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	4a84      	ldr	r2, [pc, #528]	@ (8006f9c <UART_SetConfig+0x5c4>)
 8006d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2200      	movs	r2, #0
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006da0:	f7f9 ff2a 	bl	8000bf8 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4610      	mov	r0, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	020b      	lsls	r3, r1, #8
 8006db6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dba:	0202      	lsls	r2, r0, #8
 8006dbc:	6979      	ldr	r1, [r7, #20]
 8006dbe:	6849      	ldr	r1, [r1, #4]
 8006dc0:	0849      	lsrs	r1, r1, #1
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	eb12 0804 	adds.w	r8, r2, r4
 8006dcc:	eb43 0905 	adc.w	r9, r3, r5
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	469a      	mov	sl, r3
 8006dd8:	4693      	mov	fp, r2
 8006dda:	4652      	mov	r2, sl
 8006ddc:	465b      	mov	r3, fp
 8006dde:	4640      	mov	r0, r8
 8006de0:	4649      	mov	r1, r9
 8006de2:	f7f9 ff09 	bl	8000bf8 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4613      	mov	r3, r2
 8006dec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df4:	d308      	bcc.n	8006e08 <UART_SetConfig+0x430>
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dfc:	d204      	bcs.n	8006e08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a3a      	ldr	r2, [r7, #32]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	e0ce      	b.n	8006fa6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e0e:	e0ca      	b.n	8006fa6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e18:	d166      	bne.n	8006ee8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d827      	bhi.n	8006e72 <UART_SetConfig+0x49a>
 8006e22:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <UART_SetConfig+0x450>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006e73 	.word	0x08006e73
 8006e38:	08006e63 	.word	0x08006e63
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fd f93c 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8006e50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e52:	e014      	b.n	8006e7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7fd f94e 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 8006e58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e5a:	e010      	b.n	8006e7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f98 <UART_SetConfig+0x5c0>)
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e60:	e00d      	b.n	8006e7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e62:	f7fd f8c3 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8006e66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e68:	e009      	b.n	8006e7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e70:	e005      	b.n	8006e7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8090 	beq.w	8006fa6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	4a44      	ldr	r2, [pc, #272]	@ (8006f9c <UART_SetConfig+0x5c4>)
 8006e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e98:	005a      	lsls	r2, r3, #1
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	441a      	add	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	2b0f      	cmp	r3, #15
 8006eb0:	d916      	bls.n	8006ee0 <UART_SetConfig+0x508>
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb8:	d212      	bcs.n	8006ee0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f023 030f 	bic.w	r3, r3, #15
 8006ec2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	8bfb      	ldrh	r3, [r7, #30]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	8bfa      	ldrh	r2, [r7, #30]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	e062      	b.n	8006fa6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ee6:	e05e      	b.n	8006fa6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d828      	bhi.n	8006f42 <UART_SetConfig+0x56a>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0x520>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	08006f43 	.word	0x08006f43
 8006f08:	08006f33 	.word	0x08006f33
 8006f0c:	08006f43 	.word	0x08006f43
 8006f10:	08006f43 	.word	0x08006f43
 8006f14:	08006f43 	.word	0x08006f43
 8006f18:	08006f3b 	.word	0x08006f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fd f8d4 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f22:	e014      	b.n	8006f4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f24:	f7fd f8e6 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 8006f28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f2a:	e010      	b.n	8006f4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <UART_SetConfig+0x5c0>)
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f30:	e00d      	b.n	8006f4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f32:	f7fd f85b 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8006f36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f38:	e009      	b.n	8006f4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f40:	e005      	b.n	8006f4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f4c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d028      	beq.n	8006fa6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	4a10      	ldr	r2, [pc, #64]	@ (8006f9c <UART_SetConfig+0x5c4>)
 8006f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	441a      	add	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	d910      	bls.n	8006fa0 <UART_SetConfig+0x5c8>
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f84:	d20c      	bcs.n	8006fa0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60da      	str	r2, [r3, #12]
 8006f90:	e009      	b.n	8006fa6 <UART_SetConfig+0x5ce>
 8006f92:	bf00      	nop
 8006f94:	40008000 	.word	0x40008000
 8006f98:	00f42400 	.word	0x00f42400
 8006f9c:	0800aa78 	.word	0x0800aa78
      }
      else
      {
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3730      	adds	r7, #48	@ 0x30
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ce:	d10a      	bne.n	80070e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b098      	sub	sp, #96	@ 0x60
 8007118:	af02      	add	r7, sp, #8
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007124:	f7fb f872 	bl	800220c <HAL_GetTick>
 8007128:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d12f      	bne.n	8007198 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f88e 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d022      	beq.n	8007198 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007166:	653b      	str	r3, [r7, #80]	@ 0x50
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007170:	647b      	str	r3, [r7, #68]	@ 0x44
 8007172:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e063      	b.n	8007260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d149      	bne.n	800723a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ae:	2200      	movs	r2, #0
 80071b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f857 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d03c      	beq.n	800723a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	623b      	str	r3, [r7, #32]
   return(result);
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071de:	633b      	str	r3, [r7, #48]	@ 0x30
 80071e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e6      	bne.n	80071c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	60fb      	str	r3, [r7, #12]
   return(result);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007212:	61fa      	str	r2, [r7, #28]
 8007214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	617b      	str	r3, [r7, #20]
   return(result);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e012      	b.n	8007260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3758      	adds	r7, #88	@ 0x58
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007278:	e04f      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d04b      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007282:	f7fa ffc3 	bl	800220c <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	429a      	cmp	r2, r3
 8007290:	d302      	bcc.n	8007298 <UART_WaitOnFlagUntilTimeout+0x30>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e04e      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d037      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b80      	cmp	r3, #128	@ 0x80
 80072ae:	d034      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b40      	cmp	r3, #64	@ 0x40
 80072b4:	d031      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d110      	bne.n	80072e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2208      	movs	r2, #8
 80072ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f838 	bl	8007342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2208      	movs	r2, #8
 80072d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e029      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f4:	d111      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f81e 	bl	8007342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e00f      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4013      	ands	r3, r2
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	bf0c      	ite	eq
 800732a:	2301      	moveq	r3, #1
 800732c:	2300      	movne	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	429a      	cmp	r2, r3
 8007336:	d0a0      	beq.n	800727a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007342:	b480      	push	{r7}
 8007344:	b095      	sub	sp, #84	@ 0x54
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800735e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007368:	643b      	str	r3, [r7, #64]	@ 0x40
 800736a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800736e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e6      	bne.n	800734a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3308      	adds	r3, #8
 8007382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	61fb      	str	r3, [r7, #28]
   return(result);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e3      	bne.n	800737c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d118      	bne.n	80073ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0310 	bic.w	r3, r3, #16
 80073d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	613b      	str	r3, [r7, #16]
   return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e6      	bne.n	80073bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007402:	bf00      	nop
 8007404:	3754      	adds	r7, #84	@ 0x54
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7ff fabd 	bl	80069ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b088      	sub	sp, #32
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6979      	ldr	r1, [r7, #20]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	613b      	str	r3, [r7, #16]
   return(result);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fa88 	bl	8006998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007488:	bf00      	nop
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80074de:	2302      	movs	r3, #2
 80074e0:	e027      	b.n	8007532 <HAL_UARTEx_DisableFifoMode+0x66>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2224      	movs	r2, #36	@ 0x24
 80074ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007552:	2302      	movs	r3, #2
 8007554:	e02d      	b.n	80075b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2224      	movs	r2, #36	@ 0x24
 8007562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0201 	bic.w	r2, r2, #1
 800757c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f850 	bl	8007638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e02d      	b.n	800762e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2224      	movs	r2, #36	@ 0x24
 80075de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f812 	bl	8007638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007658:	e031      	b.n	80076be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800765a:	2308      	movs	r3, #8
 800765c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800765e:	2308      	movs	r3, #8
 8007660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	0e5b      	lsrs	r3, r3, #25
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	0f5b      	lsrs	r3, r3, #29
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	7b3a      	ldrb	r2, [r7, #12]
 8007686:	4911      	ldr	r1, [pc, #68]	@ (80076cc <UARTEx_SetNbDataToProcess+0x94>)
 8007688:	5c8a      	ldrb	r2, [r1, r2]
 800768a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800768e:	7b3a      	ldrb	r2, [r7, #12]
 8007690:	490f      	ldr	r1, [pc, #60]	@ (80076d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007694:	fb93 f3f2 	sdiv	r3, r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	7b7a      	ldrb	r2, [r7, #13]
 80076a4:	4909      	ldr	r1, [pc, #36]	@ (80076cc <UARTEx_SetNbDataToProcess+0x94>)
 80076a6:	5c8a      	ldrb	r2, [r1, r2]
 80076a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076ac:	7b7a      	ldrb	r2, [r7, #13]
 80076ae:	4908      	ldr	r1, [pc, #32]	@ (80076d0 <UARTEx_SetNbDataToProcess+0x98>)
 80076b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	0800aa90 	.word	0x0800aa90
 80076d0:	0800aa98 	.word	0x0800aa98

080076d4 <__cvt>:
 80076d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	ec57 6b10 	vmov	r6, r7, d0
 80076dc:	2f00      	cmp	r7, #0
 80076de:	460c      	mov	r4, r1
 80076e0:	4619      	mov	r1, r3
 80076e2:	463b      	mov	r3, r7
 80076e4:	bfbb      	ittet	lt
 80076e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076ea:	461f      	movlt	r7, r3
 80076ec:	2300      	movge	r3, #0
 80076ee:	232d      	movlt	r3, #45	@ 0x2d
 80076f0:	700b      	strb	r3, [r1, #0]
 80076f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076f8:	4691      	mov	r9, r2
 80076fa:	f023 0820 	bic.w	r8, r3, #32
 80076fe:	bfbc      	itt	lt
 8007700:	4632      	movlt	r2, r6
 8007702:	4616      	movlt	r6, r2
 8007704:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007708:	d005      	beq.n	8007716 <__cvt+0x42>
 800770a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800770e:	d100      	bne.n	8007712 <__cvt+0x3e>
 8007710:	3401      	adds	r4, #1
 8007712:	2102      	movs	r1, #2
 8007714:	e000      	b.n	8007718 <__cvt+0x44>
 8007716:	2103      	movs	r1, #3
 8007718:	ab03      	add	r3, sp, #12
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	ab02      	add	r3, sp, #8
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	ec47 6b10 	vmov	d0, r6, r7
 8007724:	4653      	mov	r3, sl
 8007726:	4622      	mov	r2, r4
 8007728:	f000 ff4e 	bl	80085c8 <_dtoa_r>
 800772c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007730:	4605      	mov	r5, r0
 8007732:	d119      	bne.n	8007768 <__cvt+0x94>
 8007734:	f019 0f01 	tst.w	r9, #1
 8007738:	d00e      	beq.n	8007758 <__cvt+0x84>
 800773a:	eb00 0904 	add.w	r9, r0, r4
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f9 f9e7 	bl	8000b18 <__aeabi_dcmpeq>
 800774a:	b108      	cbz	r0, 8007750 <__cvt+0x7c>
 800774c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007750:	2230      	movs	r2, #48	@ 0x30
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	454b      	cmp	r3, r9
 8007756:	d31e      	bcc.n	8007796 <__cvt+0xc2>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800775c:	1b5b      	subs	r3, r3, r5
 800775e:	4628      	mov	r0, r5
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	b004      	add	sp, #16
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800776c:	eb00 0904 	add.w	r9, r0, r4
 8007770:	d1e5      	bne.n	800773e <__cvt+0x6a>
 8007772:	7803      	ldrb	r3, [r0, #0]
 8007774:	2b30      	cmp	r3, #48	@ 0x30
 8007776:	d10a      	bne.n	800778e <__cvt+0xba>
 8007778:	2200      	movs	r2, #0
 800777a:	2300      	movs	r3, #0
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f9 f9ca 	bl	8000b18 <__aeabi_dcmpeq>
 8007784:	b918      	cbnz	r0, 800778e <__cvt+0xba>
 8007786:	f1c4 0401 	rsb	r4, r4, #1
 800778a:	f8ca 4000 	str.w	r4, [sl]
 800778e:	f8da 3000 	ldr.w	r3, [sl]
 8007792:	4499      	add	r9, r3
 8007794:	e7d3      	b.n	800773e <__cvt+0x6a>
 8007796:	1c59      	adds	r1, r3, #1
 8007798:	9103      	str	r1, [sp, #12]
 800779a:	701a      	strb	r2, [r3, #0]
 800779c:	e7d9      	b.n	8007752 <__cvt+0x7e>

0800779e <__exponent>:
 800779e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a0:	2900      	cmp	r1, #0
 80077a2:	bfba      	itte	lt
 80077a4:	4249      	neglt	r1, r1
 80077a6:	232d      	movlt	r3, #45	@ 0x2d
 80077a8:	232b      	movge	r3, #43	@ 0x2b
 80077aa:	2909      	cmp	r1, #9
 80077ac:	7002      	strb	r2, [r0, #0]
 80077ae:	7043      	strb	r3, [r0, #1]
 80077b0:	dd29      	ble.n	8007806 <__exponent+0x68>
 80077b2:	f10d 0307 	add.w	r3, sp, #7
 80077b6:	461d      	mov	r5, r3
 80077b8:	270a      	movs	r7, #10
 80077ba:	461a      	mov	r2, r3
 80077bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80077c0:	fb07 1416 	mls	r4, r7, r6, r1
 80077c4:	3430      	adds	r4, #48	@ 0x30
 80077c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077ca:	460c      	mov	r4, r1
 80077cc:	2c63      	cmp	r4, #99	@ 0x63
 80077ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80077d2:	4631      	mov	r1, r6
 80077d4:	dcf1      	bgt.n	80077ba <__exponent+0x1c>
 80077d6:	3130      	adds	r1, #48	@ 0x30
 80077d8:	1e94      	subs	r4, r2, #2
 80077da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077de:	1c41      	adds	r1, r0, #1
 80077e0:	4623      	mov	r3, r4
 80077e2:	42ab      	cmp	r3, r5
 80077e4:	d30a      	bcc.n	80077fc <__exponent+0x5e>
 80077e6:	f10d 0309 	add.w	r3, sp, #9
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	42ac      	cmp	r4, r5
 80077ee:	bf88      	it	hi
 80077f0:	2300      	movhi	r3, #0
 80077f2:	3302      	adds	r3, #2
 80077f4:	4403      	add	r3, r0
 80077f6:	1a18      	subs	r0, r3, r0
 80077f8:	b003      	add	sp, #12
 80077fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007800:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007804:	e7ed      	b.n	80077e2 <__exponent+0x44>
 8007806:	2330      	movs	r3, #48	@ 0x30
 8007808:	3130      	adds	r1, #48	@ 0x30
 800780a:	7083      	strb	r3, [r0, #2]
 800780c:	70c1      	strb	r1, [r0, #3]
 800780e:	1d03      	adds	r3, r0, #4
 8007810:	e7f1      	b.n	80077f6 <__exponent+0x58>
	...

08007814 <_printf_float>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	b08d      	sub	sp, #52	@ 0x34
 800781a:	460c      	mov	r4, r1
 800781c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007820:	4616      	mov	r6, r2
 8007822:	461f      	mov	r7, r3
 8007824:	4605      	mov	r5, r0
 8007826:	f000 fdcd 	bl	80083c4 <_localeconv_r>
 800782a:	6803      	ldr	r3, [r0, #0]
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	4618      	mov	r0, r3
 8007830:	f7f8 fd46 	bl	80002c0 <strlen>
 8007834:	2300      	movs	r3, #0
 8007836:	930a      	str	r3, [sp, #40]	@ 0x28
 8007838:	f8d8 3000 	ldr.w	r3, [r8]
 800783c:	9005      	str	r0, [sp, #20]
 800783e:	3307      	adds	r3, #7
 8007840:	f023 0307 	bic.w	r3, r3, #7
 8007844:	f103 0208 	add.w	r2, r3, #8
 8007848:	f894 a018 	ldrb.w	sl, [r4, #24]
 800784c:	f8d4 b000 	ldr.w	fp, [r4]
 8007850:	f8c8 2000 	str.w	r2, [r8]
 8007854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007858:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007862:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800786a:	4b9c      	ldr	r3, [pc, #624]	@ (8007adc <_printf_float+0x2c8>)
 800786c:	f04f 32ff 	mov.w	r2, #4294967295
 8007870:	f7f9 f984 	bl	8000b7c <__aeabi_dcmpun>
 8007874:	bb70      	cbnz	r0, 80078d4 <_printf_float+0xc0>
 8007876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787a:	4b98      	ldr	r3, [pc, #608]	@ (8007adc <_printf_float+0x2c8>)
 800787c:	f04f 32ff 	mov.w	r2, #4294967295
 8007880:	f7f9 f95e 	bl	8000b40 <__aeabi_dcmple>
 8007884:	bb30      	cbnz	r0, 80078d4 <_printf_float+0xc0>
 8007886:	2200      	movs	r2, #0
 8007888:	2300      	movs	r3, #0
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	f7f9 f94d 	bl	8000b2c <__aeabi_dcmplt>
 8007892:	b110      	cbz	r0, 800789a <_printf_float+0x86>
 8007894:	232d      	movs	r3, #45	@ 0x2d
 8007896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800789a:	4a91      	ldr	r2, [pc, #580]	@ (8007ae0 <_printf_float+0x2cc>)
 800789c:	4b91      	ldr	r3, [pc, #580]	@ (8007ae4 <_printf_float+0x2d0>)
 800789e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078a2:	bf94      	ite	ls
 80078a4:	4690      	movls	r8, r2
 80078a6:	4698      	movhi	r8, r3
 80078a8:	2303      	movs	r3, #3
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	f02b 0304 	bic.w	r3, fp, #4
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	9700      	str	r7, [sp, #0]
 80078b8:	4633      	mov	r3, r6
 80078ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f9d2 	bl	8007c68 <_printf_common>
 80078c4:	3001      	adds	r0, #1
 80078c6:	f040 808d 	bne.w	80079e4 <_printf_float+0x1d0>
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	b00d      	add	sp, #52	@ 0x34
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f9 f94e 	bl	8000b7c <__aeabi_dcmpun>
 80078e0:	b140      	cbz	r0, 80078f4 <_printf_float+0xe0>
 80078e2:	464b      	mov	r3, r9
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bfbc      	itt	lt
 80078e8:	232d      	movlt	r3, #45	@ 0x2d
 80078ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078ee:	4a7e      	ldr	r2, [pc, #504]	@ (8007ae8 <_printf_float+0x2d4>)
 80078f0:	4b7e      	ldr	r3, [pc, #504]	@ (8007aec <_printf_float+0x2d8>)
 80078f2:	e7d4      	b.n	800789e <_printf_float+0x8a>
 80078f4:	6863      	ldr	r3, [r4, #4]
 80078f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078fa:	9206      	str	r2, [sp, #24]
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	d13b      	bne.n	8007978 <_printf_float+0x164>
 8007900:	2306      	movs	r3, #6
 8007902:	6063      	str	r3, [r4, #4]
 8007904:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007908:	2300      	movs	r3, #0
 800790a:	6022      	str	r2, [r4, #0]
 800790c:	9303      	str	r3, [sp, #12]
 800790e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007910:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007914:	ab09      	add	r3, sp, #36	@ 0x24
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	6861      	ldr	r1, [r4, #4]
 800791a:	ec49 8b10 	vmov	d0, r8, r9
 800791e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007922:	4628      	mov	r0, r5
 8007924:	f7ff fed6 	bl	80076d4 <__cvt>
 8007928:	9b06      	ldr	r3, [sp, #24]
 800792a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800792c:	2b47      	cmp	r3, #71	@ 0x47
 800792e:	4680      	mov	r8, r0
 8007930:	d129      	bne.n	8007986 <_printf_float+0x172>
 8007932:	1cc8      	adds	r0, r1, #3
 8007934:	db02      	blt.n	800793c <_printf_float+0x128>
 8007936:	6863      	ldr	r3, [r4, #4]
 8007938:	4299      	cmp	r1, r3
 800793a:	dd41      	ble.n	80079c0 <_printf_float+0x1ac>
 800793c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007940:	fa5f fa8a 	uxtb.w	sl, sl
 8007944:	3901      	subs	r1, #1
 8007946:	4652      	mov	r2, sl
 8007948:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800794c:	9109      	str	r1, [sp, #36]	@ 0x24
 800794e:	f7ff ff26 	bl	800779e <__exponent>
 8007952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007954:	1813      	adds	r3, r2, r0
 8007956:	2a01      	cmp	r2, #1
 8007958:	4681      	mov	r9, r0
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	dc02      	bgt.n	8007964 <_printf_float+0x150>
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	07d2      	lsls	r2, r2, #31
 8007962:	d501      	bpl.n	8007968 <_printf_float+0x154>
 8007964:	3301      	adds	r3, #1
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0a2      	beq.n	80078b6 <_printf_float+0xa2>
 8007970:	232d      	movs	r3, #45	@ 0x2d
 8007972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007976:	e79e      	b.n	80078b6 <_printf_float+0xa2>
 8007978:	9a06      	ldr	r2, [sp, #24]
 800797a:	2a47      	cmp	r2, #71	@ 0x47
 800797c:	d1c2      	bne.n	8007904 <_printf_float+0xf0>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1c0      	bne.n	8007904 <_printf_float+0xf0>
 8007982:	2301      	movs	r3, #1
 8007984:	e7bd      	b.n	8007902 <_printf_float+0xee>
 8007986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800798a:	d9db      	bls.n	8007944 <_printf_float+0x130>
 800798c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007990:	d118      	bne.n	80079c4 <_printf_float+0x1b0>
 8007992:	2900      	cmp	r1, #0
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	dd0b      	ble.n	80079b0 <_printf_float+0x19c>
 8007998:	6121      	str	r1, [r4, #16]
 800799a:	b913      	cbnz	r3, 80079a2 <_printf_float+0x18e>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	07d0      	lsls	r0, r2, #31
 80079a0:	d502      	bpl.n	80079a8 <_printf_float+0x194>
 80079a2:	3301      	adds	r3, #1
 80079a4:	440b      	add	r3, r1
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079aa:	f04f 0900 	mov.w	r9, #0
 80079ae:	e7db      	b.n	8007968 <_printf_float+0x154>
 80079b0:	b913      	cbnz	r3, 80079b8 <_printf_float+0x1a4>
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	07d2      	lsls	r2, r2, #31
 80079b6:	d501      	bpl.n	80079bc <_printf_float+0x1a8>
 80079b8:	3302      	adds	r3, #2
 80079ba:	e7f4      	b.n	80079a6 <_printf_float+0x192>
 80079bc:	2301      	movs	r3, #1
 80079be:	e7f2      	b.n	80079a6 <_printf_float+0x192>
 80079c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c6:	4299      	cmp	r1, r3
 80079c8:	db05      	blt.n	80079d6 <_printf_float+0x1c2>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	6121      	str	r1, [r4, #16]
 80079ce:	07d8      	lsls	r0, r3, #31
 80079d0:	d5ea      	bpl.n	80079a8 <_printf_float+0x194>
 80079d2:	1c4b      	adds	r3, r1, #1
 80079d4:	e7e7      	b.n	80079a6 <_printf_float+0x192>
 80079d6:	2900      	cmp	r1, #0
 80079d8:	bfd4      	ite	le
 80079da:	f1c1 0202 	rsble	r2, r1, #2
 80079de:	2201      	movgt	r2, #1
 80079e0:	4413      	add	r3, r2
 80079e2:	e7e0      	b.n	80079a6 <_printf_float+0x192>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	055a      	lsls	r2, r3, #21
 80079e8:	d407      	bmi.n	80079fa <_printf_float+0x1e6>
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	4642      	mov	r2, r8
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	d12b      	bne.n	8007a50 <_printf_float+0x23c>
 80079f8:	e767      	b.n	80078ca <_printf_float+0xb6>
 80079fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079fe:	f240 80dd 	bls.w	8007bbc <_printf_float+0x3a8>
 8007a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f7f9 f885 	bl	8000b18 <__aeabi_dcmpeq>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d033      	beq.n	8007a7a <_printf_float+0x266>
 8007a12:	4a37      	ldr	r2, [pc, #220]	@ (8007af0 <_printf_float+0x2dc>)
 8007a14:	2301      	movs	r3, #1
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f43f af54 	beq.w	80078ca <_printf_float+0xb6>
 8007a22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a26:	4543      	cmp	r3, r8
 8007a28:	db02      	blt.n	8007a30 <_printf_float+0x21c>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	07d8      	lsls	r0, r3, #31
 8007a2e:	d50f      	bpl.n	8007a50 <_printf_float+0x23c>
 8007a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f af45 	beq.w	80078ca <_printf_float+0xb6>
 8007a40:	f04f 0900 	mov.w	r9, #0
 8007a44:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a48:	f104 0a1a 	add.w	sl, r4, #26
 8007a4c:	45c8      	cmp	r8, r9
 8007a4e:	dc09      	bgt.n	8007a64 <_printf_float+0x250>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	079b      	lsls	r3, r3, #30
 8007a54:	f100 8103 	bmi.w	8007c5e <_printf_float+0x44a>
 8007a58:	68e0      	ldr	r0, [r4, #12]
 8007a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a5c:	4298      	cmp	r0, r3
 8007a5e:	bfb8      	it	lt
 8007a60:	4618      	movlt	r0, r3
 8007a62:	e734      	b.n	80078ce <_printf_float+0xba>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4652      	mov	r2, sl
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f af2b 	beq.w	80078ca <_printf_float+0xb6>
 8007a74:	f109 0901 	add.w	r9, r9, #1
 8007a78:	e7e8      	b.n	8007a4c <_printf_float+0x238>
 8007a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc39      	bgt.n	8007af4 <_printf_float+0x2e0>
 8007a80:	4a1b      	ldr	r2, [pc, #108]	@ (8007af0 <_printf_float+0x2dc>)
 8007a82:	2301      	movs	r3, #1
 8007a84:	4631      	mov	r1, r6
 8007a86:	4628      	mov	r0, r5
 8007a88:	47b8      	blx	r7
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	f43f af1d 	beq.w	80078ca <_printf_float+0xb6>
 8007a90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a94:	ea59 0303 	orrs.w	r3, r9, r3
 8007a98:	d102      	bne.n	8007aa0 <_printf_float+0x28c>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	07d9      	lsls	r1, r3, #31
 8007a9e:	d5d7      	bpl.n	8007a50 <_printf_float+0x23c>
 8007aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f43f af0d 	beq.w	80078ca <_printf_float+0xb6>
 8007ab0:	f04f 0a00 	mov.w	sl, #0
 8007ab4:	f104 0b1a 	add.w	fp, r4, #26
 8007ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aba:	425b      	negs	r3, r3
 8007abc:	4553      	cmp	r3, sl
 8007abe:	dc01      	bgt.n	8007ac4 <_printf_float+0x2b0>
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	e793      	b.n	80079ec <_printf_float+0x1d8>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	465a      	mov	r2, fp
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f aefb 	beq.w	80078ca <_printf_float+0xb6>
 8007ad4:	f10a 0a01 	add.w	sl, sl, #1
 8007ad8:	e7ee      	b.n	8007ab8 <_printf_float+0x2a4>
 8007ada:	bf00      	nop
 8007adc:	7fefffff 	.word	0x7fefffff
 8007ae0:	0800aaa0 	.word	0x0800aaa0
 8007ae4:	0800aaa4 	.word	0x0800aaa4
 8007ae8:	0800aaa8 	.word	0x0800aaa8
 8007aec:	0800aaac 	.word	0x0800aaac
 8007af0:	0800aab0 	.word	0x0800aab0
 8007af4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007af6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007afa:	4553      	cmp	r3, sl
 8007afc:	bfa8      	it	ge
 8007afe:	4653      	movge	r3, sl
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	4699      	mov	r9, r3
 8007b04:	dc36      	bgt.n	8007b74 <_printf_float+0x360>
 8007b06:	f04f 0b00 	mov.w	fp, #0
 8007b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b0e:	f104 021a 	add.w	r2, r4, #26
 8007b12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b14:	9306      	str	r3, [sp, #24]
 8007b16:	eba3 0309 	sub.w	r3, r3, r9
 8007b1a:	455b      	cmp	r3, fp
 8007b1c:	dc31      	bgt.n	8007b82 <_printf_float+0x36e>
 8007b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b20:	459a      	cmp	sl, r3
 8007b22:	dc3a      	bgt.n	8007b9a <_printf_float+0x386>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	07da      	lsls	r2, r3, #31
 8007b28:	d437      	bmi.n	8007b9a <_printf_float+0x386>
 8007b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2c:	ebaa 0903 	sub.w	r9, sl, r3
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	ebaa 0303 	sub.w	r3, sl, r3
 8007b36:	4599      	cmp	r9, r3
 8007b38:	bfa8      	it	ge
 8007b3a:	4699      	movge	r9, r3
 8007b3c:	f1b9 0f00 	cmp.w	r9, #0
 8007b40:	dc33      	bgt.n	8007baa <_printf_float+0x396>
 8007b42:	f04f 0800 	mov.w	r8, #0
 8007b46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b4a:	f104 0b1a 	add.w	fp, r4, #26
 8007b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b50:	ebaa 0303 	sub.w	r3, sl, r3
 8007b54:	eba3 0309 	sub.w	r3, r3, r9
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	f77f af79 	ble.w	8007a50 <_printf_float+0x23c>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	465a      	mov	r2, fp
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f aeae 	beq.w	80078ca <_printf_float+0xb6>
 8007b6e:	f108 0801 	add.w	r8, r8, #1
 8007b72:	e7ec      	b.n	8007b4e <_printf_float+0x33a>
 8007b74:	4642      	mov	r2, r8
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1c2      	bne.n	8007b06 <_printf_float+0x2f2>
 8007b80:	e6a3      	b.n	80078ca <_printf_float+0xb6>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	9206      	str	r2, [sp, #24]
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f ae9c 	beq.w	80078ca <_printf_float+0xb6>
 8007b92:	9a06      	ldr	r2, [sp, #24]
 8007b94:	f10b 0b01 	add.w	fp, fp, #1
 8007b98:	e7bb      	b.n	8007b12 <_printf_float+0x2fe>
 8007b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d1c0      	bne.n	8007b2a <_printf_float+0x316>
 8007ba8:	e68f      	b.n	80078ca <_printf_float+0xb6>
 8007baa:	9a06      	ldr	r2, [sp, #24]
 8007bac:	464b      	mov	r3, r9
 8007bae:	4442      	add	r2, r8
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d1c3      	bne.n	8007b42 <_printf_float+0x32e>
 8007bba:	e686      	b.n	80078ca <_printf_float+0xb6>
 8007bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bc0:	f1ba 0f01 	cmp.w	sl, #1
 8007bc4:	dc01      	bgt.n	8007bca <_printf_float+0x3b6>
 8007bc6:	07db      	lsls	r3, r3, #31
 8007bc8:	d536      	bpl.n	8007c38 <_printf_float+0x424>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4642      	mov	r2, r8
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b8      	blx	r7
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f43f ae78 	beq.w	80078ca <_printf_float+0xb6>
 8007bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f ae70 	beq.w	80078ca <_printf_float+0xb6>
 8007bea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bf6:	f7f8 ff8f 	bl	8000b18 <__aeabi_dcmpeq>
 8007bfa:	b9c0      	cbnz	r0, 8007c2e <_printf_float+0x41a>
 8007bfc:	4653      	mov	r3, sl
 8007bfe:	f108 0201 	add.w	r2, r8, #1
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d10c      	bne.n	8007c26 <_printf_float+0x412>
 8007c0c:	e65d      	b.n	80078ca <_printf_float+0xb6>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	465a      	mov	r2, fp
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f43f ae56 	beq.w	80078ca <_printf_float+0xb6>
 8007c1e:	f108 0801 	add.w	r8, r8, #1
 8007c22:	45d0      	cmp	r8, sl
 8007c24:	dbf3      	blt.n	8007c0e <_printf_float+0x3fa>
 8007c26:	464b      	mov	r3, r9
 8007c28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c2c:	e6df      	b.n	80079ee <_printf_float+0x1da>
 8007c2e:	f04f 0800 	mov.w	r8, #0
 8007c32:	f104 0b1a 	add.w	fp, r4, #26
 8007c36:	e7f4      	b.n	8007c22 <_printf_float+0x40e>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	e7e1      	b.n	8007c02 <_printf_float+0x3ee>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	464a      	mov	r2, r9
 8007c42:	4631      	mov	r1, r6
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b8      	blx	r7
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f43f ae3e 	beq.w	80078ca <_printf_float+0xb6>
 8007c4e:	f108 0801 	add.w	r8, r8, #1
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c56:	1a5b      	subs	r3, r3, r1
 8007c58:	4543      	cmp	r3, r8
 8007c5a:	dcf0      	bgt.n	8007c3e <_printf_float+0x42a>
 8007c5c:	e6fc      	b.n	8007a58 <_printf_float+0x244>
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	f104 0919 	add.w	r9, r4, #25
 8007c66:	e7f4      	b.n	8007c52 <_printf_float+0x43e>

08007c68 <_printf_common>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	4698      	mov	r8, r3
 8007c70:	688a      	ldr	r2, [r1, #8]
 8007c72:	690b      	ldr	r3, [r1, #16]
 8007c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bfb8      	it	lt
 8007c7c:	4613      	movlt	r3, r2
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c84:	4607      	mov	r7, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	b10a      	cbz	r2, 8007c8e <_printf_common+0x26>
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	0699      	lsls	r1, r3, #26
 8007c92:	bf42      	ittt	mi
 8007c94:	6833      	ldrmi	r3, [r6, #0]
 8007c96:	3302      	addmi	r3, #2
 8007c98:	6033      	strmi	r3, [r6, #0]
 8007c9a:	6825      	ldr	r5, [r4, #0]
 8007c9c:	f015 0506 	ands.w	r5, r5, #6
 8007ca0:	d106      	bne.n	8007cb0 <_printf_common+0x48>
 8007ca2:	f104 0a19 	add.w	sl, r4, #25
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	6832      	ldr	r2, [r6, #0]
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	dc26      	bgt.n	8007cfe <_printf_common+0x96>
 8007cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	3b00      	subs	r3, #0
 8007cb8:	bf18      	it	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	0692      	lsls	r2, r2, #26
 8007cbe:	d42b      	bmi.n	8007d18 <_printf_common+0xb0>
 8007cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	47c8      	blx	r9
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d01e      	beq.n	8007d0c <_printf_common+0xa4>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	6922      	ldr	r2, [r4, #16]
 8007cd2:	f003 0306 	and.w	r3, r3, #6
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	bf02      	ittt	eq
 8007cda:	68e5      	ldreq	r5, [r4, #12]
 8007cdc:	6833      	ldreq	r3, [r6, #0]
 8007cde:	1aed      	subeq	r5, r5, r3
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	bf0c      	ite	eq
 8007ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce8:	2500      	movne	r5, #0
 8007cea:	4293      	cmp	r3, r2
 8007cec:	bfc4      	itt	gt
 8007cee:	1a9b      	subgt	r3, r3, r2
 8007cf0:	18ed      	addgt	r5, r5, r3
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	341a      	adds	r4, #26
 8007cf6:	42b5      	cmp	r5, r6
 8007cf8:	d11a      	bne.n	8007d30 <_printf_common+0xc8>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e008      	b.n	8007d10 <_printf_common+0xa8>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4641      	mov	r1, r8
 8007d04:	4638      	mov	r0, r7
 8007d06:	47c8      	blx	r9
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d103      	bne.n	8007d14 <_printf_common+0xac>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	3501      	adds	r5, #1
 8007d16:	e7c6      	b.n	8007ca6 <_printf_common+0x3e>
 8007d18:	18e1      	adds	r1, r4, r3
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	2030      	movs	r0, #48	@ 0x30
 8007d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d22:	4422      	add	r2, r4
 8007d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d2c:	3302      	adds	r3, #2
 8007d2e:	e7c7      	b.n	8007cc0 <_printf_common+0x58>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4622      	mov	r2, r4
 8007d34:	4641      	mov	r1, r8
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c8      	blx	r9
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d0e6      	beq.n	8007d0c <_printf_common+0xa4>
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7d9      	b.n	8007cf6 <_printf_common+0x8e>
	...

08007d44 <_printf_i>:
 8007d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	7e0f      	ldrb	r7, [r1, #24]
 8007d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d4c:	2f78      	cmp	r7, #120	@ 0x78
 8007d4e:	4691      	mov	r9, r2
 8007d50:	4680      	mov	r8, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	469a      	mov	sl, r3
 8007d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d5a:	d807      	bhi.n	8007d6c <_printf_i+0x28>
 8007d5c:	2f62      	cmp	r7, #98	@ 0x62
 8007d5e:	d80a      	bhi.n	8007d76 <_printf_i+0x32>
 8007d60:	2f00      	cmp	r7, #0
 8007d62:	f000 80d2 	beq.w	8007f0a <_printf_i+0x1c6>
 8007d66:	2f58      	cmp	r7, #88	@ 0x58
 8007d68:	f000 80b9 	beq.w	8007ede <_printf_i+0x19a>
 8007d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d74:	e03a      	b.n	8007dec <_printf_i+0xa8>
 8007d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d7a:	2b15      	cmp	r3, #21
 8007d7c:	d8f6      	bhi.n	8007d6c <_printf_i+0x28>
 8007d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d84 <_printf_i+0x40>)
 8007d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d84:	08007ddd 	.word	0x08007ddd
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007d6d 	.word	0x08007d6d
 8007d90:	08007d6d 	.word	0x08007d6d
 8007d94:	08007d6d 	.word	0x08007d6d
 8007d98:	08007d6d 	.word	0x08007d6d
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007d6d 	.word	0x08007d6d
 8007da4:	08007d6d 	.word	0x08007d6d
 8007da8:	08007d6d 	.word	0x08007d6d
 8007dac:	08007d6d 	.word	0x08007d6d
 8007db0:	08007ef1 	.word	0x08007ef1
 8007db4:	08007e1b 	.word	0x08007e1b
 8007db8:	08007eab 	.word	0x08007eab
 8007dbc:	08007d6d 	.word	0x08007d6d
 8007dc0:	08007d6d 	.word	0x08007d6d
 8007dc4:	08007f13 	.word	0x08007f13
 8007dc8:	08007d6d 	.word	0x08007d6d
 8007dcc:	08007e1b 	.word	0x08007e1b
 8007dd0:	08007d6d 	.word	0x08007d6d
 8007dd4:	08007d6d 	.word	0x08007d6d
 8007dd8:	08007eb3 	.word	0x08007eb3
 8007ddc:	6833      	ldr	r3, [r6, #0]
 8007dde:	1d1a      	adds	r2, r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6032      	str	r2, [r6, #0]
 8007de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dec:	2301      	movs	r3, #1
 8007dee:	e09d      	b.n	8007f2c <_printf_i+0x1e8>
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	6820      	ldr	r0, [r4, #0]
 8007df4:	1d19      	adds	r1, r3, #4
 8007df6:	6031      	str	r1, [r6, #0]
 8007df8:	0606      	lsls	r6, r0, #24
 8007dfa:	d501      	bpl.n	8007e00 <_printf_i+0xbc>
 8007dfc:	681d      	ldr	r5, [r3, #0]
 8007dfe:	e003      	b.n	8007e08 <_printf_i+0xc4>
 8007e00:	0645      	lsls	r5, r0, #25
 8007e02:	d5fb      	bpl.n	8007dfc <_printf_i+0xb8>
 8007e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	da03      	bge.n	8007e14 <_printf_i+0xd0>
 8007e0c:	232d      	movs	r3, #45	@ 0x2d
 8007e0e:	426d      	negs	r5, r5
 8007e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e14:	4859      	ldr	r0, [pc, #356]	@ (8007f7c <_printf_i+0x238>)
 8007e16:	230a      	movs	r3, #10
 8007e18:	e011      	b.n	8007e3e <_printf_i+0xfa>
 8007e1a:	6821      	ldr	r1, [r4, #0]
 8007e1c:	6833      	ldr	r3, [r6, #0]
 8007e1e:	0608      	lsls	r0, r1, #24
 8007e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e24:	d402      	bmi.n	8007e2c <_printf_i+0xe8>
 8007e26:	0649      	lsls	r1, r1, #25
 8007e28:	bf48      	it	mi
 8007e2a:	b2ad      	uxthmi	r5, r5
 8007e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e2e:	4853      	ldr	r0, [pc, #332]	@ (8007f7c <_printf_i+0x238>)
 8007e30:	6033      	str	r3, [r6, #0]
 8007e32:	bf14      	ite	ne
 8007e34:	230a      	movne	r3, #10
 8007e36:	2308      	moveq	r3, #8
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e3e:	6866      	ldr	r6, [r4, #4]
 8007e40:	60a6      	str	r6, [r4, #8]
 8007e42:	2e00      	cmp	r6, #0
 8007e44:	bfa2      	ittt	ge
 8007e46:	6821      	ldrge	r1, [r4, #0]
 8007e48:	f021 0104 	bicge.w	r1, r1, #4
 8007e4c:	6021      	strge	r1, [r4, #0]
 8007e4e:	b90d      	cbnz	r5, 8007e54 <_printf_i+0x110>
 8007e50:	2e00      	cmp	r6, #0
 8007e52:	d04b      	beq.n	8007eec <_printf_i+0x1a8>
 8007e54:	4616      	mov	r6, r2
 8007e56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e5e:	5dc7      	ldrb	r7, [r0, r7]
 8007e60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e64:	462f      	mov	r7, r5
 8007e66:	42bb      	cmp	r3, r7
 8007e68:	460d      	mov	r5, r1
 8007e6a:	d9f4      	bls.n	8007e56 <_printf_i+0x112>
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d10b      	bne.n	8007e88 <_printf_i+0x144>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	07df      	lsls	r7, r3, #31
 8007e74:	d508      	bpl.n	8007e88 <_printf_i+0x144>
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	6861      	ldr	r1, [r4, #4]
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	bfde      	ittt	le
 8007e7e:	2330      	movle	r3, #48	@ 0x30
 8007e80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e88:	1b92      	subs	r2, r2, r6
 8007e8a:	6122      	str	r2, [r4, #16]
 8007e8c:	f8cd a000 	str.w	sl, [sp]
 8007e90:	464b      	mov	r3, r9
 8007e92:	aa03      	add	r2, sp, #12
 8007e94:	4621      	mov	r1, r4
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7ff fee6 	bl	8007c68 <_printf_common>
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d14a      	bne.n	8007f36 <_printf_i+0x1f2>
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	b004      	add	sp, #16
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	f043 0320 	orr.w	r3, r3, #32
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	4833      	ldr	r0, [pc, #204]	@ (8007f80 <_printf_i+0x23c>)
 8007eb4:	2778      	movs	r7, #120	@ 0x78
 8007eb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	6831      	ldr	r1, [r6, #0]
 8007ebe:	061f      	lsls	r7, r3, #24
 8007ec0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ec4:	d402      	bmi.n	8007ecc <_printf_i+0x188>
 8007ec6:	065f      	lsls	r7, r3, #25
 8007ec8:	bf48      	it	mi
 8007eca:	b2ad      	uxthmi	r5, r5
 8007ecc:	6031      	str	r1, [r6, #0]
 8007ece:	07d9      	lsls	r1, r3, #31
 8007ed0:	bf44      	itt	mi
 8007ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ed6:	6023      	strmi	r3, [r4, #0]
 8007ed8:	b11d      	cbz	r5, 8007ee2 <_printf_i+0x19e>
 8007eda:	2310      	movs	r3, #16
 8007edc:	e7ac      	b.n	8007e38 <_printf_i+0xf4>
 8007ede:	4827      	ldr	r0, [pc, #156]	@ (8007f7c <_printf_i+0x238>)
 8007ee0:	e7e9      	b.n	8007eb6 <_printf_i+0x172>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	f023 0320 	bic.w	r3, r3, #32
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	e7f6      	b.n	8007eda <_printf_i+0x196>
 8007eec:	4616      	mov	r6, r2
 8007eee:	e7bd      	b.n	8007e6c <_printf_i+0x128>
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	6825      	ldr	r5, [r4, #0]
 8007ef4:	6961      	ldr	r1, [r4, #20]
 8007ef6:	1d18      	adds	r0, r3, #4
 8007ef8:	6030      	str	r0, [r6, #0]
 8007efa:	062e      	lsls	r6, r5, #24
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	d501      	bpl.n	8007f04 <_printf_i+0x1c0>
 8007f00:	6019      	str	r1, [r3, #0]
 8007f02:	e002      	b.n	8007f0a <_printf_i+0x1c6>
 8007f04:	0668      	lsls	r0, r5, #25
 8007f06:	d5fb      	bpl.n	8007f00 <_printf_i+0x1bc>
 8007f08:	8019      	strh	r1, [r3, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	4616      	mov	r6, r2
 8007f10:	e7bc      	b.n	8007e8c <_printf_i+0x148>
 8007f12:	6833      	ldr	r3, [r6, #0]
 8007f14:	1d1a      	adds	r2, r3, #4
 8007f16:	6032      	str	r2, [r6, #0]
 8007f18:	681e      	ldr	r6, [r3, #0]
 8007f1a:	6862      	ldr	r2, [r4, #4]
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7f8 f97e 	bl	8000220 <memchr>
 8007f24:	b108      	cbz	r0, 8007f2a <_printf_i+0x1e6>
 8007f26:	1b80      	subs	r0, r0, r6
 8007f28:	6060      	str	r0, [r4, #4]
 8007f2a:	6863      	ldr	r3, [r4, #4]
 8007f2c:	6123      	str	r3, [r4, #16]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f34:	e7aa      	b.n	8007e8c <_printf_i+0x148>
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	4632      	mov	r2, r6
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	47d0      	blx	sl
 8007f40:	3001      	adds	r0, #1
 8007f42:	d0ad      	beq.n	8007ea0 <_printf_i+0x15c>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	079b      	lsls	r3, r3, #30
 8007f48:	d413      	bmi.n	8007f72 <_printf_i+0x22e>
 8007f4a:	68e0      	ldr	r0, [r4, #12]
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	4298      	cmp	r0, r3
 8007f50:	bfb8      	it	lt
 8007f52:	4618      	movlt	r0, r3
 8007f54:	e7a6      	b.n	8007ea4 <_printf_i+0x160>
 8007f56:	2301      	movs	r3, #1
 8007f58:	4632      	mov	r2, r6
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	47d0      	blx	sl
 8007f60:	3001      	adds	r0, #1
 8007f62:	d09d      	beq.n	8007ea0 <_printf_i+0x15c>
 8007f64:	3501      	adds	r5, #1
 8007f66:	68e3      	ldr	r3, [r4, #12]
 8007f68:	9903      	ldr	r1, [sp, #12]
 8007f6a:	1a5b      	subs	r3, r3, r1
 8007f6c:	42ab      	cmp	r3, r5
 8007f6e:	dcf2      	bgt.n	8007f56 <_printf_i+0x212>
 8007f70:	e7eb      	b.n	8007f4a <_printf_i+0x206>
 8007f72:	2500      	movs	r5, #0
 8007f74:	f104 0619 	add.w	r6, r4, #25
 8007f78:	e7f5      	b.n	8007f66 <_printf_i+0x222>
 8007f7a:	bf00      	nop
 8007f7c:	0800aab2 	.word	0x0800aab2
 8007f80:	0800aac3 	.word	0x0800aac3

08007f84 <std>:
 8007f84:	2300      	movs	r3, #0
 8007f86:	b510      	push	{r4, lr}
 8007f88:	4604      	mov	r4, r0
 8007f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f92:	6083      	str	r3, [r0, #8]
 8007f94:	8181      	strh	r1, [r0, #12]
 8007f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f98:	81c2      	strh	r2, [r0, #14]
 8007f9a:	6183      	str	r3, [r0, #24]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	305c      	adds	r0, #92	@ 0x5c
 8007fa2:	f000 fa07 	bl	80083b4 <memset>
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <std+0x58>)
 8007fa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007faa:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe0 <std+0x5c>)
 8007fac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fae:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe4 <std+0x60>)
 8007fb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <std+0x64>)
 8007fb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <std+0x68>)
 8007fb8:	6224      	str	r4, [r4, #32]
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d006      	beq.n	8007fcc <std+0x48>
 8007fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fc2:	4294      	cmp	r4, r2
 8007fc4:	d002      	beq.n	8007fcc <std+0x48>
 8007fc6:	33d0      	adds	r3, #208	@ 0xd0
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d105      	bne.n	8007fd8 <std+0x54>
 8007fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd4:	f000 ba6a 	b.w	80084ac <__retarget_lock_init_recursive>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	bf00      	nop
 8007fdc:	08008205 	.word	0x08008205
 8007fe0:	08008227 	.word	0x08008227
 8007fe4:	0800825f 	.word	0x0800825f
 8007fe8:	08008283 	.word	0x08008283
 8007fec:	2000046c 	.word	0x2000046c

08007ff0 <stdio_exit_handler>:
 8007ff0:	4a02      	ldr	r2, [pc, #8]	@ (8007ffc <stdio_exit_handler+0xc>)
 8007ff2:	4903      	ldr	r1, [pc, #12]	@ (8008000 <stdio_exit_handler+0x10>)
 8007ff4:	4803      	ldr	r0, [pc, #12]	@ (8008004 <stdio_exit_handler+0x14>)
 8007ff6:	f000 b869 	b.w	80080cc <_fwalk_sglue>
 8007ffa:	bf00      	nop
 8007ffc:	2000000c 	.word	0x2000000c
 8008000:	0800a091 	.word	0x0800a091
 8008004:	2000001c 	.word	0x2000001c

08008008 <cleanup_stdio>:
 8008008:	6841      	ldr	r1, [r0, #4]
 800800a:	4b0c      	ldr	r3, [pc, #48]	@ (800803c <cleanup_stdio+0x34>)
 800800c:	4299      	cmp	r1, r3
 800800e:	b510      	push	{r4, lr}
 8008010:	4604      	mov	r4, r0
 8008012:	d001      	beq.n	8008018 <cleanup_stdio+0x10>
 8008014:	f002 f83c 	bl	800a090 <_fflush_r>
 8008018:	68a1      	ldr	r1, [r4, #8]
 800801a:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <cleanup_stdio+0x38>)
 800801c:	4299      	cmp	r1, r3
 800801e:	d002      	beq.n	8008026 <cleanup_stdio+0x1e>
 8008020:	4620      	mov	r0, r4
 8008022:	f002 f835 	bl	800a090 <_fflush_r>
 8008026:	68e1      	ldr	r1, [r4, #12]
 8008028:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <cleanup_stdio+0x3c>)
 800802a:	4299      	cmp	r1, r3
 800802c:	d004      	beq.n	8008038 <cleanup_stdio+0x30>
 800802e:	4620      	mov	r0, r4
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	f002 b82c 	b.w	800a090 <_fflush_r>
 8008038:	bd10      	pop	{r4, pc}
 800803a:	bf00      	nop
 800803c:	2000046c 	.word	0x2000046c
 8008040:	200004d4 	.word	0x200004d4
 8008044:	2000053c 	.word	0x2000053c

08008048 <global_stdio_init.part.0>:
 8008048:	b510      	push	{r4, lr}
 800804a:	4b0b      	ldr	r3, [pc, #44]	@ (8008078 <global_stdio_init.part.0+0x30>)
 800804c:	4c0b      	ldr	r4, [pc, #44]	@ (800807c <global_stdio_init.part.0+0x34>)
 800804e:	4a0c      	ldr	r2, [pc, #48]	@ (8008080 <global_stdio_init.part.0+0x38>)
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	4620      	mov	r0, r4
 8008054:	2200      	movs	r2, #0
 8008056:	2104      	movs	r1, #4
 8008058:	f7ff ff94 	bl	8007f84 <std>
 800805c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008060:	2201      	movs	r2, #1
 8008062:	2109      	movs	r1, #9
 8008064:	f7ff ff8e 	bl	8007f84 <std>
 8008068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800806c:	2202      	movs	r2, #2
 800806e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008072:	2112      	movs	r1, #18
 8008074:	f7ff bf86 	b.w	8007f84 <std>
 8008078:	200005a4 	.word	0x200005a4
 800807c:	2000046c 	.word	0x2000046c
 8008080:	08007ff1 	.word	0x08007ff1

08008084 <__sfp_lock_acquire>:
 8008084:	4801      	ldr	r0, [pc, #4]	@ (800808c <__sfp_lock_acquire+0x8>)
 8008086:	f000 ba12 	b.w	80084ae <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	200005ad 	.word	0x200005ad

08008090 <__sfp_lock_release>:
 8008090:	4801      	ldr	r0, [pc, #4]	@ (8008098 <__sfp_lock_release+0x8>)
 8008092:	f000 ba0d 	b.w	80084b0 <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	200005ad 	.word	0x200005ad

0800809c <__sinit>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4604      	mov	r4, r0
 80080a0:	f7ff fff0 	bl	8008084 <__sfp_lock_acquire>
 80080a4:	6a23      	ldr	r3, [r4, #32]
 80080a6:	b11b      	cbz	r3, 80080b0 <__sinit+0x14>
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ac:	f7ff bff0 	b.w	8008090 <__sfp_lock_release>
 80080b0:	4b04      	ldr	r3, [pc, #16]	@ (80080c4 <__sinit+0x28>)
 80080b2:	6223      	str	r3, [r4, #32]
 80080b4:	4b04      	ldr	r3, [pc, #16]	@ (80080c8 <__sinit+0x2c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f5      	bne.n	80080a8 <__sinit+0xc>
 80080bc:	f7ff ffc4 	bl	8008048 <global_stdio_init.part.0>
 80080c0:	e7f2      	b.n	80080a8 <__sinit+0xc>
 80080c2:	bf00      	nop
 80080c4:	08008009 	.word	0x08008009
 80080c8:	200005a4 	.word	0x200005a4

080080cc <_fwalk_sglue>:
 80080cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d0:	4607      	mov	r7, r0
 80080d2:	4688      	mov	r8, r1
 80080d4:	4614      	mov	r4, r2
 80080d6:	2600      	movs	r6, #0
 80080d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080dc:	f1b9 0901 	subs.w	r9, r9, #1
 80080e0:	d505      	bpl.n	80080ee <_fwalk_sglue+0x22>
 80080e2:	6824      	ldr	r4, [r4, #0]
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	d1f7      	bne.n	80080d8 <_fwalk_sglue+0xc>
 80080e8:	4630      	mov	r0, r6
 80080ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d907      	bls.n	8008104 <_fwalk_sglue+0x38>
 80080f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080f8:	3301      	adds	r3, #1
 80080fa:	d003      	beq.n	8008104 <_fwalk_sglue+0x38>
 80080fc:	4629      	mov	r1, r5
 80080fe:	4638      	mov	r0, r7
 8008100:	47c0      	blx	r8
 8008102:	4306      	orrs	r6, r0
 8008104:	3568      	adds	r5, #104	@ 0x68
 8008106:	e7e9      	b.n	80080dc <_fwalk_sglue+0x10>

08008108 <_puts_r>:
 8008108:	6a03      	ldr	r3, [r0, #32]
 800810a:	b570      	push	{r4, r5, r6, lr}
 800810c:	6884      	ldr	r4, [r0, #8]
 800810e:	4605      	mov	r5, r0
 8008110:	460e      	mov	r6, r1
 8008112:	b90b      	cbnz	r3, 8008118 <_puts_r+0x10>
 8008114:	f7ff ffc2 	bl	800809c <__sinit>
 8008118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800811a:	07db      	lsls	r3, r3, #31
 800811c:	d405      	bmi.n	800812a <_puts_r+0x22>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	0598      	lsls	r0, r3, #22
 8008122:	d402      	bmi.n	800812a <_puts_r+0x22>
 8008124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008126:	f000 f9c2 	bl	80084ae <__retarget_lock_acquire_recursive>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	0719      	lsls	r1, r3, #28
 800812e:	d502      	bpl.n	8008136 <_puts_r+0x2e>
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d135      	bne.n	80081a2 <_puts_r+0x9a>
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f000 f8e5 	bl	8008308 <__swsetup_r>
 800813e:	b380      	cbz	r0, 80081a2 <_puts_r+0x9a>
 8008140:	f04f 35ff 	mov.w	r5, #4294967295
 8008144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008146:	07da      	lsls	r2, r3, #31
 8008148:	d405      	bmi.n	8008156 <_puts_r+0x4e>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	d402      	bmi.n	8008156 <_puts_r+0x4e>
 8008150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008152:	f000 f9ad 	bl	80084b0 <__retarget_lock_release_recursive>
 8008156:	4628      	mov	r0, r5
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	2b00      	cmp	r3, #0
 800815c:	da04      	bge.n	8008168 <_puts_r+0x60>
 800815e:	69a2      	ldr	r2, [r4, #24]
 8008160:	429a      	cmp	r2, r3
 8008162:	dc17      	bgt.n	8008194 <_puts_r+0x8c>
 8008164:	290a      	cmp	r1, #10
 8008166:	d015      	beq.n	8008194 <_puts_r+0x8c>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	7019      	strb	r1, [r3, #0]
 8008170:	68a3      	ldr	r3, [r4, #8]
 8008172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008176:	3b01      	subs	r3, #1
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	2900      	cmp	r1, #0
 800817c:	d1ed      	bne.n	800815a <_puts_r+0x52>
 800817e:	2b00      	cmp	r3, #0
 8008180:	da11      	bge.n	80081a6 <_puts_r+0x9e>
 8008182:	4622      	mov	r2, r4
 8008184:	210a      	movs	r1, #10
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f87f 	bl	800828a <__swbuf_r>
 800818c:	3001      	adds	r0, #1
 800818e:	d0d7      	beq.n	8008140 <_puts_r+0x38>
 8008190:	250a      	movs	r5, #10
 8008192:	e7d7      	b.n	8008144 <_puts_r+0x3c>
 8008194:	4622      	mov	r2, r4
 8008196:	4628      	mov	r0, r5
 8008198:	f000 f877 	bl	800828a <__swbuf_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d1e7      	bne.n	8008170 <_puts_r+0x68>
 80081a0:	e7ce      	b.n	8008140 <_puts_r+0x38>
 80081a2:	3e01      	subs	r6, #1
 80081a4:	e7e4      	b.n	8008170 <_puts_r+0x68>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	6022      	str	r2, [r4, #0]
 80081ac:	220a      	movs	r2, #10
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	e7ee      	b.n	8008190 <_puts_r+0x88>
	...

080081b4 <puts>:
 80081b4:	4b02      	ldr	r3, [pc, #8]	@ (80081c0 <puts+0xc>)
 80081b6:	4601      	mov	r1, r0
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	f7ff bfa5 	b.w	8008108 <_puts_r>
 80081be:	bf00      	nop
 80081c0:	20000018 	.word	0x20000018

080081c4 <siprintf>:
 80081c4:	b40e      	push	{r1, r2, r3}
 80081c6:	b500      	push	{lr}
 80081c8:	b09c      	sub	sp, #112	@ 0x70
 80081ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80081cc:	9002      	str	r0, [sp, #8]
 80081ce:	9006      	str	r0, [sp, #24]
 80081d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081d4:	4809      	ldr	r0, [pc, #36]	@ (80081fc <siprintf+0x38>)
 80081d6:	9107      	str	r1, [sp, #28]
 80081d8:	9104      	str	r1, [sp, #16]
 80081da:	4909      	ldr	r1, [pc, #36]	@ (8008200 <siprintf+0x3c>)
 80081dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e0:	9105      	str	r1, [sp, #20]
 80081e2:	6800      	ldr	r0, [r0, #0]
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	a902      	add	r1, sp, #8
 80081e8:	f001 fc90 	bl	8009b0c <_svfiprintf_r>
 80081ec:	9b02      	ldr	r3, [sp, #8]
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	b01c      	add	sp, #112	@ 0x70
 80081f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081f8:	b003      	add	sp, #12
 80081fa:	4770      	bx	lr
 80081fc:	20000018 	.word	0x20000018
 8008200:	ffff0208 	.word	0xffff0208

08008204 <__sread>:
 8008204:	b510      	push	{r4, lr}
 8008206:	460c      	mov	r4, r1
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	f000 f900 	bl	8008410 <_read_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	bfab      	itete	ge
 8008214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008216:	89a3      	ldrhlt	r3, [r4, #12]
 8008218:	181b      	addge	r3, r3, r0
 800821a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800821e:	bfac      	ite	ge
 8008220:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008222:	81a3      	strhlt	r3, [r4, #12]
 8008224:	bd10      	pop	{r4, pc}

08008226 <__swrite>:
 8008226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822a:	461f      	mov	r7, r3
 800822c:	898b      	ldrh	r3, [r1, #12]
 800822e:	05db      	lsls	r3, r3, #23
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4616      	mov	r6, r2
 8008236:	d505      	bpl.n	8008244 <__swrite+0x1e>
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	2302      	movs	r3, #2
 800823e:	2200      	movs	r2, #0
 8008240:	f000 f8d4 	bl	80083ec <_lseek_r>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	4632      	mov	r2, r6
 8008252:	463b      	mov	r3, r7
 8008254:	4628      	mov	r0, r5
 8008256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	f000 b8eb 	b.w	8008434 <_write_r>

0800825e <__sseek>:
 800825e:	b510      	push	{r4, lr}
 8008260:	460c      	mov	r4, r1
 8008262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008266:	f000 f8c1 	bl	80083ec <_lseek_r>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	bf15      	itete	ne
 8008270:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800827a:	81a3      	strheq	r3, [r4, #12]
 800827c:	bf18      	it	ne
 800827e:	81a3      	strhne	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__sclose>:
 8008282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008286:	f000 b8a1 	b.w	80083cc <_close_r>

0800828a <__swbuf_r>:
 800828a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828c:	460e      	mov	r6, r1
 800828e:	4614      	mov	r4, r2
 8008290:	4605      	mov	r5, r0
 8008292:	b118      	cbz	r0, 800829c <__swbuf_r+0x12>
 8008294:	6a03      	ldr	r3, [r0, #32]
 8008296:	b90b      	cbnz	r3, 800829c <__swbuf_r+0x12>
 8008298:	f7ff ff00 	bl	800809c <__sinit>
 800829c:	69a3      	ldr	r3, [r4, #24]
 800829e:	60a3      	str	r3, [r4, #8]
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	071a      	lsls	r2, r3, #28
 80082a4:	d501      	bpl.n	80082aa <__swbuf_r+0x20>
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	b943      	cbnz	r3, 80082bc <__swbuf_r+0x32>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 f82b 	bl	8008308 <__swsetup_r>
 80082b2:	b118      	cbz	r0, 80082bc <__swbuf_r+0x32>
 80082b4:	f04f 37ff 	mov.w	r7, #4294967295
 80082b8:	4638      	mov	r0, r7
 80082ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	6922      	ldr	r2, [r4, #16]
 80082c0:	1a98      	subs	r0, r3, r2
 80082c2:	6963      	ldr	r3, [r4, #20]
 80082c4:	b2f6      	uxtb	r6, r6
 80082c6:	4283      	cmp	r3, r0
 80082c8:	4637      	mov	r7, r6
 80082ca:	dc05      	bgt.n	80082d8 <__swbuf_r+0x4e>
 80082cc:	4621      	mov	r1, r4
 80082ce:	4628      	mov	r0, r5
 80082d0:	f001 fede 	bl	800a090 <_fflush_r>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d1ed      	bne.n	80082b4 <__swbuf_r+0x2a>
 80082d8:	68a3      	ldr	r3, [r4, #8]
 80082da:	3b01      	subs	r3, #1
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	701e      	strb	r6, [r3, #0]
 80082e6:	6962      	ldr	r2, [r4, #20]
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d004      	beq.n	80082f8 <__swbuf_r+0x6e>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	07db      	lsls	r3, r3, #31
 80082f2:	d5e1      	bpl.n	80082b8 <__swbuf_r+0x2e>
 80082f4:	2e0a      	cmp	r6, #10
 80082f6:	d1df      	bne.n	80082b8 <__swbuf_r+0x2e>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f001 fec8 	bl	800a090 <_fflush_r>
 8008300:	2800      	cmp	r0, #0
 8008302:	d0d9      	beq.n	80082b8 <__swbuf_r+0x2e>
 8008304:	e7d6      	b.n	80082b4 <__swbuf_r+0x2a>
	...

08008308 <__swsetup_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4b29      	ldr	r3, [pc, #164]	@ (80083b0 <__swsetup_r+0xa8>)
 800830c:	4605      	mov	r5, r0
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	460c      	mov	r4, r1
 8008312:	b118      	cbz	r0, 800831c <__swsetup_r+0x14>
 8008314:	6a03      	ldr	r3, [r0, #32]
 8008316:	b90b      	cbnz	r3, 800831c <__swsetup_r+0x14>
 8008318:	f7ff fec0 	bl	800809c <__sinit>
 800831c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	d422      	bmi.n	800836a <__swsetup_r+0x62>
 8008324:	06da      	lsls	r2, r3, #27
 8008326:	d407      	bmi.n	8008338 <__swsetup_r+0x30>
 8008328:	2209      	movs	r2, #9
 800832a:	602a      	str	r2, [r5, #0]
 800832c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e033      	b.n	80083a0 <__swsetup_r+0x98>
 8008338:	0758      	lsls	r0, r3, #29
 800833a:	d512      	bpl.n	8008362 <__swsetup_r+0x5a>
 800833c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800833e:	b141      	cbz	r1, 8008352 <__swsetup_r+0x4a>
 8008340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008344:	4299      	cmp	r1, r3
 8008346:	d002      	beq.n	800834e <__swsetup_r+0x46>
 8008348:	4628      	mov	r0, r5
 800834a:	f000 ff01 	bl	8009150 <_free_r>
 800834e:	2300      	movs	r3, #0
 8008350:	6363      	str	r3, [r4, #52]	@ 0x34
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	b94b      	cbnz	r3, 8008382 <__swsetup_r+0x7a>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008378:	d003      	beq.n	8008382 <__swsetup_r+0x7a>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f001 fed5 	bl	800a12c <__smakebuf_r>
 8008382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008386:	f013 0201 	ands.w	r2, r3, #1
 800838a:	d00a      	beq.n	80083a2 <__swsetup_r+0x9a>
 800838c:	2200      	movs	r2, #0
 800838e:	60a2      	str	r2, [r4, #8]
 8008390:	6962      	ldr	r2, [r4, #20]
 8008392:	4252      	negs	r2, r2
 8008394:	61a2      	str	r2, [r4, #24]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	b942      	cbnz	r2, 80083ac <__swsetup_r+0xa4>
 800839a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800839e:	d1c5      	bne.n	800832c <__swsetup_r+0x24>
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	0799      	lsls	r1, r3, #30
 80083a4:	bf58      	it	pl
 80083a6:	6962      	ldrpl	r2, [r4, #20]
 80083a8:	60a2      	str	r2, [r4, #8]
 80083aa:	e7f4      	b.n	8008396 <__swsetup_r+0x8e>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7f7      	b.n	80083a0 <__swsetup_r+0x98>
 80083b0:	20000018 	.word	0x20000018

080083b4 <memset>:
 80083b4:	4402      	add	r2, r0
 80083b6:	4603      	mov	r3, r0
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d100      	bne.n	80083be <memset+0xa>
 80083bc:	4770      	bx	lr
 80083be:	f803 1b01 	strb.w	r1, [r3], #1
 80083c2:	e7f9      	b.n	80083b8 <memset+0x4>

080083c4 <_localeconv_r>:
 80083c4:	4800      	ldr	r0, [pc, #0]	@ (80083c8 <_localeconv_r+0x4>)
 80083c6:	4770      	bx	lr
 80083c8:	20000158 	.word	0x20000158

080083cc <_close_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_close_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f9 fb0c 	bl	80019f4 <_close>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_close_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_close_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200005a8 	.word	0x200005a8

080083ec <_lseek_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	@ (800840c <_lseek_r+0x20>)
 80083f0:	4604      	mov	r4, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7f9 fb21 	bl	8001a42 <_lseek>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_lseek_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_lseek_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	200005a8 	.word	0x200005a8

08008410 <_read_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	@ (8008430 <_read_r+0x20>)
 8008414:	4604      	mov	r4, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7f9 faaf 	bl	8001982 <_read>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_read_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_read_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200005a8 	.word	0x200005a8

08008434 <_write_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	@ (8008454 <_write_r+0x20>)
 8008438:	4604      	mov	r4, r0
 800843a:	4608      	mov	r0, r1
 800843c:	4611      	mov	r1, r2
 800843e:	2200      	movs	r2, #0
 8008440:	602a      	str	r2, [r5, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	f7f9 faba 	bl	80019bc <_write>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_write_r+0x1e>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_write_r+0x1e>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	200005a8 	.word	0x200005a8

08008458 <__errno>:
 8008458:	4b01      	ldr	r3, [pc, #4]	@ (8008460 <__errno+0x8>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000018 	.word	0x20000018

08008464 <__libc_init_array>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	4d0d      	ldr	r5, [pc, #52]	@ (800849c <__libc_init_array+0x38>)
 8008468:	4c0d      	ldr	r4, [pc, #52]	@ (80084a0 <__libc_init_array+0x3c>)
 800846a:	1b64      	subs	r4, r4, r5
 800846c:	10a4      	asrs	r4, r4, #2
 800846e:	2600      	movs	r6, #0
 8008470:	42a6      	cmp	r6, r4
 8008472:	d109      	bne.n	8008488 <__libc_init_array+0x24>
 8008474:	4d0b      	ldr	r5, [pc, #44]	@ (80084a4 <__libc_init_array+0x40>)
 8008476:	4c0c      	ldr	r4, [pc, #48]	@ (80084a8 <__libc_init_array+0x44>)
 8008478:	f001 ffd4 	bl	800a424 <_init>
 800847c:	1b64      	subs	r4, r4, r5
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	2600      	movs	r6, #0
 8008482:	42a6      	cmp	r6, r4
 8008484:	d105      	bne.n	8008492 <__libc_init_array+0x2e>
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	f855 3b04 	ldr.w	r3, [r5], #4
 800848c:	4798      	blx	r3
 800848e:	3601      	adds	r6, #1
 8008490:	e7ee      	b.n	8008470 <__libc_init_array+0xc>
 8008492:	f855 3b04 	ldr.w	r3, [r5], #4
 8008496:	4798      	blx	r3
 8008498:	3601      	adds	r6, #1
 800849a:	e7f2      	b.n	8008482 <__libc_init_array+0x1e>
 800849c:	0800ae18 	.word	0x0800ae18
 80084a0:	0800ae18 	.word	0x0800ae18
 80084a4:	0800ae18 	.word	0x0800ae18
 80084a8:	0800ae1c 	.word	0x0800ae1c

080084ac <__retarget_lock_init_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_acquire_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <__retarget_lock_release_recursive>:
 80084b0:	4770      	bx	lr

080084b2 <quorem>:
 80084b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b6:	6903      	ldr	r3, [r0, #16]
 80084b8:	690c      	ldr	r4, [r1, #16]
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	4607      	mov	r7, r0
 80084be:	db7e      	blt.n	80085be <quorem+0x10c>
 80084c0:	3c01      	subs	r4, #1
 80084c2:	f101 0814 	add.w	r8, r1, #20
 80084c6:	00a3      	lsls	r3, r4, #2
 80084c8:	f100 0514 	add.w	r5, r0, #20
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084dc:	3301      	adds	r3, #1
 80084de:	429a      	cmp	r2, r3
 80084e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80084e8:	d32e      	bcc.n	8008548 <quorem+0x96>
 80084ea:	f04f 0a00 	mov.w	sl, #0
 80084ee:	46c4      	mov	ip, r8
 80084f0:	46ae      	mov	lr, r5
 80084f2:	46d3      	mov	fp, sl
 80084f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084f8:	b298      	uxth	r0, r3
 80084fa:	fb06 a000 	mla	r0, r6, r0, sl
 80084fe:	0c02      	lsrs	r2, r0, #16
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	fb06 2303 	mla	r3, r6, r3, r2
 8008506:	f8de 2000 	ldr.w	r2, [lr]
 800850a:	b280      	uxth	r0, r0
 800850c:	b292      	uxth	r2, r2
 800850e:	1a12      	subs	r2, r2, r0
 8008510:	445a      	add	r2, fp
 8008512:	f8de 0000 	ldr.w	r0, [lr]
 8008516:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800851a:	b29b      	uxth	r3, r3
 800851c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008520:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008524:	b292      	uxth	r2, r2
 8008526:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800852a:	45e1      	cmp	r9, ip
 800852c:	f84e 2b04 	str.w	r2, [lr], #4
 8008530:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008534:	d2de      	bcs.n	80084f4 <quorem+0x42>
 8008536:	9b00      	ldr	r3, [sp, #0]
 8008538:	58eb      	ldr	r3, [r5, r3]
 800853a:	b92b      	cbnz	r3, 8008548 <quorem+0x96>
 800853c:	9b01      	ldr	r3, [sp, #4]
 800853e:	3b04      	subs	r3, #4
 8008540:	429d      	cmp	r5, r3
 8008542:	461a      	mov	r2, r3
 8008544:	d32f      	bcc.n	80085a6 <quorem+0xf4>
 8008546:	613c      	str	r4, [r7, #16]
 8008548:	4638      	mov	r0, r7
 800854a:	f001 f97b 	bl	8009844 <__mcmp>
 800854e:	2800      	cmp	r0, #0
 8008550:	db25      	blt.n	800859e <quorem+0xec>
 8008552:	4629      	mov	r1, r5
 8008554:	2000      	movs	r0, #0
 8008556:	f858 2b04 	ldr.w	r2, [r8], #4
 800855a:	f8d1 c000 	ldr.w	ip, [r1]
 800855e:	fa1f fe82 	uxth.w	lr, r2
 8008562:	fa1f f38c 	uxth.w	r3, ip
 8008566:	eba3 030e 	sub.w	r3, r3, lr
 800856a:	4403      	add	r3, r0
 800856c:	0c12      	lsrs	r2, r2, #16
 800856e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008572:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800857c:	45c1      	cmp	r9, r8
 800857e:	f841 3b04 	str.w	r3, [r1], #4
 8008582:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008586:	d2e6      	bcs.n	8008556 <quorem+0xa4>
 8008588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800858c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008590:	b922      	cbnz	r2, 800859c <quorem+0xea>
 8008592:	3b04      	subs	r3, #4
 8008594:	429d      	cmp	r5, r3
 8008596:	461a      	mov	r2, r3
 8008598:	d30b      	bcc.n	80085b2 <quorem+0x100>
 800859a:	613c      	str	r4, [r7, #16]
 800859c:	3601      	adds	r6, #1
 800859e:	4630      	mov	r0, r6
 80085a0:	b003      	add	sp, #12
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	3b04      	subs	r3, #4
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	d1cb      	bne.n	8008546 <quorem+0x94>
 80085ae:	3c01      	subs	r4, #1
 80085b0:	e7c6      	b.n	8008540 <quorem+0x8e>
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	3b04      	subs	r3, #4
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	d1ef      	bne.n	800859a <quorem+0xe8>
 80085ba:	3c01      	subs	r4, #1
 80085bc:	e7ea      	b.n	8008594 <quorem+0xe2>
 80085be:	2000      	movs	r0, #0
 80085c0:	e7ee      	b.n	80085a0 <quorem+0xee>
 80085c2:	0000      	movs	r0, r0
 80085c4:	0000      	movs	r0, r0
	...

080085c8 <_dtoa_r>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	69c7      	ldr	r7, [r0, #28]
 80085ce:	b099      	sub	sp, #100	@ 0x64
 80085d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085d4:	ec55 4b10 	vmov	r4, r5, d0
 80085d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80085da:	9109      	str	r1, [sp, #36]	@ 0x24
 80085dc:	4683      	mov	fp, r0
 80085de:	920e      	str	r2, [sp, #56]	@ 0x38
 80085e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085e2:	b97f      	cbnz	r7, 8008604 <_dtoa_r+0x3c>
 80085e4:	2010      	movs	r0, #16
 80085e6:	f000 fdfd 	bl	80091e4 <malloc>
 80085ea:	4602      	mov	r2, r0
 80085ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80085f0:	b920      	cbnz	r0, 80085fc <_dtoa_r+0x34>
 80085f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008890 <_dtoa_r+0x2c8>)
 80085f4:	21ef      	movs	r1, #239	@ 0xef
 80085f6:	48a7      	ldr	r0, [pc, #668]	@ (8008894 <_dtoa_r+0x2cc>)
 80085f8:	f001 fe2e 	bl	800a258 <__assert_func>
 80085fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008600:	6007      	str	r7, [r0, #0]
 8008602:	60c7      	str	r7, [r0, #12]
 8008604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	b159      	cbz	r1, 8008624 <_dtoa_r+0x5c>
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	604a      	str	r2, [r1, #4]
 8008610:	2301      	movs	r3, #1
 8008612:	4093      	lsls	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
 8008616:	4658      	mov	r0, fp
 8008618:	f000 feda 	bl	80093d0 <_Bfree>
 800861c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	1e2b      	subs	r3, r5, #0
 8008626:	bfb9      	ittee	lt
 8008628:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800862c:	9303      	strlt	r3, [sp, #12]
 800862e:	2300      	movge	r3, #0
 8008630:	6033      	strge	r3, [r6, #0]
 8008632:	9f03      	ldr	r7, [sp, #12]
 8008634:	4b98      	ldr	r3, [pc, #608]	@ (8008898 <_dtoa_r+0x2d0>)
 8008636:	bfbc      	itt	lt
 8008638:	2201      	movlt	r2, #1
 800863a:	6032      	strlt	r2, [r6, #0]
 800863c:	43bb      	bics	r3, r7
 800863e:	d112      	bne.n	8008666 <_dtoa_r+0x9e>
 8008640:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008642:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800864c:	4323      	orrs	r3, r4
 800864e:	f000 854d 	beq.w	80090ec <_dtoa_r+0xb24>
 8008652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008654:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80088ac <_dtoa_r+0x2e4>
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 854f 	beq.w	80090fc <_dtoa_r+0xb34>
 800865e:	f10a 0303 	add.w	r3, sl, #3
 8008662:	f000 bd49 	b.w	80090f8 <_dtoa_r+0xb30>
 8008666:	ed9d 7b02 	vldr	d7, [sp, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	ec51 0b17 	vmov	r0, r1, d7
 8008670:	2300      	movs	r3, #0
 8008672:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008676:	f7f8 fa4f 	bl	8000b18 <__aeabi_dcmpeq>
 800867a:	4680      	mov	r8, r0
 800867c:	b158      	cbz	r0, 8008696 <_dtoa_r+0xce>
 800867e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008680:	2301      	movs	r3, #1
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008686:	b113      	cbz	r3, 800868e <_dtoa_r+0xc6>
 8008688:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800868a:	4b84      	ldr	r3, [pc, #528]	@ (800889c <_dtoa_r+0x2d4>)
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088b0 <_dtoa_r+0x2e8>
 8008692:	f000 bd33 	b.w	80090fc <_dtoa_r+0xb34>
 8008696:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800869a:	aa16      	add	r2, sp, #88	@ 0x58
 800869c:	a917      	add	r1, sp, #92	@ 0x5c
 800869e:	4658      	mov	r0, fp
 80086a0:	f001 f980 	bl	80099a4 <__d2b>
 80086a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086a8:	4681      	mov	r9, r0
 80086aa:	2e00      	cmp	r6, #0
 80086ac:	d077      	beq.n	800879e <_dtoa_r+0x1d6>
 80086ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086c8:	4619      	mov	r1, r3
 80086ca:	2200      	movs	r2, #0
 80086cc:	4b74      	ldr	r3, [pc, #464]	@ (80088a0 <_dtoa_r+0x2d8>)
 80086ce:	f7f7 fe03 	bl	80002d8 <__aeabi_dsub>
 80086d2:	a369      	add	r3, pc, #420	@ (adr r3, 8008878 <_dtoa_r+0x2b0>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 ffb6 	bl	8000648 <__aeabi_dmul>
 80086dc:	a368      	add	r3, pc, #416	@ (adr r3, 8008880 <_dtoa_r+0x2b8>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fdfb 	bl	80002dc <__adddf3>
 80086e6:	4604      	mov	r4, r0
 80086e8:	4630      	mov	r0, r6
 80086ea:	460d      	mov	r5, r1
 80086ec:	f7f7 ff42 	bl	8000574 <__aeabi_i2d>
 80086f0:	a365      	add	r3, pc, #404	@ (adr r3, 8008888 <_dtoa_r+0x2c0>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 ffa7 	bl	8000648 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f7 fdeb 	bl	80002dc <__adddf3>
 8008706:	4604      	mov	r4, r0
 8008708:	460d      	mov	r5, r1
 800870a:	f7f8 fa4d 	bl	8000ba8 <__aeabi_d2iz>
 800870e:	2200      	movs	r2, #0
 8008710:	4607      	mov	r7, r0
 8008712:	2300      	movs	r3, #0
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f8 fa08 	bl	8000b2c <__aeabi_dcmplt>
 800871c:	b140      	cbz	r0, 8008730 <_dtoa_r+0x168>
 800871e:	4638      	mov	r0, r7
 8008720:	f7f7 ff28 	bl	8000574 <__aeabi_i2d>
 8008724:	4622      	mov	r2, r4
 8008726:	462b      	mov	r3, r5
 8008728:	f7f8 f9f6 	bl	8000b18 <__aeabi_dcmpeq>
 800872c:	b900      	cbnz	r0, 8008730 <_dtoa_r+0x168>
 800872e:	3f01      	subs	r7, #1
 8008730:	2f16      	cmp	r7, #22
 8008732:	d851      	bhi.n	80087d8 <_dtoa_r+0x210>
 8008734:	4b5b      	ldr	r3, [pc, #364]	@ (80088a4 <_dtoa_r+0x2dc>)
 8008736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008742:	f7f8 f9f3 	bl	8000b2c <__aeabi_dcmplt>
 8008746:	2800      	cmp	r0, #0
 8008748:	d048      	beq.n	80087dc <_dtoa_r+0x214>
 800874a:	3f01      	subs	r7, #1
 800874c:	2300      	movs	r3, #0
 800874e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008750:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008752:	1b9b      	subs	r3, r3, r6
 8008754:	1e5a      	subs	r2, r3, #1
 8008756:	bf44      	itt	mi
 8008758:	f1c3 0801 	rsbmi	r8, r3, #1
 800875c:	2300      	movmi	r3, #0
 800875e:	9208      	str	r2, [sp, #32]
 8008760:	bf54      	ite	pl
 8008762:	f04f 0800 	movpl.w	r8, #0
 8008766:	9308      	strmi	r3, [sp, #32]
 8008768:	2f00      	cmp	r7, #0
 800876a:	db39      	blt.n	80087e0 <_dtoa_r+0x218>
 800876c:	9b08      	ldr	r3, [sp, #32]
 800876e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008770:	443b      	add	r3, r7
 8008772:	9308      	str	r3, [sp, #32]
 8008774:	2300      	movs	r3, #0
 8008776:	930a      	str	r3, [sp, #40]	@ 0x28
 8008778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877a:	2b09      	cmp	r3, #9
 800877c:	d864      	bhi.n	8008848 <_dtoa_r+0x280>
 800877e:	2b05      	cmp	r3, #5
 8008780:	bfc4      	itt	gt
 8008782:	3b04      	subgt	r3, #4
 8008784:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008788:	f1a3 0302 	sub.w	r3, r3, #2
 800878c:	bfcc      	ite	gt
 800878e:	2400      	movgt	r4, #0
 8008790:	2401      	movle	r4, #1
 8008792:	2b03      	cmp	r3, #3
 8008794:	d863      	bhi.n	800885e <_dtoa_r+0x296>
 8008796:	e8df f003 	tbb	[pc, r3]
 800879a:	372a      	.short	0x372a
 800879c:	5535      	.short	0x5535
 800879e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087a2:	441e      	add	r6, r3
 80087a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	bfc1      	itttt	gt
 80087ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087b0:	409f      	lslgt	r7, r3
 80087b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087ba:	bfd6      	itet	le
 80087bc:	f1c3 0320 	rsble	r3, r3, #32
 80087c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80087c4:	fa04 f003 	lslle.w	r0, r4, r3
 80087c8:	f7f7 fec4 	bl	8000554 <__aeabi_ui2d>
 80087cc:	2201      	movs	r2, #1
 80087ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087d2:	3e01      	subs	r6, #1
 80087d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80087d6:	e777      	b.n	80086c8 <_dtoa_r+0x100>
 80087d8:	2301      	movs	r3, #1
 80087da:	e7b8      	b.n	800874e <_dtoa_r+0x186>
 80087dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80087de:	e7b7      	b.n	8008750 <_dtoa_r+0x188>
 80087e0:	427b      	negs	r3, r7
 80087e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80087e4:	2300      	movs	r3, #0
 80087e6:	eba8 0807 	sub.w	r8, r8, r7
 80087ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087ec:	e7c4      	b.n	8008778 <_dtoa_r+0x1b0>
 80087ee:	2300      	movs	r3, #0
 80087f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc35      	bgt.n	8008864 <_dtoa_r+0x29c>
 80087f8:	2301      	movs	r3, #1
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	9307      	str	r3, [sp, #28]
 80087fe:	461a      	mov	r2, r3
 8008800:	920e      	str	r2, [sp, #56]	@ 0x38
 8008802:	e00b      	b.n	800881c <_dtoa_r+0x254>
 8008804:	2301      	movs	r3, #1
 8008806:	e7f3      	b.n	80087f0 <_dtoa_r+0x228>
 8008808:	2300      	movs	r3, #0
 800880a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800880c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	3301      	adds	r3, #1
 8008814:	2b01      	cmp	r3, #1
 8008816:	9307      	str	r3, [sp, #28]
 8008818:	bfb8      	it	lt
 800881a:	2301      	movlt	r3, #1
 800881c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008820:	2100      	movs	r1, #0
 8008822:	2204      	movs	r2, #4
 8008824:	f102 0514 	add.w	r5, r2, #20
 8008828:	429d      	cmp	r5, r3
 800882a:	d91f      	bls.n	800886c <_dtoa_r+0x2a4>
 800882c:	6041      	str	r1, [r0, #4]
 800882e:	4658      	mov	r0, fp
 8008830:	f000 fd8e 	bl	8009350 <_Balloc>
 8008834:	4682      	mov	sl, r0
 8008836:	2800      	cmp	r0, #0
 8008838:	d13c      	bne.n	80088b4 <_dtoa_r+0x2ec>
 800883a:	4b1b      	ldr	r3, [pc, #108]	@ (80088a8 <_dtoa_r+0x2e0>)
 800883c:	4602      	mov	r2, r0
 800883e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008842:	e6d8      	b.n	80085f6 <_dtoa_r+0x2e>
 8008844:	2301      	movs	r3, #1
 8008846:	e7e0      	b.n	800880a <_dtoa_r+0x242>
 8008848:	2401      	movs	r4, #1
 800884a:	2300      	movs	r3, #0
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008850:	f04f 33ff 	mov.w	r3, #4294967295
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	9307      	str	r3, [sp, #28]
 8008858:	2200      	movs	r2, #0
 800885a:	2312      	movs	r3, #18
 800885c:	e7d0      	b.n	8008800 <_dtoa_r+0x238>
 800885e:	2301      	movs	r3, #1
 8008860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008862:	e7f5      	b.n	8008850 <_dtoa_r+0x288>
 8008864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	e7d7      	b.n	800881c <_dtoa_r+0x254>
 800886c:	3101      	adds	r1, #1
 800886e:	0052      	lsls	r2, r2, #1
 8008870:	e7d8      	b.n	8008824 <_dtoa_r+0x25c>
 8008872:	bf00      	nop
 8008874:	f3af 8000 	nop.w
 8008878:	636f4361 	.word	0x636f4361
 800887c:	3fd287a7 	.word	0x3fd287a7
 8008880:	8b60c8b3 	.word	0x8b60c8b3
 8008884:	3fc68a28 	.word	0x3fc68a28
 8008888:	509f79fb 	.word	0x509f79fb
 800888c:	3fd34413 	.word	0x3fd34413
 8008890:	0800aae1 	.word	0x0800aae1
 8008894:	0800aaf8 	.word	0x0800aaf8
 8008898:	7ff00000 	.word	0x7ff00000
 800889c:	0800aab1 	.word	0x0800aab1
 80088a0:	3ff80000 	.word	0x3ff80000
 80088a4:	0800abf0 	.word	0x0800abf0
 80088a8:	0800ab50 	.word	0x0800ab50
 80088ac:	0800aadd 	.word	0x0800aadd
 80088b0:	0800aab0 	.word	0x0800aab0
 80088b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088b8:	6018      	str	r0, [r3, #0]
 80088ba:	9b07      	ldr	r3, [sp, #28]
 80088bc:	2b0e      	cmp	r3, #14
 80088be:	f200 80a4 	bhi.w	8008a0a <_dtoa_r+0x442>
 80088c2:	2c00      	cmp	r4, #0
 80088c4:	f000 80a1 	beq.w	8008a0a <_dtoa_r+0x442>
 80088c8:	2f00      	cmp	r7, #0
 80088ca:	dd33      	ble.n	8008934 <_dtoa_r+0x36c>
 80088cc:	4bad      	ldr	r3, [pc, #692]	@ (8008b84 <_dtoa_r+0x5bc>)
 80088ce:	f007 020f 	and.w	r2, r7, #15
 80088d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d6:	ed93 7b00 	vldr	d7, [r3]
 80088da:	05f8      	lsls	r0, r7, #23
 80088dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80088e4:	d516      	bpl.n	8008914 <_dtoa_r+0x34c>
 80088e6:	4ba8      	ldr	r3, [pc, #672]	@ (8008b88 <_dtoa_r+0x5c0>)
 80088e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088f0:	f7f7 ffd4 	bl	800089c <__aeabi_ddiv>
 80088f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f8:	f004 040f 	and.w	r4, r4, #15
 80088fc:	2603      	movs	r6, #3
 80088fe:	4da2      	ldr	r5, [pc, #648]	@ (8008b88 <_dtoa_r+0x5c0>)
 8008900:	b954      	cbnz	r4, 8008918 <_dtoa_r+0x350>
 8008902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890a:	f7f7 ffc7 	bl	800089c <__aeabi_ddiv>
 800890e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008912:	e028      	b.n	8008966 <_dtoa_r+0x39e>
 8008914:	2602      	movs	r6, #2
 8008916:	e7f2      	b.n	80088fe <_dtoa_r+0x336>
 8008918:	07e1      	lsls	r1, r4, #31
 800891a:	d508      	bpl.n	800892e <_dtoa_r+0x366>
 800891c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008920:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008924:	f7f7 fe90 	bl	8000648 <__aeabi_dmul>
 8008928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800892c:	3601      	adds	r6, #1
 800892e:	1064      	asrs	r4, r4, #1
 8008930:	3508      	adds	r5, #8
 8008932:	e7e5      	b.n	8008900 <_dtoa_r+0x338>
 8008934:	f000 80d2 	beq.w	8008adc <_dtoa_r+0x514>
 8008938:	427c      	negs	r4, r7
 800893a:	4b92      	ldr	r3, [pc, #584]	@ (8008b84 <_dtoa_r+0x5bc>)
 800893c:	4d92      	ldr	r5, [pc, #584]	@ (8008b88 <_dtoa_r+0x5c0>)
 800893e:	f004 020f 	and.w	r2, r4, #15
 8008942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800894e:	f7f7 fe7b 	bl	8000648 <__aeabi_dmul>
 8008952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008956:	1124      	asrs	r4, r4, #4
 8008958:	2300      	movs	r3, #0
 800895a:	2602      	movs	r6, #2
 800895c:	2c00      	cmp	r4, #0
 800895e:	f040 80b2 	bne.w	8008ac6 <_dtoa_r+0x4fe>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1d3      	bne.n	800890e <_dtoa_r+0x346>
 8008966:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008968:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80b7 	beq.w	8008ae0 <_dtoa_r+0x518>
 8008972:	4b86      	ldr	r3, [pc, #536]	@ (8008b8c <_dtoa_r+0x5c4>)
 8008974:	2200      	movs	r2, #0
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f8 f8d7 	bl	8000b2c <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	f000 80ae 	beq.w	8008ae0 <_dtoa_r+0x518>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 80aa 	beq.w	8008ae0 <_dtoa_r+0x518>
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd37      	ble.n	8008a02 <_dtoa_r+0x43a>
 8008992:	1e7b      	subs	r3, r7, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4620      	mov	r0, r4
 8008998:	4b7d      	ldr	r3, [pc, #500]	@ (8008b90 <_dtoa_r+0x5c8>)
 800899a:	2200      	movs	r2, #0
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fe53 	bl	8000648 <__aeabi_dmul>
 80089a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a6:	9c00      	ldr	r4, [sp, #0]
 80089a8:	3601      	adds	r6, #1
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7f7 fde2 	bl	8000574 <__aeabi_i2d>
 80089b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089b4:	f7f7 fe48 	bl	8000648 <__aeabi_dmul>
 80089b8:	4b76      	ldr	r3, [pc, #472]	@ (8008b94 <_dtoa_r+0x5cc>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	f7f7 fc8e 	bl	80002dc <__adddf3>
 80089c0:	4605      	mov	r5, r0
 80089c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089c6:	2c00      	cmp	r4, #0
 80089c8:	f040 808d 	bne.w	8008ae6 <_dtoa_r+0x51e>
 80089cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d0:	4b71      	ldr	r3, [pc, #452]	@ (8008b98 <_dtoa_r+0x5d0>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	f7f7 fc80 	bl	80002d8 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089e0:	462a      	mov	r2, r5
 80089e2:	4633      	mov	r3, r6
 80089e4:	f7f8 f8c0 	bl	8000b68 <__aeabi_dcmpgt>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f040 828b 	bne.w	8008f04 <_dtoa_r+0x93c>
 80089ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f2:	462a      	mov	r2, r5
 80089f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089f8:	f7f8 f898 	bl	8000b2c <__aeabi_dcmplt>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f040 8128 	bne.w	8008c52 <_dtoa_r+0x68a>
 8008a02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f2c0 815a 	blt.w	8008cc6 <_dtoa_r+0x6fe>
 8008a12:	2f0e      	cmp	r7, #14
 8008a14:	f300 8157 	bgt.w	8008cc6 <_dtoa_r+0x6fe>
 8008a18:	4b5a      	ldr	r3, [pc, #360]	@ (8008b84 <_dtoa_r+0x5bc>)
 8008a1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a1e:	ed93 7b00 	vldr	d7, [r3]
 8008a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	ed8d 7b00 	vstr	d7, [sp]
 8008a2a:	da03      	bge.n	8008a34 <_dtoa_r+0x46c>
 8008a2c:	9b07      	ldr	r3, [sp, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f340 8101 	ble.w	8008c36 <_dtoa_r+0x66e>
 8008a34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a38:	4656      	mov	r6, sl
 8008a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7f7 ff2b 	bl	800089c <__aeabi_ddiv>
 8008a46:	f7f8 f8af 	bl	8000ba8 <__aeabi_d2iz>
 8008a4a:	4680      	mov	r8, r0
 8008a4c:	f7f7 fd92 	bl	8000574 <__aeabi_i2d>
 8008a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a54:	f7f7 fdf8 	bl	8000648 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	4629      	mov	r1, r5
 8008a60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a64:	f7f7 fc38 	bl	80002d8 <__aeabi_dsub>
 8008a68:	f806 4b01 	strb.w	r4, [r6], #1
 8008a6c:	9d07      	ldr	r5, [sp, #28]
 8008a6e:	eba6 040a 	sub.w	r4, r6, sl
 8008a72:	42a5      	cmp	r5, r4
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	f040 8117 	bne.w	8008caa <_dtoa_r+0x6e2>
 8008a7c:	f7f7 fc2e 	bl	80002dc <__adddf3>
 8008a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a84:	4604      	mov	r4, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	f7f8 f86e 	bl	8000b68 <__aeabi_dcmpgt>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f040 80f9 	bne.w	8008c84 <_dtoa_r+0x6bc>
 8008a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f8 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 8008a9e:	b118      	cbz	r0, 8008aa8 <_dtoa_r+0x4e0>
 8008aa0:	f018 0f01 	tst.w	r8, #1
 8008aa4:	f040 80ee 	bne.w	8008c84 <_dtoa_r+0x6bc>
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4658      	mov	r0, fp
 8008aac:	f000 fc90 	bl	80093d0 <_Bfree>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	7033      	strb	r3, [r6, #0]
 8008ab4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ab6:	3701      	adds	r7, #1
 8008ab8:	601f      	str	r7, [r3, #0]
 8008aba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 831d 	beq.w	80090fc <_dtoa_r+0xb34>
 8008ac2:	601e      	str	r6, [r3, #0]
 8008ac4:	e31a      	b.n	80090fc <_dtoa_r+0xb34>
 8008ac6:	07e2      	lsls	r2, r4, #31
 8008ac8:	d505      	bpl.n	8008ad6 <_dtoa_r+0x50e>
 8008aca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ace:	f7f7 fdbb 	bl	8000648 <__aeabi_dmul>
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	1064      	asrs	r4, r4, #1
 8008ad8:	3508      	adds	r5, #8
 8008ada:	e73f      	b.n	800895c <_dtoa_r+0x394>
 8008adc:	2602      	movs	r6, #2
 8008ade:	e742      	b.n	8008966 <_dtoa_r+0x39e>
 8008ae0:	9c07      	ldr	r4, [sp, #28]
 8008ae2:	9704      	str	r7, [sp, #16]
 8008ae4:	e761      	b.n	80089aa <_dtoa_r+0x3e2>
 8008ae6:	4b27      	ldr	r3, [pc, #156]	@ (8008b84 <_dtoa_r+0x5bc>)
 8008ae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008aee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008af2:	4454      	add	r4, sl
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d053      	beq.n	8008ba0 <_dtoa_r+0x5d8>
 8008af8:	4928      	ldr	r1, [pc, #160]	@ (8008b9c <_dtoa_r+0x5d4>)
 8008afa:	2000      	movs	r0, #0
 8008afc:	f7f7 fece 	bl	800089c <__aeabi_ddiv>
 8008b00:	4633      	mov	r3, r6
 8008b02:	462a      	mov	r2, r5
 8008b04:	f7f7 fbe8 	bl	80002d8 <__aeabi_dsub>
 8008b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b0c:	4656      	mov	r6, sl
 8008b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b12:	f7f8 f849 	bl	8000ba8 <__aeabi_d2iz>
 8008b16:	4605      	mov	r5, r0
 8008b18:	f7f7 fd2c 	bl	8000574 <__aeabi_i2d>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b24:	f7f7 fbd8 	bl	80002d8 <__aeabi_dsub>
 8008b28:	3530      	adds	r5, #48	@ 0x30
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b32:	f806 5b01 	strb.w	r5, [r6], #1
 8008b36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b3a:	f7f7 fff7 	bl	8000b2c <__aeabi_dcmplt>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d171      	bne.n	8008c26 <_dtoa_r+0x65e>
 8008b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b46:	4911      	ldr	r1, [pc, #68]	@ (8008b8c <_dtoa_r+0x5c4>)
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f7f7 fbc5 	bl	80002d8 <__aeabi_dsub>
 8008b4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b52:	f7f7 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f040 8095 	bne.w	8008c86 <_dtoa_r+0x6be>
 8008b5c:	42a6      	cmp	r6, r4
 8008b5e:	f43f af50 	beq.w	8008a02 <_dtoa_r+0x43a>
 8008b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b66:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <_dtoa_r+0x5c8>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f7f7 fd6d 	bl	8000648 <__aeabi_dmul>
 8008b6e:	4b08      	ldr	r3, [pc, #32]	@ (8008b90 <_dtoa_r+0x5c8>)
 8008b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b74:	2200      	movs	r2, #0
 8008b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7a:	f7f7 fd65 	bl	8000648 <__aeabi_dmul>
 8008b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b82:	e7c4      	b.n	8008b0e <_dtoa_r+0x546>
 8008b84:	0800abf0 	.word	0x0800abf0
 8008b88:	0800abc8 	.word	0x0800abc8
 8008b8c:	3ff00000 	.word	0x3ff00000
 8008b90:	40240000 	.word	0x40240000
 8008b94:	401c0000 	.word	0x401c0000
 8008b98:	40140000 	.word	0x40140000
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7f7 fd50 	bl	8000648 <__aeabi_dmul>
 8008ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bac:	9415      	str	r4, [sp, #84]	@ 0x54
 8008bae:	4656      	mov	r6, sl
 8008bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb4:	f7f7 fff8 	bl	8000ba8 <__aeabi_d2iz>
 8008bb8:	4605      	mov	r5, r0
 8008bba:	f7f7 fcdb 	bl	8000574 <__aeabi_i2d>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bc6:	f7f7 fb87 	bl	80002d8 <__aeabi_dsub>
 8008bca:	3530      	adds	r5, #48	@ 0x30
 8008bcc:	f806 5b01 	strb.w	r5, [r6], #1
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	42a6      	cmp	r6, r4
 8008bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bda:	f04f 0200 	mov.w	r2, #0
 8008bde:	d124      	bne.n	8008c2a <_dtoa_r+0x662>
 8008be0:	4bac      	ldr	r3, [pc, #688]	@ (8008e94 <_dtoa_r+0x8cc>)
 8008be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008be6:	f7f7 fb79 	bl	80002dc <__adddf3>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf2:	f7f7 ffb9 	bl	8000b68 <__aeabi_dcmpgt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d145      	bne.n	8008c86 <_dtoa_r+0x6be>
 8008bfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bfe:	49a5      	ldr	r1, [pc, #660]	@ (8008e94 <_dtoa_r+0x8cc>)
 8008c00:	2000      	movs	r0, #0
 8008c02:	f7f7 fb69 	bl	80002d8 <__aeabi_dsub>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0e:	f7f7 ff8d 	bl	8000b2c <__aeabi_dcmplt>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	f43f aef5 	beq.w	8008a02 <_dtoa_r+0x43a>
 8008c18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c1a:	1e73      	subs	r3, r6, #1
 8008c1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c22:	2b30      	cmp	r3, #48	@ 0x30
 8008c24:	d0f8      	beq.n	8008c18 <_dtoa_r+0x650>
 8008c26:	9f04      	ldr	r7, [sp, #16]
 8008c28:	e73e      	b.n	8008aa8 <_dtoa_r+0x4e0>
 8008c2a:	4b9b      	ldr	r3, [pc, #620]	@ (8008e98 <_dtoa_r+0x8d0>)
 8008c2c:	f7f7 fd0c 	bl	8000648 <__aeabi_dmul>
 8008c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c34:	e7bc      	b.n	8008bb0 <_dtoa_r+0x5e8>
 8008c36:	d10c      	bne.n	8008c52 <_dtoa_r+0x68a>
 8008c38:	4b98      	ldr	r3, [pc, #608]	@ (8008e9c <_dtoa_r+0x8d4>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c40:	f7f7 fd02 	bl	8000648 <__aeabi_dmul>
 8008c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c48:	f7f7 ff84 	bl	8000b54 <__aeabi_dcmpge>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f000 8157 	beq.w	8008f00 <_dtoa_r+0x938>
 8008c52:	2400      	movs	r4, #0
 8008c54:	4625      	mov	r5, r4
 8008c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	4656      	mov	r6, sl
 8008c5e:	2700      	movs	r7, #0
 8008c60:	4621      	mov	r1, r4
 8008c62:	4658      	mov	r0, fp
 8008c64:	f000 fbb4 	bl	80093d0 <_Bfree>
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	d0dc      	beq.n	8008c26 <_dtoa_r+0x65e>
 8008c6c:	b12f      	cbz	r7, 8008c7a <_dtoa_r+0x6b2>
 8008c6e:	42af      	cmp	r7, r5
 8008c70:	d003      	beq.n	8008c7a <_dtoa_r+0x6b2>
 8008c72:	4639      	mov	r1, r7
 8008c74:	4658      	mov	r0, fp
 8008c76:	f000 fbab 	bl	80093d0 <_Bfree>
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	f000 fba7 	bl	80093d0 <_Bfree>
 8008c82:	e7d0      	b.n	8008c26 <_dtoa_r+0x65e>
 8008c84:	9704      	str	r7, [sp, #16]
 8008c86:	4633      	mov	r3, r6
 8008c88:	461e      	mov	r6, r3
 8008c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8e:	2a39      	cmp	r2, #57	@ 0x39
 8008c90:	d107      	bne.n	8008ca2 <_dtoa_r+0x6da>
 8008c92:	459a      	cmp	sl, r3
 8008c94:	d1f8      	bne.n	8008c88 <_dtoa_r+0x6c0>
 8008c96:	9a04      	ldr	r2, [sp, #16]
 8008c98:	3201      	adds	r2, #1
 8008c9a:	9204      	str	r2, [sp, #16]
 8008c9c:	2230      	movs	r2, #48	@ 0x30
 8008c9e:	f88a 2000 	strb.w	r2, [sl]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	701a      	strb	r2, [r3, #0]
 8008ca8:	e7bd      	b.n	8008c26 <_dtoa_r+0x65e>
 8008caa:	4b7b      	ldr	r3, [pc, #492]	@ (8008e98 <_dtoa_r+0x8d0>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	f7f7 fccb 	bl	8000648 <__aeabi_dmul>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	f7f7 ff2d 	bl	8000b18 <__aeabi_dcmpeq>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f43f aebb 	beq.w	8008a3a <_dtoa_r+0x472>
 8008cc4:	e6f0      	b.n	8008aa8 <_dtoa_r+0x4e0>
 8008cc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	f000 80db 	beq.w	8008e84 <_dtoa_r+0x8bc>
 8008cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cd0:	2a01      	cmp	r2, #1
 8008cd2:	f300 80bf 	bgt.w	8008e54 <_dtoa_r+0x88c>
 8008cd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008cd8:	2a00      	cmp	r2, #0
 8008cda:	f000 80b7 	beq.w	8008e4c <_dtoa_r+0x884>
 8008cde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008ce2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ce4:	4646      	mov	r6, r8
 8008ce6:	9a08      	ldr	r2, [sp, #32]
 8008ce8:	2101      	movs	r1, #1
 8008cea:	441a      	add	r2, r3
 8008cec:	4658      	mov	r0, fp
 8008cee:	4498      	add	r8, r3
 8008cf0:	9208      	str	r2, [sp, #32]
 8008cf2:	f000 fc21 	bl	8009538 <__i2b>
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	b15e      	cbz	r6, 8008d12 <_dtoa_r+0x74a>
 8008cfa:	9b08      	ldr	r3, [sp, #32]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dd08      	ble.n	8008d12 <_dtoa_r+0x74a>
 8008d00:	42b3      	cmp	r3, r6
 8008d02:	9a08      	ldr	r2, [sp, #32]
 8008d04:	bfa8      	it	ge
 8008d06:	4633      	movge	r3, r6
 8008d08:	eba8 0803 	sub.w	r8, r8, r3
 8008d0c:	1af6      	subs	r6, r6, r3
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	9308      	str	r3, [sp, #32]
 8008d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d14:	b1f3      	cbz	r3, 8008d54 <_dtoa_r+0x78c>
 8008d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 80b7 	beq.w	8008e8c <_dtoa_r+0x8c4>
 8008d1e:	b18c      	cbz	r4, 8008d44 <_dtoa_r+0x77c>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4622      	mov	r2, r4
 8008d24:	4658      	mov	r0, fp
 8008d26:	f000 fcc7 	bl	80096b8 <__pow5mult>
 8008d2a:	464a      	mov	r2, r9
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4605      	mov	r5, r0
 8008d30:	4658      	mov	r0, fp
 8008d32:	f000 fc17 	bl	8009564 <__multiply>
 8008d36:	4649      	mov	r1, r9
 8008d38:	9004      	str	r0, [sp, #16]
 8008d3a:	4658      	mov	r0, fp
 8008d3c:	f000 fb48 	bl	80093d0 <_Bfree>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	4699      	mov	r9, r3
 8008d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d46:	1b1a      	subs	r2, r3, r4
 8008d48:	d004      	beq.n	8008d54 <_dtoa_r+0x78c>
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f000 fcb3 	bl	80096b8 <__pow5mult>
 8008d52:	4681      	mov	r9, r0
 8008d54:	2101      	movs	r1, #1
 8008d56:	4658      	mov	r0, fp
 8008d58:	f000 fbee 	bl	8009538 <__i2b>
 8008d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d5e:	4604      	mov	r4, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 81cf 	beq.w	8009104 <_dtoa_r+0xb3c>
 8008d66:	461a      	mov	r2, r3
 8008d68:	4601      	mov	r1, r0
 8008d6a:	4658      	mov	r0, fp
 8008d6c:	f000 fca4 	bl	80096b8 <__pow5mult>
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	4604      	mov	r4, r0
 8008d76:	f300 8095 	bgt.w	8008ea4 <_dtoa_r+0x8dc>
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 8087 	bne.w	8008e90 <_dtoa_r+0x8c8>
 8008d82:	9b03      	ldr	r3, [sp, #12]
 8008d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 8089 	bne.w	8008ea0 <_dtoa_r+0x8d8>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d94:	0d1b      	lsrs	r3, r3, #20
 8008d96:	051b      	lsls	r3, r3, #20
 8008d98:	b12b      	cbz	r3, 8008da6 <_dtoa_r+0x7de>
 8008d9a:	9b08      	ldr	r3, [sp, #32]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	9308      	str	r3, [sp, #32]
 8008da0:	f108 0801 	add.w	r8, r8, #1
 8008da4:	2301      	movs	r3, #1
 8008da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 81b0 	beq.w	8009110 <_dtoa_r+0xb48>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008db6:	6918      	ldr	r0, [r3, #16]
 8008db8:	f000 fb72 	bl	80094a0 <__hi0bits>
 8008dbc:	f1c0 0020 	rsb	r0, r0, #32
 8008dc0:	9b08      	ldr	r3, [sp, #32]
 8008dc2:	4418      	add	r0, r3
 8008dc4:	f010 001f 	ands.w	r0, r0, #31
 8008dc8:	d077      	beq.n	8008eba <_dtoa_r+0x8f2>
 8008dca:	f1c0 0320 	rsb	r3, r0, #32
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	dd6b      	ble.n	8008eaa <_dtoa_r+0x8e2>
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	f1c0 001c 	rsb	r0, r0, #28
 8008dd8:	4403      	add	r3, r0
 8008dda:	4480      	add	r8, r0
 8008ddc:	4406      	add	r6, r0
 8008dde:	9308      	str	r3, [sp, #32]
 8008de0:	f1b8 0f00 	cmp.w	r8, #0
 8008de4:	dd05      	ble.n	8008df2 <_dtoa_r+0x82a>
 8008de6:	4649      	mov	r1, r9
 8008de8:	4642      	mov	r2, r8
 8008dea:	4658      	mov	r0, fp
 8008dec:	f000 fcbe 	bl	800976c <__lshift>
 8008df0:	4681      	mov	r9, r0
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd05      	ble.n	8008e04 <_dtoa_r+0x83c>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	4658      	mov	r0, fp
 8008dfe:	f000 fcb5 	bl	800976c <__lshift>
 8008e02:	4604      	mov	r4, r0
 8008e04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d059      	beq.n	8008ebe <_dtoa_r+0x8f6>
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4648      	mov	r0, r9
 8008e0e:	f000 fd19 	bl	8009844 <__mcmp>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	da53      	bge.n	8008ebe <_dtoa_r+0x8f6>
 8008e16:	1e7b      	subs	r3, r7, #1
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	220a      	movs	r2, #10
 8008e20:	4658      	mov	r0, fp
 8008e22:	f000 faf7 	bl	8009414 <__multadd>
 8008e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e28:	4681      	mov	r9, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 8172 	beq.w	8009114 <_dtoa_r+0xb4c>
 8008e30:	2300      	movs	r3, #0
 8008e32:	4629      	mov	r1, r5
 8008e34:	220a      	movs	r2, #10
 8008e36:	4658      	mov	r0, fp
 8008e38:	f000 faec 	bl	8009414 <__multadd>
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	4605      	mov	r5, r0
 8008e42:	dc67      	bgt.n	8008f14 <_dtoa_r+0x94c>
 8008e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	dc41      	bgt.n	8008ece <_dtoa_r+0x906>
 8008e4a:	e063      	b.n	8008f14 <_dtoa_r+0x94c>
 8008e4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e52:	e746      	b.n	8008ce2 <_dtoa_r+0x71a>
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	1e5c      	subs	r4, r3, #1
 8008e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	bfbf      	itttt	lt
 8008e5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e64:	1ae3      	sublt	r3, r4, r3
 8008e66:	bfb4      	ite	lt
 8008e68:	18d2      	addlt	r2, r2, r3
 8008e6a:	1b1c      	subge	r4, r3, r4
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	bfbc      	itt	lt
 8008e70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e72:	2400      	movlt	r4, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bfb5      	itete	lt
 8008e78:	eba8 0603 	sublt.w	r6, r8, r3
 8008e7c:	9b07      	ldrge	r3, [sp, #28]
 8008e7e:	2300      	movlt	r3, #0
 8008e80:	4646      	movge	r6, r8
 8008e82:	e730      	b.n	8008ce6 <_dtoa_r+0x71e>
 8008e84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e88:	4646      	mov	r6, r8
 8008e8a:	e735      	b.n	8008cf8 <_dtoa_r+0x730>
 8008e8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e8e:	e75c      	b.n	8008d4a <_dtoa_r+0x782>
 8008e90:	2300      	movs	r3, #0
 8008e92:	e788      	b.n	8008da6 <_dtoa_r+0x7de>
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	40240000 	.word	0x40240000
 8008e9c:	40140000 	.word	0x40140000
 8008ea0:	9b02      	ldr	r3, [sp, #8]
 8008ea2:	e780      	b.n	8008da6 <_dtoa_r+0x7de>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea8:	e782      	b.n	8008db0 <_dtoa_r+0x7e8>
 8008eaa:	d099      	beq.n	8008de0 <_dtoa_r+0x818>
 8008eac:	9a08      	ldr	r2, [sp, #32]
 8008eae:	331c      	adds	r3, #28
 8008eb0:	441a      	add	r2, r3
 8008eb2:	4498      	add	r8, r3
 8008eb4:	441e      	add	r6, r3
 8008eb6:	9208      	str	r2, [sp, #32]
 8008eb8:	e792      	b.n	8008de0 <_dtoa_r+0x818>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	e7f6      	b.n	8008eac <_dtoa_r+0x8e4>
 8008ebe:	9b07      	ldr	r3, [sp, #28]
 8008ec0:	9704      	str	r7, [sp, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dc20      	bgt.n	8008f08 <_dtoa_r+0x940>
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	dd1e      	ble.n	8008f0c <_dtoa_r+0x944>
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f47f aec0 	bne.w	8008c56 <_dtoa_r+0x68e>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	2205      	movs	r2, #5
 8008eda:	4658      	mov	r0, fp
 8008edc:	f000 fa9a 	bl	8009414 <__multadd>
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4648      	mov	r0, r9
 8008ee6:	f000 fcad 	bl	8009844 <__mcmp>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f77f aeb3 	ble.w	8008c56 <_dtoa_r+0x68e>
 8008ef0:	4656      	mov	r6, sl
 8008ef2:	2331      	movs	r3, #49	@ 0x31
 8008ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ef8:	9b04      	ldr	r3, [sp, #16]
 8008efa:	3301      	adds	r3, #1
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	e6ae      	b.n	8008c5e <_dtoa_r+0x696>
 8008f00:	9c07      	ldr	r4, [sp, #28]
 8008f02:	9704      	str	r7, [sp, #16]
 8008f04:	4625      	mov	r5, r4
 8008f06:	e7f3      	b.n	8008ef0 <_dtoa_r+0x928>
 8008f08:	9b07      	ldr	r3, [sp, #28]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8104 	beq.w	800911c <_dtoa_r+0xb54>
 8008f14:	2e00      	cmp	r6, #0
 8008f16:	dd05      	ble.n	8008f24 <_dtoa_r+0x95c>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	f000 fc25 	bl	800976c <__lshift>
 8008f22:	4605      	mov	r5, r0
 8008f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d05a      	beq.n	8008fe0 <_dtoa_r+0xa18>
 8008f2a:	6869      	ldr	r1, [r5, #4]
 8008f2c:	4658      	mov	r0, fp
 8008f2e:	f000 fa0f 	bl	8009350 <_Balloc>
 8008f32:	4606      	mov	r6, r0
 8008f34:	b928      	cbnz	r0, 8008f42 <_dtoa_r+0x97a>
 8008f36:	4b84      	ldr	r3, [pc, #528]	@ (8009148 <_dtoa_r+0xb80>)
 8008f38:	4602      	mov	r2, r0
 8008f3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f3e:	f7ff bb5a 	b.w	80085f6 <_dtoa_r+0x2e>
 8008f42:	692a      	ldr	r2, [r5, #16]
 8008f44:	3202      	adds	r2, #2
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	f105 010c 	add.w	r1, r5, #12
 8008f4c:	300c      	adds	r0, #12
 8008f4e:	f001 f975 	bl	800a23c <memcpy>
 8008f52:	2201      	movs	r2, #1
 8008f54:	4631      	mov	r1, r6
 8008f56:	4658      	mov	r0, fp
 8008f58:	f000 fc08 	bl	800976c <__lshift>
 8008f5c:	f10a 0301 	add.w	r3, sl, #1
 8008f60:	9307      	str	r3, [sp, #28]
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	4453      	add	r3, sl
 8008f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	462f      	mov	r7, r5
 8008f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f72:	4605      	mov	r5, r0
 8008f74:	9b07      	ldr	r3, [sp, #28]
 8008f76:	4621      	mov	r1, r4
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	4648      	mov	r0, r9
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	f7ff fa98 	bl	80084b2 <quorem>
 8008f82:	4639      	mov	r1, r7
 8008f84:	9002      	str	r0, [sp, #8]
 8008f86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f8a:	4648      	mov	r0, r9
 8008f8c:	f000 fc5a 	bl	8009844 <__mcmp>
 8008f90:	462a      	mov	r2, r5
 8008f92:	9008      	str	r0, [sp, #32]
 8008f94:	4621      	mov	r1, r4
 8008f96:	4658      	mov	r0, fp
 8008f98:	f000 fc70 	bl	800987c <__mdiff>
 8008f9c:	68c2      	ldr	r2, [r0, #12]
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	bb02      	cbnz	r2, 8008fe4 <_dtoa_r+0xa1c>
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	4648      	mov	r0, r9
 8008fa6:	f000 fc4d 	bl	8009844 <__mcmp>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4631      	mov	r1, r6
 8008fae:	4658      	mov	r0, fp
 8008fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fb2:	f000 fa0d 	bl	80093d0 <_Bfree>
 8008fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fba:	9e07      	ldr	r6, [sp, #28]
 8008fbc:	ea43 0102 	orr.w	r1, r3, r2
 8008fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc2:	4319      	orrs	r1, r3
 8008fc4:	d110      	bne.n	8008fe8 <_dtoa_r+0xa20>
 8008fc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fca:	d029      	beq.n	8009020 <_dtoa_r+0xa58>
 8008fcc:	9b08      	ldr	r3, [sp, #32]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dd02      	ble.n	8008fd8 <_dtoa_r+0xa10>
 8008fd2:	9b02      	ldr	r3, [sp, #8]
 8008fd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	f883 8000 	strb.w	r8, [r3]
 8008fde:	e63f      	b.n	8008c60 <_dtoa_r+0x698>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e7bb      	b.n	8008f5c <_dtoa_r+0x994>
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	e7e1      	b.n	8008fac <_dtoa_r+0x9e4>
 8008fe8:	9b08      	ldr	r3, [sp, #32]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	db04      	blt.n	8008ff8 <_dtoa_r+0xa30>
 8008fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	d120      	bne.n	800903a <_dtoa_r+0xa72>
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	dded      	ble.n	8008fd8 <_dtoa_r+0xa10>
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	2201      	movs	r2, #1
 8009000:	4658      	mov	r0, fp
 8009002:	f000 fbb3 	bl	800976c <__lshift>
 8009006:	4621      	mov	r1, r4
 8009008:	4681      	mov	r9, r0
 800900a:	f000 fc1b 	bl	8009844 <__mcmp>
 800900e:	2800      	cmp	r0, #0
 8009010:	dc03      	bgt.n	800901a <_dtoa_r+0xa52>
 8009012:	d1e1      	bne.n	8008fd8 <_dtoa_r+0xa10>
 8009014:	f018 0f01 	tst.w	r8, #1
 8009018:	d0de      	beq.n	8008fd8 <_dtoa_r+0xa10>
 800901a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800901e:	d1d8      	bne.n	8008fd2 <_dtoa_r+0xa0a>
 8009020:	9a00      	ldr	r2, [sp, #0]
 8009022:	2339      	movs	r3, #57	@ 0x39
 8009024:	7013      	strb	r3, [r2, #0]
 8009026:	4633      	mov	r3, r6
 8009028:	461e      	mov	r6, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009030:	2a39      	cmp	r2, #57	@ 0x39
 8009032:	d052      	beq.n	80090da <_dtoa_r+0xb12>
 8009034:	3201      	adds	r2, #1
 8009036:	701a      	strb	r2, [r3, #0]
 8009038:	e612      	b.n	8008c60 <_dtoa_r+0x698>
 800903a:	2a00      	cmp	r2, #0
 800903c:	dd07      	ble.n	800904e <_dtoa_r+0xa86>
 800903e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009042:	d0ed      	beq.n	8009020 <_dtoa_r+0xa58>
 8009044:	9a00      	ldr	r2, [sp, #0]
 8009046:	f108 0301 	add.w	r3, r8, #1
 800904a:	7013      	strb	r3, [r2, #0]
 800904c:	e608      	b.n	8008c60 <_dtoa_r+0x698>
 800904e:	9b07      	ldr	r3, [sp, #28]
 8009050:	9a07      	ldr	r2, [sp, #28]
 8009052:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009058:	4293      	cmp	r3, r2
 800905a:	d028      	beq.n	80090ae <_dtoa_r+0xae6>
 800905c:	4649      	mov	r1, r9
 800905e:	2300      	movs	r3, #0
 8009060:	220a      	movs	r2, #10
 8009062:	4658      	mov	r0, fp
 8009064:	f000 f9d6 	bl	8009414 <__multadd>
 8009068:	42af      	cmp	r7, r5
 800906a:	4681      	mov	r9, r0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	f04f 020a 	mov.w	r2, #10
 8009074:	4639      	mov	r1, r7
 8009076:	4658      	mov	r0, fp
 8009078:	d107      	bne.n	800908a <_dtoa_r+0xac2>
 800907a:	f000 f9cb 	bl	8009414 <__multadd>
 800907e:	4607      	mov	r7, r0
 8009080:	4605      	mov	r5, r0
 8009082:	9b07      	ldr	r3, [sp, #28]
 8009084:	3301      	adds	r3, #1
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	e774      	b.n	8008f74 <_dtoa_r+0x9ac>
 800908a:	f000 f9c3 	bl	8009414 <__multadd>
 800908e:	4629      	mov	r1, r5
 8009090:	4607      	mov	r7, r0
 8009092:	2300      	movs	r3, #0
 8009094:	220a      	movs	r2, #10
 8009096:	4658      	mov	r0, fp
 8009098:	f000 f9bc 	bl	8009414 <__multadd>
 800909c:	4605      	mov	r5, r0
 800909e:	e7f0      	b.n	8009082 <_dtoa_r+0xaba>
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfcc      	ite	gt
 80090a6:	461e      	movgt	r6, r3
 80090a8:	2601      	movle	r6, #1
 80090aa:	4456      	add	r6, sl
 80090ac:	2700      	movs	r7, #0
 80090ae:	4649      	mov	r1, r9
 80090b0:	2201      	movs	r2, #1
 80090b2:	4658      	mov	r0, fp
 80090b4:	f000 fb5a 	bl	800976c <__lshift>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4681      	mov	r9, r0
 80090bc:	f000 fbc2 	bl	8009844 <__mcmp>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dcb0      	bgt.n	8009026 <_dtoa_r+0xa5e>
 80090c4:	d102      	bne.n	80090cc <_dtoa_r+0xb04>
 80090c6:	f018 0f01 	tst.w	r8, #1
 80090ca:	d1ac      	bne.n	8009026 <_dtoa_r+0xa5e>
 80090cc:	4633      	mov	r3, r6
 80090ce:	461e      	mov	r6, r3
 80090d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090d4:	2a30      	cmp	r2, #48	@ 0x30
 80090d6:	d0fa      	beq.n	80090ce <_dtoa_r+0xb06>
 80090d8:	e5c2      	b.n	8008c60 <_dtoa_r+0x698>
 80090da:	459a      	cmp	sl, r3
 80090dc:	d1a4      	bne.n	8009028 <_dtoa_r+0xa60>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	2331      	movs	r3, #49	@ 0x31
 80090e6:	f88a 3000 	strb.w	r3, [sl]
 80090ea:	e5b9      	b.n	8008c60 <_dtoa_r+0x698>
 80090ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800914c <_dtoa_r+0xb84>
 80090f2:	b11b      	cbz	r3, 80090fc <_dtoa_r+0xb34>
 80090f4:	f10a 0308 	add.w	r3, sl, #8
 80090f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	4650      	mov	r0, sl
 80090fe:	b019      	add	sp, #100	@ 0x64
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009106:	2b01      	cmp	r3, #1
 8009108:	f77f ae37 	ble.w	8008d7a <_dtoa_r+0x7b2>
 800910c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800910e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009110:	2001      	movs	r0, #1
 8009112:	e655      	b.n	8008dc0 <_dtoa_r+0x7f8>
 8009114:	9b00      	ldr	r3, [sp, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	f77f aed6 	ble.w	8008ec8 <_dtoa_r+0x900>
 800911c:	4656      	mov	r6, sl
 800911e:	4621      	mov	r1, r4
 8009120:	4648      	mov	r0, r9
 8009122:	f7ff f9c6 	bl	80084b2 <quorem>
 8009126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800912a:	f806 8b01 	strb.w	r8, [r6], #1
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	eba6 020a 	sub.w	r2, r6, sl
 8009134:	4293      	cmp	r3, r2
 8009136:	ddb3      	ble.n	80090a0 <_dtoa_r+0xad8>
 8009138:	4649      	mov	r1, r9
 800913a:	2300      	movs	r3, #0
 800913c:	220a      	movs	r2, #10
 800913e:	4658      	mov	r0, fp
 8009140:	f000 f968 	bl	8009414 <__multadd>
 8009144:	4681      	mov	r9, r0
 8009146:	e7ea      	b.n	800911e <_dtoa_r+0xb56>
 8009148:	0800ab50 	.word	0x0800ab50
 800914c:	0800aad4 	.word	0x0800aad4

08009150 <_free_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4605      	mov	r5, r0
 8009154:	2900      	cmp	r1, #0
 8009156:	d041      	beq.n	80091dc <_free_r+0x8c>
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f0c      	subs	r4, r1, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfb8      	it	lt
 8009162:	18e4      	addlt	r4, r4, r3
 8009164:	f000 f8e8 	bl	8009338 <__malloc_lock>
 8009168:	4a1d      	ldr	r2, [pc, #116]	@ (80091e0 <_free_r+0x90>)
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	b933      	cbnz	r3, 800917c <_free_r+0x2c>
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6014      	str	r4, [r2, #0]
 8009172:	4628      	mov	r0, r5
 8009174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009178:	f000 b8e4 	b.w	8009344 <__malloc_unlock>
 800917c:	42a3      	cmp	r3, r4
 800917e:	d908      	bls.n	8009192 <_free_r+0x42>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	1821      	adds	r1, r4, r0
 8009184:	428b      	cmp	r3, r1
 8009186:	bf01      	itttt	eq
 8009188:	6819      	ldreq	r1, [r3, #0]
 800918a:	685b      	ldreq	r3, [r3, #4]
 800918c:	1809      	addeq	r1, r1, r0
 800918e:	6021      	streq	r1, [r4, #0]
 8009190:	e7ed      	b.n	800916e <_free_r+0x1e>
 8009192:	461a      	mov	r2, r3
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b10b      	cbz	r3, 800919c <_free_r+0x4c>
 8009198:	42a3      	cmp	r3, r4
 800919a:	d9fa      	bls.n	8009192 <_free_r+0x42>
 800919c:	6811      	ldr	r1, [r2, #0]
 800919e:	1850      	adds	r0, r2, r1
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	d10b      	bne.n	80091bc <_free_r+0x6c>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	4401      	add	r1, r0
 80091a8:	1850      	adds	r0, r2, r1
 80091aa:	4283      	cmp	r3, r0
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	d1e0      	bne.n	8009172 <_free_r+0x22>
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	6053      	str	r3, [r2, #4]
 80091b6:	4408      	add	r0, r1
 80091b8:	6010      	str	r0, [r2, #0]
 80091ba:	e7da      	b.n	8009172 <_free_r+0x22>
 80091bc:	d902      	bls.n	80091c4 <_free_r+0x74>
 80091be:	230c      	movs	r3, #12
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	e7d6      	b.n	8009172 <_free_r+0x22>
 80091c4:	6820      	ldr	r0, [r4, #0]
 80091c6:	1821      	adds	r1, r4, r0
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf04      	itt	eq
 80091cc:	6819      	ldreq	r1, [r3, #0]
 80091ce:	685b      	ldreq	r3, [r3, #4]
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	bf04      	itt	eq
 80091d4:	1809      	addeq	r1, r1, r0
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	6054      	str	r4, [r2, #4]
 80091da:	e7ca      	b.n	8009172 <_free_r+0x22>
 80091dc:	bd38      	pop	{r3, r4, r5, pc}
 80091de:	bf00      	nop
 80091e0:	200005b4 	.word	0x200005b4

080091e4 <malloc>:
 80091e4:	4b02      	ldr	r3, [pc, #8]	@ (80091f0 <malloc+0xc>)
 80091e6:	4601      	mov	r1, r0
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f000 b825 	b.w	8009238 <_malloc_r>
 80091ee:	bf00      	nop
 80091f0:	20000018 	.word	0x20000018

080091f4 <sbrk_aligned>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009234 <sbrk_aligned+0x40>)
 80091f8:	460c      	mov	r4, r1
 80091fa:	6831      	ldr	r1, [r6, #0]
 80091fc:	4605      	mov	r5, r0
 80091fe:	b911      	cbnz	r1, 8009206 <sbrk_aligned+0x12>
 8009200:	f001 f80c 	bl	800a21c <_sbrk_r>
 8009204:	6030      	str	r0, [r6, #0]
 8009206:	4621      	mov	r1, r4
 8009208:	4628      	mov	r0, r5
 800920a:	f001 f807 	bl	800a21c <_sbrk_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d103      	bne.n	800921a <sbrk_aligned+0x26>
 8009212:	f04f 34ff 	mov.w	r4, #4294967295
 8009216:	4620      	mov	r0, r4
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d0f8      	beq.n	8009216 <sbrk_aligned+0x22>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4628      	mov	r0, r5
 8009228:	f000 fff8 	bl	800a21c <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d1f2      	bne.n	8009216 <sbrk_aligned+0x22>
 8009230:	e7ef      	b.n	8009212 <sbrk_aligned+0x1e>
 8009232:	bf00      	nop
 8009234:	200005b0 	.word	0x200005b0

08009238 <_malloc_r>:
 8009238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800923c:	1ccd      	adds	r5, r1, #3
 800923e:	f025 0503 	bic.w	r5, r5, #3
 8009242:	3508      	adds	r5, #8
 8009244:	2d0c      	cmp	r5, #12
 8009246:	bf38      	it	cc
 8009248:	250c      	movcc	r5, #12
 800924a:	2d00      	cmp	r5, #0
 800924c:	4606      	mov	r6, r0
 800924e:	db01      	blt.n	8009254 <_malloc_r+0x1c>
 8009250:	42a9      	cmp	r1, r5
 8009252:	d904      	bls.n	800925e <_malloc_r+0x26>
 8009254:	230c      	movs	r3, #12
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	2000      	movs	r0, #0
 800925a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009334 <_malloc_r+0xfc>
 8009262:	f000 f869 	bl	8009338 <__malloc_lock>
 8009266:	f8d8 3000 	ldr.w	r3, [r8]
 800926a:	461c      	mov	r4, r3
 800926c:	bb44      	cbnz	r4, 80092c0 <_malloc_r+0x88>
 800926e:	4629      	mov	r1, r5
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff ffbf 	bl	80091f4 <sbrk_aligned>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	4604      	mov	r4, r0
 800927a:	d158      	bne.n	800932e <_malloc_r+0xf6>
 800927c:	f8d8 4000 	ldr.w	r4, [r8]
 8009280:	4627      	mov	r7, r4
 8009282:	2f00      	cmp	r7, #0
 8009284:	d143      	bne.n	800930e <_malloc_r+0xd6>
 8009286:	2c00      	cmp	r4, #0
 8009288:	d04b      	beq.n	8009322 <_malloc_r+0xea>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	4639      	mov	r1, r7
 800928e:	4630      	mov	r0, r6
 8009290:	eb04 0903 	add.w	r9, r4, r3
 8009294:	f000 ffc2 	bl	800a21c <_sbrk_r>
 8009298:	4581      	cmp	r9, r0
 800929a:	d142      	bne.n	8009322 <_malloc_r+0xea>
 800929c:	6821      	ldr	r1, [r4, #0]
 800929e:	1a6d      	subs	r5, r5, r1
 80092a0:	4629      	mov	r1, r5
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ffa6 	bl	80091f4 <sbrk_aligned>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d03a      	beq.n	8009322 <_malloc_r+0xea>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	442b      	add	r3, r5
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	f8d8 3000 	ldr.w	r3, [r8]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	bb62      	cbnz	r2, 8009314 <_malloc_r+0xdc>
 80092ba:	f8c8 7000 	str.w	r7, [r8]
 80092be:	e00f      	b.n	80092e0 <_malloc_r+0xa8>
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	1b52      	subs	r2, r2, r5
 80092c4:	d420      	bmi.n	8009308 <_malloc_r+0xd0>
 80092c6:	2a0b      	cmp	r2, #11
 80092c8:	d917      	bls.n	80092fa <_malloc_r+0xc2>
 80092ca:	1961      	adds	r1, r4, r5
 80092cc:	42a3      	cmp	r3, r4
 80092ce:	6025      	str	r5, [r4, #0]
 80092d0:	bf18      	it	ne
 80092d2:	6059      	strne	r1, [r3, #4]
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	bf08      	it	eq
 80092d8:	f8c8 1000 	streq.w	r1, [r8]
 80092dc:	5162      	str	r2, [r4, r5]
 80092de:	604b      	str	r3, [r1, #4]
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 f82f 	bl	8009344 <__malloc_unlock>
 80092e6:	f104 000b 	add.w	r0, r4, #11
 80092ea:	1d23      	adds	r3, r4, #4
 80092ec:	f020 0007 	bic.w	r0, r0, #7
 80092f0:	1ac2      	subs	r2, r0, r3
 80092f2:	bf1c      	itt	ne
 80092f4:	1a1b      	subne	r3, r3, r0
 80092f6:	50a3      	strne	r3, [r4, r2]
 80092f8:	e7af      	b.n	800925a <_malloc_r+0x22>
 80092fa:	6862      	ldr	r2, [r4, #4]
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	bf0c      	ite	eq
 8009300:	f8c8 2000 	streq.w	r2, [r8]
 8009304:	605a      	strne	r2, [r3, #4]
 8009306:	e7eb      	b.n	80092e0 <_malloc_r+0xa8>
 8009308:	4623      	mov	r3, r4
 800930a:	6864      	ldr	r4, [r4, #4]
 800930c:	e7ae      	b.n	800926c <_malloc_r+0x34>
 800930e:	463c      	mov	r4, r7
 8009310:	687f      	ldr	r7, [r7, #4]
 8009312:	e7b6      	b.n	8009282 <_malloc_r+0x4a>
 8009314:	461a      	mov	r2, r3
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	42a3      	cmp	r3, r4
 800931a:	d1fb      	bne.n	8009314 <_malloc_r+0xdc>
 800931c:	2300      	movs	r3, #0
 800931e:	6053      	str	r3, [r2, #4]
 8009320:	e7de      	b.n	80092e0 <_malloc_r+0xa8>
 8009322:	230c      	movs	r3, #12
 8009324:	6033      	str	r3, [r6, #0]
 8009326:	4630      	mov	r0, r6
 8009328:	f000 f80c 	bl	8009344 <__malloc_unlock>
 800932c:	e794      	b.n	8009258 <_malloc_r+0x20>
 800932e:	6005      	str	r5, [r0, #0]
 8009330:	e7d6      	b.n	80092e0 <_malloc_r+0xa8>
 8009332:	bf00      	nop
 8009334:	200005b4 	.word	0x200005b4

08009338 <__malloc_lock>:
 8009338:	4801      	ldr	r0, [pc, #4]	@ (8009340 <__malloc_lock+0x8>)
 800933a:	f7ff b8b8 	b.w	80084ae <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	200005ac 	.word	0x200005ac

08009344 <__malloc_unlock>:
 8009344:	4801      	ldr	r0, [pc, #4]	@ (800934c <__malloc_unlock+0x8>)
 8009346:	f7ff b8b3 	b.w	80084b0 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	200005ac 	.word	0x200005ac

08009350 <_Balloc>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	69c6      	ldr	r6, [r0, #28]
 8009354:	4604      	mov	r4, r0
 8009356:	460d      	mov	r5, r1
 8009358:	b976      	cbnz	r6, 8009378 <_Balloc+0x28>
 800935a:	2010      	movs	r0, #16
 800935c:	f7ff ff42 	bl	80091e4 <malloc>
 8009360:	4602      	mov	r2, r0
 8009362:	61e0      	str	r0, [r4, #28]
 8009364:	b920      	cbnz	r0, 8009370 <_Balloc+0x20>
 8009366:	4b18      	ldr	r3, [pc, #96]	@ (80093c8 <_Balloc+0x78>)
 8009368:	4818      	ldr	r0, [pc, #96]	@ (80093cc <_Balloc+0x7c>)
 800936a:	216b      	movs	r1, #107	@ 0x6b
 800936c:	f000 ff74 	bl	800a258 <__assert_func>
 8009370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009374:	6006      	str	r6, [r0, #0]
 8009376:	60c6      	str	r6, [r0, #12]
 8009378:	69e6      	ldr	r6, [r4, #28]
 800937a:	68f3      	ldr	r3, [r6, #12]
 800937c:	b183      	cbz	r3, 80093a0 <_Balloc+0x50>
 800937e:	69e3      	ldr	r3, [r4, #28]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009386:	b9b8      	cbnz	r0, 80093b8 <_Balloc+0x68>
 8009388:	2101      	movs	r1, #1
 800938a:	fa01 f605 	lsl.w	r6, r1, r5
 800938e:	1d72      	adds	r2, r6, #5
 8009390:	0092      	lsls	r2, r2, #2
 8009392:	4620      	mov	r0, r4
 8009394:	f000 ff7e 	bl	800a294 <_calloc_r>
 8009398:	b160      	cbz	r0, 80093b4 <_Balloc+0x64>
 800939a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800939e:	e00e      	b.n	80093be <_Balloc+0x6e>
 80093a0:	2221      	movs	r2, #33	@ 0x21
 80093a2:	2104      	movs	r1, #4
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 ff75 	bl	800a294 <_calloc_r>
 80093aa:	69e3      	ldr	r3, [r4, #28]
 80093ac:	60f0      	str	r0, [r6, #12]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e4      	bne.n	800937e <_Balloc+0x2e>
 80093b4:	2000      	movs	r0, #0
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	6802      	ldr	r2, [r0, #0]
 80093ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093be:	2300      	movs	r3, #0
 80093c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093c4:	e7f7      	b.n	80093b6 <_Balloc+0x66>
 80093c6:	bf00      	nop
 80093c8:	0800aae1 	.word	0x0800aae1
 80093cc:	0800ab61 	.word	0x0800ab61

080093d0 <_Bfree>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	69c6      	ldr	r6, [r0, #28]
 80093d4:	4605      	mov	r5, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	b976      	cbnz	r6, 80093f8 <_Bfree+0x28>
 80093da:	2010      	movs	r0, #16
 80093dc:	f7ff ff02 	bl	80091e4 <malloc>
 80093e0:	4602      	mov	r2, r0
 80093e2:	61e8      	str	r0, [r5, #28]
 80093e4:	b920      	cbnz	r0, 80093f0 <_Bfree+0x20>
 80093e6:	4b09      	ldr	r3, [pc, #36]	@ (800940c <_Bfree+0x3c>)
 80093e8:	4809      	ldr	r0, [pc, #36]	@ (8009410 <_Bfree+0x40>)
 80093ea:	218f      	movs	r1, #143	@ 0x8f
 80093ec:	f000 ff34 	bl	800a258 <__assert_func>
 80093f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093f4:	6006      	str	r6, [r0, #0]
 80093f6:	60c6      	str	r6, [r0, #12]
 80093f8:	b13c      	cbz	r4, 800940a <_Bfree+0x3a>
 80093fa:	69eb      	ldr	r3, [r5, #28]
 80093fc:	6862      	ldr	r2, [r4, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009404:	6021      	str	r1, [r4, #0]
 8009406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	0800aae1 	.word	0x0800aae1
 8009410:	0800ab61 	.word	0x0800ab61

08009414 <__multadd>:
 8009414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009418:	690d      	ldr	r5, [r1, #16]
 800941a:	4607      	mov	r7, r0
 800941c:	460c      	mov	r4, r1
 800941e:	461e      	mov	r6, r3
 8009420:	f101 0c14 	add.w	ip, r1, #20
 8009424:	2000      	movs	r0, #0
 8009426:	f8dc 3000 	ldr.w	r3, [ip]
 800942a:	b299      	uxth	r1, r3
 800942c:	fb02 6101 	mla	r1, r2, r1, r6
 8009430:	0c1e      	lsrs	r6, r3, #16
 8009432:	0c0b      	lsrs	r3, r1, #16
 8009434:	fb02 3306 	mla	r3, r2, r6, r3
 8009438:	b289      	uxth	r1, r1
 800943a:	3001      	adds	r0, #1
 800943c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009440:	4285      	cmp	r5, r0
 8009442:	f84c 1b04 	str.w	r1, [ip], #4
 8009446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800944a:	dcec      	bgt.n	8009426 <__multadd+0x12>
 800944c:	b30e      	cbz	r6, 8009492 <__multadd+0x7e>
 800944e:	68a3      	ldr	r3, [r4, #8]
 8009450:	42ab      	cmp	r3, r5
 8009452:	dc19      	bgt.n	8009488 <__multadd+0x74>
 8009454:	6861      	ldr	r1, [r4, #4]
 8009456:	4638      	mov	r0, r7
 8009458:	3101      	adds	r1, #1
 800945a:	f7ff ff79 	bl	8009350 <_Balloc>
 800945e:	4680      	mov	r8, r0
 8009460:	b928      	cbnz	r0, 800946e <__multadd+0x5a>
 8009462:	4602      	mov	r2, r0
 8009464:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <__multadd+0x84>)
 8009466:	480d      	ldr	r0, [pc, #52]	@ (800949c <__multadd+0x88>)
 8009468:	21ba      	movs	r1, #186	@ 0xba
 800946a:	f000 fef5 	bl	800a258 <__assert_func>
 800946e:	6922      	ldr	r2, [r4, #16]
 8009470:	3202      	adds	r2, #2
 8009472:	f104 010c 	add.w	r1, r4, #12
 8009476:	0092      	lsls	r2, r2, #2
 8009478:	300c      	adds	r0, #12
 800947a:	f000 fedf 	bl	800a23c <memcpy>
 800947e:	4621      	mov	r1, r4
 8009480:	4638      	mov	r0, r7
 8009482:	f7ff ffa5 	bl	80093d0 <_Bfree>
 8009486:	4644      	mov	r4, r8
 8009488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800948c:	3501      	adds	r5, #1
 800948e:	615e      	str	r6, [r3, #20]
 8009490:	6125      	str	r5, [r4, #16]
 8009492:	4620      	mov	r0, r4
 8009494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009498:	0800ab50 	.word	0x0800ab50
 800949c:	0800ab61 	.word	0x0800ab61

080094a0 <__hi0bits>:
 80094a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094a4:	4603      	mov	r3, r0
 80094a6:	bf36      	itet	cc
 80094a8:	0403      	lslcc	r3, r0, #16
 80094aa:	2000      	movcs	r0, #0
 80094ac:	2010      	movcc	r0, #16
 80094ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094b2:	bf3c      	itt	cc
 80094b4:	021b      	lslcc	r3, r3, #8
 80094b6:	3008      	addcc	r0, #8
 80094b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094bc:	bf3c      	itt	cc
 80094be:	011b      	lslcc	r3, r3, #4
 80094c0:	3004      	addcc	r0, #4
 80094c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c6:	bf3c      	itt	cc
 80094c8:	009b      	lslcc	r3, r3, #2
 80094ca:	3002      	addcc	r0, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	db05      	blt.n	80094dc <__hi0bits+0x3c>
 80094d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80094d4:	f100 0001 	add.w	r0, r0, #1
 80094d8:	bf08      	it	eq
 80094da:	2020      	moveq	r0, #32
 80094dc:	4770      	bx	lr

080094de <__lo0bits>:
 80094de:	6803      	ldr	r3, [r0, #0]
 80094e0:	4602      	mov	r2, r0
 80094e2:	f013 0007 	ands.w	r0, r3, #7
 80094e6:	d00b      	beq.n	8009500 <__lo0bits+0x22>
 80094e8:	07d9      	lsls	r1, r3, #31
 80094ea:	d421      	bmi.n	8009530 <__lo0bits+0x52>
 80094ec:	0798      	lsls	r0, r3, #30
 80094ee:	bf49      	itett	mi
 80094f0:	085b      	lsrmi	r3, r3, #1
 80094f2:	089b      	lsrpl	r3, r3, #2
 80094f4:	2001      	movmi	r0, #1
 80094f6:	6013      	strmi	r3, [r2, #0]
 80094f8:	bf5c      	itt	pl
 80094fa:	6013      	strpl	r3, [r2, #0]
 80094fc:	2002      	movpl	r0, #2
 80094fe:	4770      	bx	lr
 8009500:	b299      	uxth	r1, r3
 8009502:	b909      	cbnz	r1, 8009508 <__lo0bits+0x2a>
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	2010      	movs	r0, #16
 8009508:	b2d9      	uxtb	r1, r3
 800950a:	b909      	cbnz	r1, 8009510 <__lo0bits+0x32>
 800950c:	3008      	adds	r0, #8
 800950e:	0a1b      	lsrs	r3, r3, #8
 8009510:	0719      	lsls	r1, r3, #28
 8009512:	bf04      	itt	eq
 8009514:	091b      	lsreq	r3, r3, #4
 8009516:	3004      	addeq	r0, #4
 8009518:	0799      	lsls	r1, r3, #30
 800951a:	bf04      	itt	eq
 800951c:	089b      	lsreq	r3, r3, #2
 800951e:	3002      	addeq	r0, #2
 8009520:	07d9      	lsls	r1, r3, #31
 8009522:	d403      	bmi.n	800952c <__lo0bits+0x4e>
 8009524:	085b      	lsrs	r3, r3, #1
 8009526:	f100 0001 	add.w	r0, r0, #1
 800952a:	d003      	beq.n	8009534 <__lo0bits+0x56>
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	4770      	bx	lr
 8009530:	2000      	movs	r0, #0
 8009532:	4770      	bx	lr
 8009534:	2020      	movs	r0, #32
 8009536:	4770      	bx	lr

08009538 <__i2b>:
 8009538:	b510      	push	{r4, lr}
 800953a:	460c      	mov	r4, r1
 800953c:	2101      	movs	r1, #1
 800953e:	f7ff ff07 	bl	8009350 <_Balloc>
 8009542:	4602      	mov	r2, r0
 8009544:	b928      	cbnz	r0, 8009552 <__i2b+0x1a>
 8009546:	4b05      	ldr	r3, [pc, #20]	@ (800955c <__i2b+0x24>)
 8009548:	4805      	ldr	r0, [pc, #20]	@ (8009560 <__i2b+0x28>)
 800954a:	f240 1145 	movw	r1, #325	@ 0x145
 800954e:	f000 fe83 	bl	800a258 <__assert_func>
 8009552:	2301      	movs	r3, #1
 8009554:	6144      	str	r4, [r0, #20]
 8009556:	6103      	str	r3, [r0, #16]
 8009558:	bd10      	pop	{r4, pc}
 800955a:	bf00      	nop
 800955c:	0800ab50 	.word	0x0800ab50
 8009560:	0800ab61 	.word	0x0800ab61

08009564 <__multiply>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	4614      	mov	r4, r2
 800956a:	690a      	ldr	r2, [r1, #16]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	429a      	cmp	r2, r3
 8009570:	bfa8      	it	ge
 8009572:	4623      	movge	r3, r4
 8009574:	460f      	mov	r7, r1
 8009576:	bfa4      	itt	ge
 8009578:	460c      	movge	r4, r1
 800957a:	461f      	movge	r7, r3
 800957c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009580:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	6861      	ldr	r1, [r4, #4]
 8009588:	eb0a 0609 	add.w	r6, sl, r9
 800958c:	42b3      	cmp	r3, r6
 800958e:	b085      	sub	sp, #20
 8009590:	bfb8      	it	lt
 8009592:	3101      	addlt	r1, #1
 8009594:	f7ff fedc 	bl	8009350 <_Balloc>
 8009598:	b930      	cbnz	r0, 80095a8 <__multiply+0x44>
 800959a:	4602      	mov	r2, r0
 800959c:	4b44      	ldr	r3, [pc, #272]	@ (80096b0 <__multiply+0x14c>)
 800959e:	4845      	ldr	r0, [pc, #276]	@ (80096b4 <__multiply+0x150>)
 80095a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095a4:	f000 fe58 	bl	800a258 <__assert_func>
 80095a8:	f100 0514 	add.w	r5, r0, #20
 80095ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095b0:	462b      	mov	r3, r5
 80095b2:	2200      	movs	r2, #0
 80095b4:	4543      	cmp	r3, r8
 80095b6:	d321      	bcc.n	80095fc <__multiply+0x98>
 80095b8:	f107 0114 	add.w	r1, r7, #20
 80095bc:	f104 0214 	add.w	r2, r4, #20
 80095c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80095c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	1b13      	subs	r3, r2, r4
 80095cc:	3b15      	subs	r3, #21
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	3304      	adds	r3, #4
 80095d4:	f104 0715 	add.w	r7, r4, #21
 80095d8:	42ba      	cmp	r2, r7
 80095da:	bf38      	it	cc
 80095dc:	2304      	movcc	r3, #4
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	9b02      	ldr	r3, [sp, #8]
 80095e2:	9103      	str	r1, [sp, #12]
 80095e4:	428b      	cmp	r3, r1
 80095e6:	d80c      	bhi.n	8009602 <__multiply+0x9e>
 80095e8:	2e00      	cmp	r6, #0
 80095ea:	dd03      	ble.n	80095f4 <__multiply+0x90>
 80095ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d05b      	beq.n	80096ac <__multiply+0x148>
 80095f4:	6106      	str	r6, [r0, #16]
 80095f6:	b005      	add	sp, #20
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fc:	f843 2b04 	str.w	r2, [r3], #4
 8009600:	e7d8      	b.n	80095b4 <__multiply+0x50>
 8009602:	f8b1 a000 	ldrh.w	sl, [r1]
 8009606:	f1ba 0f00 	cmp.w	sl, #0
 800960a:	d024      	beq.n	8009656 <__multiply+0xf2>
 800960c:	f104 0e14 	add.w	lr, r4, #20
 8009610:	46a9      	mov	r9, r5
 8009612:	f04f 0c00 	mov.w	ip, #0
 8009616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800961a:	f8d9 3000 	ldr.w	r3, [r9]
 800961e:	fa1f fb87 	uxth.w	fp, r7
 8009622:	b29b      	uxth	r3, r3
 8009624:	fb0a 330b 	mla	r3, sl, fp, r3
 8009628:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800962c:	f8d9 7000 	ldr.w	r7, [r9]
 8009630:	4463      	add	r3, ip
 8009632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009636:	fb0a c70b 	mla	r7, sl, fp, ip
 800963a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800963e:	b29b      	uxth	r3, r3
 8009640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009644:	4572      	cmp	r2, lr
 8009646:	f849 3b04 	str.w	r3, [r9], #4
 800964a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800964e:	d8e2      	bhi.n	8009616 <__multiply+0xb2>
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	f845 c003 	str.w	ip, [r5, r3]
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800965c:	3104      	adds	r1, #4
 800965e:	f1b9 0f00 	cmp.w	r9, #0
 8009662:	d021      	beq.n	80096a8 <__multiply+0x144>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	f104 0c14 	add.w	ip, r4, #20
 800966a:	46ae      	mov	lr, r5
 800966c:	f04f 0a00 	mov.w	sl, #0
 8009670:	f8bc b000 	ldrh.w	fp, [ip]
 8009674:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009678:	fb09 770b 	mla	r7, r9, fp, r7
 800967c:	4457      	add	r7, sl
 800967e:	b29b      	uxth	r3, r3
 8009680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009684:	f84e 3b04 	str.w	r3, [lr], #4
 8009688:	f85c 3b04 	ldr.w	r3, [ip], #4
 800968c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009690:	f8be 3000 	ldrh.w	r3, [lr]
 8009694:	fb09 330a 	mla	r3, r9, sl, r3
 8009698:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800969c:	4562      	cmp	r2, ip
 800969e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096a2:	d8e5      	bhi.n	8009670 <__multiply+0x10c>
 80096a4:	9f01      	ldr	r7, [sp, #4]
 80096a6:	51eb      	str	r3, [r5, r7]
 80096a8:	3504      	adds	r5, #4
 80096aa:	e799      	b.n	80095e0 <__multiply+0x7c>
 80096ac:	3e01      	subs	r6, #1
 80096ae:	e79b      	b.n	80095e8 <__multiply+0x84>
 80096b0:	0800ab50 	.word	0x0800ab50
 80096b4:	0800ab61 	.word	0x0800ab61

080096b8 <__pow5mult>:
 80096b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096bc:	4615      	mov	r5, r2
 80096be:	f012 0203 	ands.w	r2, r2, #3
 80096c2:	4607      	mov	r7, r0
 80096c4:	460e      	mov	r6, r1
 80096c6:	d007      	beq.n	80096d8 <__pow5mult+0x20>
 80096c8:	4c25      	ldr	r4, [pc, #148]	@ (8009760 <__pow5mult+0xa8>)
 80096ca:	3a01      	subs	r2, #1
 80096cc:	2300      	movs	r3, #0
 80096ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096d2:	f7ff fe9f 	bl	8009414 <__multadd>
 80096d6:	4606      	mov	r6, r0
 80096d8:	10ad      	asrs	r5, r5, #2
 80096da:	d03d      	beq.n	8009758 <__pow5mult+0xa0>
 80096dc:	69fc      	ldr	r4, [r7, #28]
 80096de:	b97c      	cbnz	r4, 8009700 <__pow5mult+0x48>
 80096e0:	2010      	movs	r0, #16
 80096e2:	f7ff fd7f 	bl	80091e4 <malloc>
 80096e6:	4602      	mov	r2, r0
 80096e8:	61f8      	str	r0, [r7, #28]
 80096ea:	b928      	cbnz	r0, 80096f8 <__pow5mult+0x40>
 80096ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009764 <__pow5mult+0xac>)
 80096ee:	481e      	ldr	r0, [pc, #120]	@ (8009768 <__pow5mult+0xb0>)
 80096f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80096f4:	f000 fdb0 	bl	800a258 <__assert_func>
 80096f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096fc:	6004      	str	r4, [r0, #0]
 80096fe:	60c4      	str	r4, [r0, #12]
 8009700:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009708:	b94c      	cbnz	r4, 800971e <__pow5mult+0x66>
 800970a:	f240 2171 	movw	r1, #625	@ 0x271
 800970e:	4638      	mov	r0, r7
 8009710:	f7ff ff12 	bl	8009538 <__i2b>
 8009714:	2300      	movs	r3, #0
 8009716:	f8c8 0008 	str.w	r0, [r8, #8]
 800971a:	4604      	mov	r4, r0
 800971c:	6003      	str	r3, [r0, #0]
 800971e:	f04f 0900 	mov.w	r9, #0
 8009722:	07eb      	lsls	r3, r5, #31
 8009724:	d50a      	bpl.n	800973c <__pow5mult+0x84>
 8009726:	4631      	mov	r1, r6
 8009728:	4622      	mov	r2, r4
 800972a:	4638      	mov	r0, r7
 800972c:	f7ff ff1a 	bl	8009564 <__multiply>
 8009730:	4631      	mov	r1, r6
 8009732:	4680      	mov	r8, r0
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff fe4b 	bl	80093d0 <_Bfree>
 800973a:	4646      	mov	r6, r8
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	d00b      	beq.n	8009758 <__pow5mult+0xa0>
 8009740:	6820      	ldr	r0, [r4, #0]
 8009742:	b938      	cbnz	r0, 8009754 <__pow5mult+0x9c>
 8009744:	4622      	mov	r2, r4
 8009746:	4621      	mov	r1, r4
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff ff0b 	bl	8009564 <__multiply>
 800974e:	6020      	str	r0, [r4, #0]
 8009750:	f8c0 9000 	str.w	r9, [r0]
 8009754:	4604      	mov	r4, r0
 8009756:	e7e4      	b.n	8009722 <__pow5mult+0x6a>
 8009758:	4630      	mov	r0, r6
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975e:	bf00      	nop
 8009760:	0800abbc 	.word	0x0800abbc
 8009764:	0800aae1 	.word	0x0800aae1
 8009768:	0800ab61 	.word	0x0800ab61

0800976c <__lshift>:
 800976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009770:	460c      	mov	r4, r1
 8009772:	6849      	ldr	r1, [r1, #4]
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800977a:	68a3      	ldr	r3, [r4, #8]
 800977c:	4607      	mov	r7, r0
 800977e:	4691      	mov	r9, r2
 8009780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009784:	f108 0601 	add.w	r6, r8, #1
 8009788:	42b3      	cmp	r3, r6
 800978a:	db0b      	blt.n	80097a4 <__lshift+0x38>
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff fddf 	bl	8009350 <_Balloc>
 8009792:	4605      	mov	r5, r0
 8009794:	b948      	cbnz	r0, 80097aa <__lshift+0x3e>
 8009796:	4602      	mov	r2, r0
 8009798:	4b28      	ldr	r3, [pc, #160]	@ (800983c <__lshift+0xd0>)
 800979a:	4829      	ldr	r0, [pc, #164]	@ (8009840 <__lshift+0xd4>)
 800979c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097a0:	f000 fd5a 	bl	800a258 <__assert_func>
 80097a4:	3101      	adds	r1, #1
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	e7ee      	b.n	8009788 <__lshift+0x1c>
 80097aa:	2300      	movs	r3, #0
 80097ac:	f100 0114 	add.w	r1, r0, #20
 80097b0:	f100 0210 	add.w	r2, r0, #16
 80097b4:	4618      	mov	r0, r3
 80097b6:	4553      	cmp	r3, sl
 80097b8:	db33      	blt.n	8009822 <__lshift+0xb6>
 80097ba:	6920      	ldr	r0, [r4, #16]
 80097bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097c0:	f104 0314 	add.w	r3, r4, #20
 80097c4:	f019 091f 	ands.w	r9, r9, #31
 80097c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097d0:	d02b      	beq.n	800982a <__lshift+0xbe>
 80097d2:	f1c9 0e20 	rsb	lr, r9, #32
 80097d6:	468a      	mov	sl, r1
 80097d8:	2200      	movs	r2, #0
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	fa00 f009 	lsl.w	r0, r0, r9
 80097e0:	4310      	orrs	r0, r2
 80097e2:	f84a 0b04 	str.w	r0, [sl], #4
 80097e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ea:	459c      	cmp	ip, r3
 80097ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80097f0:	d8f3      	bhi.n	80097da <__lshift+0x6e>
 80097f2:	ebac 0304 	sub.w	r3, ip, r4
 80097f6:	3b15      	subs	r3, #21
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	3304      	adds	r3, #4
 80097fe:	f104 0015 	add.w	r0, r4, #21
 8009802:	4584      	cmp	ip, r0
 8009804:	bf38      	it	cc
 8009806:	2304      	movcc	r3, #4
 8009808:	50ca      	str	r2, [r1, r3]
 800980a:	b10a      	cbz	r2, 8009810 <__lshift+0xa4>
 800980c:	f108 0602 	add.w	r6, r8, #2
 8009810:	3e01      	subs	r6, #1
 8009812:	4638      	mov	r0, r7
 8009814:	612e      	str	r6, [r5, #16]
 8009816:	4621      	mov	r1, r4
 8009818:	f7ff fdda 	bl	80093d0 <_Bfree>
 800981c:	4628      	mov	r0, r5
 800981e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009822:	f842 0f04 	str.w	r0, [r2, #4]!
 8009826:	3301      	adds	r3, #1
 8009828:	e7c5      	b.n	80097b6 <__lshift+0x4a>
 800982a:	3904      	subs	r1, #4
 800982c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009830:	f841 2f04 	str.w	r2, [r1, #4]!
 8009834:	459c      	cmp	ip, r3
 8009836:	d8f9      	bhi.n	800982c <__lshift+0xc0>
 8009838:	e7ea      	b.n	8009810 <__lshift+0xa4>
 800983a:	bf00      	nop
 800983c:	0800ab50 	.word	0x0800ab50
 8009840:	0800ab61 	.word	0x0800ab61

08009844 <__mcmp>:
 8009844:	690a      	ldr	r2, [r1, #16]
 8009846:	4603      	mov	r3, r0
 8009848:	6900      	ldr	r0, [r0, #16]
 800984a:	1a80      	subs	r0, r0, r2
 800984c:	b530      	push	{r4, r5, lr}
 800984e:	d10e      	bne.n	800986e <__mcmp+0x2a>
 8009850:	3314      	adds	r3, #20
 8009852:	3114      	adds	r1, #20
 8009854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800985c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009864:	4295      	cmp	r5, r2
 8009866:	d003      	beq.n	8009870 <__mcmp+0x2c>
 8009868:	d205      	bcs.n	8009876 <__mcmp+0x32>
 800986a:	f04f 30ff 	mov.w	r0, #4294967295
 800986e:	bd30      	pop	{r4, r5, pc}
 8009870:	42a3      	cmp	r3, r4
 8009872:	d3f3      	bcc.n	800985c <__mcmp+0x18>
 8009874:	e7fb      	b.n	800986e <__mcmp+0x2a>
 8009876:	2001      	movs	r0, #1
 8009878:	e7f9      	b.n	800986e <__mcmp+0x2a>
	...

0800987c <__mdiff>:
 800987c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	4689      	mov	r9, r1
 8009882:	4606      	mov	r6, r0
 8009884:	4611      	mov	r1, r2
 8009886:	4648      	mov	r0, r9
 8009888:	4614      	mov	r4, r2
 800988a:	f7ff ffdb 	bl	8009844 <__mcmp>
 800988e:	1e05      	subs	r5, r0, #0
 8009890:	d112      	bne.n	80098b8 <__mdiff+0x3c>
 8009892:	4629      	mov	r1, r5
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff fd5b 	bl	8009350 <_Balloc>
 800989a:	4602      	mov	r2, r0
 800989c:	b928      	cbnz	r0, 80098aa <__mdiff+0x2e>
 800989e:	4b3f      	ldr	r3, [pc, #252]	@ (800999c <__mdiff+0x120>)
 80098a0:	f240 2137 	movw	r1, #567	@ 0x237
 80098a4:	483e      	ldr	r0, [pc, #248]	@ (80099a0 <__mdiff+0x124>)
 80098a6:	f000 fcd7 	bl	800a258 <__assert_func>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098b0:	4610      	mov	r0, r2
 80098b2:	b003      	add	sp, #12
 80098b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b8:	bfbc      	itt	lt
 80098ba:	464b      	movlt	r3, r9
 80098bc:	46a1      	movlt	r9, r4
 80098be:	4630      	mov	r0, r6
 80098c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098c4:	bfba      	itte	lt
 80098c6:	461c      	movlt	r4, r3
 80098c8:	2501      	movlt	r5, #1
 80098ca:	2500      	movge	r5, #0
 80098cc:	f7ff fd40 	bl	8009350 <_Balloc>
 80098d0:	4602      	mov	r2, r0
 80098d2:	b918      	cbnz	r0, 80098dc <__mdiff+0x60>
 80098d4:	4b31      	ldr	r3, [pc, #196]	@ (800999c <__mdiff+0x120>)
 80098d6:	f240 2145 	movw	r1, #581	@ 0x245
 80098da:	e7e3      	b.n	80098a4 <__mdiff+0x28>
 80098dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80098e0:	6926      	ldr	r6, [r4, #16]
 80098e2:	60c5      	str	r5, [r0, #12]
 80098e4:	f109 0310 	add.w	r3, r9, #16
 80098e8:	f109 0514 	add.w	r5, r9, #20
 80098ec:	f104 0e14 	add.w	lr, r4, #20
 80098f0:	f100 0b14 	add.w	fp, r0, #20
 80098f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80098f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	46d9      	mov	r9, fp
 8009900:	f04f 0c00 	mov.w	ip, #0
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	f85e 0b04 	ldr.w	r0, [lr], #4
 800990a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	fa1f f38a 	uxth.w	r3, sl
 8009914:	4619      	mov	r1, r3
 8009916:	b283      	uxth	r3, r0
 8009918:	1acb      	subs	r3, r1, r3
 800991a:	0c00      	lsrs	r0, r0, #16
 800991c:	4463      	add	r3, ip
 800991e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800992c:	4576      	cmp	r6, lr
 800992e:	f849 3b04 	str.w	r3, [r9], #4
 8009932:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009936:	d8e5      	bhi.n	8009904 <__mdiff+0x88>
 8009938:	1b33      	subs	r3, r6, r4
 800993a:	3b15      	subs	r3, #21
 800993c:	f023 0303 	bic.w	r3, r3, #3
 8009940:	3415      	adds	r4, #21
 8009942:	3304      	adds	r3, #4
 8009944:	42a6      	cmp	r6, r4
 8009946:	bf38      	it	cc
 8009948:	2304      	movcc	r3, #4
 800994a:	441d      	add	r5, r3
 800994c:	445b      	add	r3, fp
 800994e:	461e      	mov	r6, r3
 8009950:	462c      	mov	r4, r5
 8009952:	4544      	cmp	r4, r8
 8009954:	d30e      	bcc.n	8009974 <__mdiff+0xf8>
 8009956:	f108 0103 	add.w	r1, r8, #3
 800995a:	1b49      	subs	r1, r1, r5
 800995c:	f021 0103 	bic.w	r1, r1, #3
 8009960:	3d03      	subs	r5, #3
 8009962:	45a8      	cmp	r8, r5
 8009964:	bf38      	it	cc
 8009966:	2100      	movcc	r1, #0
 8009968:	440b      	add	r3, r1
 800996a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800996e:	b191      	cbz	r1, 8009996 <__mdiff+0x11a>
 8009970:	6117      	str	r7, [r2, #16]
 8009972:	e79d      	b.n	80098b0 <__mdiff+0x34>
 8009974:	f854 1b04 	ldr.w	r1, [r4], #4
 8009978:	46e6      	mov	lr, ip
 800997a:	0c08      	lsrs	r0, r1, #16
 800997c:	fa1c fc81 	uxtah	ip, ip, r1
 8009980:	4471      	add	r1, lr
 8009982:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009986:	b289      	uxth	r1, r1
 8009988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800998c:	f846 1b04 	str.w	r1, [r6], #4
 8009990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009994:	e7dd      	b.n	8009952 <__mdiff+0xd6>
 8009996:	3f01      	subs	r7, #1
 8009998:	e7e7      	b.n	800996a <__mdiff+0xee>
 800999a:	bf00      	nop
 800999c:	0800ab50 	.word	0x0800ab50
 80099a0:	0800ab61 	.word	0x0800ab61

080099a4 <__d2b>:
 80099a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099a8:	460f      	mov	r7, r1
 80099aa:	2101      	movs	r1, #1
 80099ac:	ec59 8b10 	vmov	r8, r9, d0
 80099b0:	4616      	mov	r6, r2
 80099b2:	f7ff fccd 	bl	8009350 <_Balloc>
 80099b6:	4604      	mov	r4, r0
 80099b8:	b930      	cbnz	r0, 80099c8 <__d2b+0x24>
 80099ba:	4602      	mov	r2, r0
 80099bc:	4b23      	ldr	r3, [pc, #140]	@ (8009a4c <__d2b+0xa8>)
 80099be:	4824      	ldr	r0, [pc, #144]	@ (8009a50 <__d2b+0xac>)
 80099c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80099c4:	f000 fc48 	bl	800a258 <__assert_func>
 80099c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099d0:	b10d      	cbz	r5, 80099d6 <__d2b+0x32>
 80099d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	f1b8 0300 	subs.w	r3, r8, #0
 80099dc:	d023      	beq.n	8009a26 <__d2b+0x82>
 80099de:	4668      	mov	r0, sp
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	f7ff fd7c 	bl	80094de <__lo0bits>
 80099e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099ea:	b1d0      	cbz	r0, 8009a22 <__d2b+0x7e>
 80099ec:	f1c0 0320 	rsb	r3, r0, #32
 80099f0:	fa02 f303 	lsl.w	r3, r2, r3
 80099f4:	430b      	orrs	r3, r1
 80099f6:	40c2      	lsrs	r2, r0
 80099f8:	6163      	str	r3, [r4, #20]
 80099fa:	9201      	str	r2, [sp, #4]
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	61a3      	str	r3, [r4, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bf0c      	ite	eq
 8009a04:	2201      	moveq	r2, #1
 8009a06:	2202      	movne	r2, #2
 8009a08:	6122      	str	r2, [r4, #16]
 8009a0a:	b1a5      	cbz	r5, 8009a36 <__d2b+0x92>
 8009a0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a10:	4405      	add	r5, r0
 8009a12:	603d      	str	r5, [r7, #0]
 8009a14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a18:	6030      	str	r0, [r6, #0]
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	b003      	add	sp, #12
 8009a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a22:	6161      	str	r1, [r4, #20]
 8009a24:	e7ea      	b.n	80099fc <__d2b+0x58>
 8009a26:	a801      	add	r0, sp, #4
 8009a28:	f7ff fd59 	bl	80094de <__lo0bits>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	6163      	str	r3, [r4, #20]
 8009a30:	3020      	adds	r0, #32
 8009a32:	2201      	movs	r2, #1
 8009a34:	e7e8      	b.n	8009a08 <__d2b+0x64>
 8009a36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a3e:	6038      	str	r0, [r7, #0]
 8009a40:	6918      	ldr	r0, [r3, #16]
 8009a42:	f7ff fd2d 	bl	80094a0 <__hi0bits>
 8009a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a4a:	e7e5      	b.n	8009a18 <__d2b+0x74>
 8009a4c:	0800ab50 	.word	0x0800ab50
 8009a50:	0800ab61 	.word	0x0800ab61

08009a54 <__ssputs_r>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	688e      	ldr	r6, [r1, #8]
 8009a5a:	461f      	mov	r7, r3
 8009a5c:	42be      	cmp	r6, r7
 8009a5e:	680b      	ldr	r3, [r1, #0]
 8009a60:	4682      	mov	sl, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4690      	mov	r8, r2
 8009a66:	d82d      	bhi.n	8009ac4 <__ssputs_r+0x70>
 8009a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a70:	d026      	beq.n	8009ac0 <__ssputs_r+0x6c>
 8009a72:	6965      	ldr	r5, [r4, #20]
 8009a74:	6909      	ldr	r1, [r1, #16]
 8009a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a7a:	eba3 0901 	sub.w	r9, r3, r1
 8009a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a82:	1c7b      	adds	r3, r7, #1
 8009a84:	444b      	add	r3, r9
 8009a86:	106d      	asrs	r5, r5, #1
 8009a88:	429d      	cmp	r5, r3
 8009a8a:	bf38      	it	cc
 8009a8c:	461d      	movcc	r5, r3
 8009a8e:	0553      	lsls	r3, r2, #21
 8009a90:	d527      	bpl.n	8009ae2 <__ssputs_r+0x8e>
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7ff fbd0 	bl	8009238 <_malloc_r>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	b360      	cbz	r0, 8009af6 <__ssputs_r+0xa2>
 8009a9c:	6921      	ldr	r1, [r4, #16]
 8009a9e:	464a      	mov	r2, r9
 8009aa0:	f000 fbcc 	bl	800a23c <memcpy>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	6126      	str	r6, [r4, #16]
 8009ab2:	6165      	str	r5, [r4, #20]
 8009ab4:	444e      	add	r6, r9
 8009ab6:	eba5 0509 	sub.w	r5, r5, r9
 8009aba:	6026      	str	r6, [r4, #0]
 8009abc:	60a5      	str	r5, [r4, #8]
 8009abe:	463e      	mov	r6, r7
 8009ac0:	42be      	cmp	r6, r7
 8009ac2:	d900      	bls.n	8009ac6 <__ssputs_r+0x72>
 8009ac4:	463e      	mov	r6, r7
 8009ac6:	6820      	ldr	r0, [r4, #0]
 8009ac8:	4632      	mov	r2, r6
 8009aca:	4641      	mov	r1, r8
 8009acc:	f000 fb6a 	bl	800a1a4 <memmove>
 8009ad0:	68a3      	ldr	r3, [r4, #8]
 8009ad2:	1b9b      	subs	r3, r3, r6
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4433      	add	r3, r6
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	2000      	movs	r0, #0
 8009ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	f000 fbfc 	bl	800a2e0 <_realloc_r>
 8009ae8:	4606      	mov	r6, r0
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1e0      	bne.n	8009ab0 <__ssputs_r+0x5c>
 8009aee:	6921      	ldr	r1, [r4, #16]
 8009af0:	4650      	mov	r0, sl
 8009af2:	f7ff fb2d 	bl	8009150 <_free_r>
 8009af6:	230c      	movs	r3, #12
 8009af8:	f8ca 3000 	str.w	r3, [sl]
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	e7e9      	b.n	8009ade <__ssputs_r+0x8a>
	...

08009b0c <_svfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4698      	mov	r8, r3
 8009b12:	898b      	ldrh	r3, [r1, #12]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	b09d      	sub	sp, #116	@ 0x74
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	d510      	bpl.n	8009b42 <_svfiprintf_r+0x36>
 8009b20:	690b      	ldr	r3, [r1, #16]
 8009b22:	b973      	cbnz	r3, 8009b42 <_svfiprintf_r+0x36>
 8009b24:	2140      	movs	r1, #64	@ 0x40
 8009b26:	f7ff fb87 	bl	8009238 <_malloc_r>
 8009b2a:	6028      	str	r0, [r5, #0]
 8009b2c:	6128      	str	r0, [r5, #16]
 8009b2e:	b930      	cbnz	r0, 8009b3e <_svfiprintf_r+0x32>
 8009b30:	230c      	movs	r3, #12
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	b01d      	add	sp, #116	@ 0x74
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	2340      	movs	r3, #64	@ 0x40
 8009b40:	616b      	str	r3, [r5, #20]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b46:	2320      	movs	r3, #32
 8009b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b50:	2330      	movs	r3, #48	@ 0x30
 8009b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009cf0 <_svfiprintf_r+0x1e4>
 8009b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b5a:	f04f 0901 	mov.w	r9, #1
 8009b5e:	4623      	mov	r3, r4
 8009b60:	469a      	mov	sl, r3
 8009b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b66:	b10a      	cbz	r2, 8009b6c <_svfiprintf_r+0x60>
 8009b68:	2a25      	cmp	r2, #37	@ 0x25
 8009b6a:	d1f9      	bne.n	8009b60 <_svfiprintf_r+0x54>
 8009b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b70:	d00b      	beq.n	8009b8a <_svfiprintf_r+0x7e>
 8009b72:	465b      	mov	r3, fp
 8009b74:	4622      	mov	r2, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7ff ff6b 	bl	8009a54 <__ssputs_r>
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f000 80a7 	beq.w	8009cd2 <_svfiprintf_r+0x1c6>
 8009b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b86:	445a      	add	r2, fp
 8009b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 809f 	beq.w	8009cd2 <_svfiprintf_r+0x1c6>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	9307      	str	r3, [sp, #28]
 8009ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bac:	4654      	mov	r4, sl
 8009bae:	2205      	movs	r2, #5
 8009bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb4:	484e      	ldr	r0, [pc, #312]	@ (8009cf0 <_svfiprintf_r+0x1e4>)
 8009bb6:	f7f6 fb33 	bl	8000220 <memchr>
 8009bba:	9a04      	ldr	r2, [sp, #16]
 8009bbc:	b9d8      	cbnz	r0, 8009bf6 <_svfiprintf_r+0xea>
 8009bbe:	06d0      	lsls	r0, r2, #27
 8009bc0:	bf44      	itt	mi
 8009bc2:	2320      	movmi	r3, #32
 8009bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bc8:	0711      	lsls	r1, r2, #28
 8009bca:	bf44      	itt	mi
 8009bcc:	232b      	movmi	r3, #43	@ 0x2b
 8009bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bd8:	d015      	beq.n	8009c06 <_svfiprintf_r+0xfa>
 8009bda:	9a07      	ldr	r2, [sp, #28]
 8009bdc:	4654      	mov	r4, sl
 8009bde:	2000      	movs	r0, #0
 8009be0:	f04f 0c0a 	mov.w	ip, #10
 8009be4:	4621      	mov	r1, r4
 8009be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bea:	3b30      	subs	r3, #48	@ 0x30
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	d94b      	bls.n	8009c88 <_svfiprintf_r+0x17c>
 8009bf0:	b1b0      	cbz	r0, 8009c20 <_svfiprintf_r+0x114>
 8009bf2:	9207      	str	r2, [sp, #28]
 8009bf4:	e014      	b.n	8009c20 <_svfiprintf_r+0x114>
 8009bf6:	eba0 0308 	sub.w	r3, r0, r8
 8009bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	9304      	str	r3, [sp, #16]
 8009c02:	46a2      	mov	sl, r4
 8009c04:	e7d2      	b.n	8009bac <_svfiprintf_r+0xa0>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	1d19      	adds	r1, r3, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	9103      	str	r1, [sp, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bfbb      	ittet	lt
 8009c12:	425b      	neglt	r3, r3
 8009c14:	f042 0202 	orrlt.w	r2, r2, #2
 8009c18:	9307      	strge	r3, [sp, #28]
 8009c1a:	9307      	strlt	r3, [sp, #28]
 8009c1c:	bfb8      	it	lt
 8009c1e:	9204      	strlt	r2, [sp, #16]
 8009c20:	7823      	ldrb	r3, [r4, #0]
 8009c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c24:	d10a      	bne.n	8009c3c <_svfiprintf_r+0x130>
 8009c26:	7863      	ldrb	r3, [r4, #1]
 8009c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2a:	d132      	bne.n	8009c92 <_svfiprintf_r+0x186>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	1d1a      	adds	r2, r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	9203      	str	r2, [sp, #12]
 8009c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c38:	3402      	adds	r4, #2
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d00 <_svfiprintf_r+0x1f4>
 8009c40:	7821      	ldrb	r1, [r4, #0]
 8009c42:	2203      	movs	r2, #3
 8009c44:	4650      	mov	r0, sl
 8009c46:	f7f6 faeb 	bl	8000220 <memchr>
 8009c4a:	b138      	cbz	r0, 8009c5c <_svfiprintf_r+0x150>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	eba0 000a 	sub.w	r0, r0, sl
 8009c52:	2240      	movs	r2, #64	@ 0x40
 8009c54:	4082      	lsls	r2, r0
 8009c56:	4313      	orrs	r3, r2
 8009c58:	3401      	adds	r4, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	4824      	ldr	r0, [pc, #144]	@ (8009cf4 <_svfiprintf_r+0x1e8>)
 8009c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c66:	2206      	movs	r2, #6
 8009c68:	f7f6 fada 	bl	8000220 <memchr>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d036      	beq.n	8009cde <_svfiprintf_r+0x1d2>
 8009c70:	4b21      	ldr	r3, [pc, #132]	@ (8009cf8 <_svfiprintf_r+0x1ec>)
 8009c72:	bb1b      	cbnz	r3, 8009cbc <_svfiprintf_r+0x1b0>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	3307      	adds	r3, #7
 8009c78:	f023 0307 	bic.w	r3, r3, #7
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c82:	4433      	add	r3, r6
 8009c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c86:	e76a      	b.n	8009b5e <_svfiprintf_r+0x52>
 8009c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	2001      	movs	r0, #1
 8009c90:	e7a8      	b.n	8009be4 <_svfiprintf_r+0xd8>
 8009c92:	2300      	movs	r3, #0
 8009c94:	3401      	adds	r4, #1
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f04f 0c0a 	mov.w	ip, #10
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca4:	3a30      	subs	r2, #48	@ 0x30
 8009ca6:	2a09      	cmp	r2, #9
 8009ca8:	d903      	bls.n	8009cb2 <_svfiprintf_r+0x1a6>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c6      	beq.n	8009c3c <_svfiprintf_r+0x130>
 8009cae:	9105      	str	r1, [sp, #20]
 8009cb0:	e7c4      	b.n	8009c3c <_svfiprintf_r+0x130>
 8009cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7f0      	b.n	8009c9e <_svfiprintf_r+0x192>
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8009cfc <_svfiprintf_r+0x1f0>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f7fd fda4 	bl	8007814 <_printf_float>
 8009ccc:	1c42      	adds	r2, r0, #1
 8009cce:	4606      	mov	r6, r0
 8009cd0:	d1d6      	bne.n	8009c80 <_svfiprintf_r+0x174>
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	065b      	lsls	r3, r3, #25
 8009cd6:	f53f af2d 	bmi.w	8009b34 <_svfiprintf_r+0x28>
 8009cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cdc:	e72c      	b.n	8009b38 <_svfiprintf_r+0x2c>
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <_svfiprintf_r+0x1f0>)
 8009ce6:	a904      	add	r1, sp, #16
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7fe f82b 	bl	8007d44 <_printf_i>
 8009cee:	e7ed      	b.n	8009ccc <_svfiprintf_r+0x1c0>
 8009cf0:	0800acb8 	.word	0x0800acb8
 8009cf4:	0800acc2 	.word	0x0800acc2
 8009cf8:	08007815 	.word	0x08007815
 8009cfc:	08009a55 	.word	0x08009a55
 8009d00:	0800acbe 	.word	0x0800acbe

08009d04 <__sfputc_r>:
 8009d04:	6893      	ldr	r3, [r2, #8]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	b410      	push	{r4}
 8009d0c:	6093      	str	r3, [r2, #8]
 8009d0e:	da08      	bge.n	8009d22 <__sfputc_r+0x1e>
 8009d10:	6994      	ldr	r4, [r2, #24]
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	db01      	blt.n	8009d1a <__sfputc_r+0x16>
 8009d16:	290a      	cmp	r1, #10
 8009d18:	d103      	bne.n	8009d22 <__sfputc_r+0x1e>
 8009d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d1e:	f7fe bab4 	b.w	800828a <__swbuf_r>
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	1c58      	adds	r0, r3, #1
 8009d26:	6010      	str	r0, [r2, #0]
 8009d28:	7019      	strb	r1, [r3, #0]
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <__sfputs_r>:
 8009d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	18d5      	adds	r5, r2, r3
 8009d3c:	42ac      	cmp	r4, r5
 8009d3e:	d101      	bne.n	8009d44 <__sfputs_r+0x12>
 8009d40:	2000      	movs	r0, #0
 8009d42:	e007      	b.n	8009d54 <__sfputs_r+0x22>
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	463a      	mov	r2, r7
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ffda 	bl	8009d04 <__sfputc_r>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d1f3      	bne.n	8009d3c <__sfputs_r+0xa>
 8009d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d58 <_vfiprintf_r>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	b09d      	sub	sp, #116	@ 0x74
 8009d60:	4614      	mov	r4, r2
 8009d62:	4698      	mov	r8, r3
 8009d64:	4606      	mov	r6, r0
 8009d66:	b118      	cbz	r0, 8009d70 <_vfiprintf_r+0x18>
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b90b      	cbnz	r3, 8009d70 <_vfiprintf_r+0x18>
 8009d6c:	f7fe f996 	bl	800809c <__sinit>
 8009d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d72:	07d9      	lsls	r1, r3, #31
 8009d74:	d405      	bmi.n	8009d82 <_vfiprintf_r+0x2a>
 8009d76:	89ab      	ldrh	r3, [r5, #12]
 8009d78:	059a      	lsls	r2, r3, #22
 8009d7a:	d402      	bmi.n	8009d82 <_vfiprintf_r+0x2a>
 8009d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d7e:	f7fe fb96 	bl	80084ae <__retarget_lock_acquire_recursive>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	071b      	lsls	r3, r3, #28
 8009d86:	d501      	bpl.n	8009d8c <_vfiprintf_r+0x34>
 8009d88:	692b      	ldr	r3, [r5, #16]
 8009d8a:	b99b      	cbnz	r3, 8009db4 <_vfiprintf_r+0x5c>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7fe faba 	bl	8008308 <__swsetup_r>
 8009d94:	b170      	cbz	r0, 8009db4 <_vfiprintf_r+0x5c>
 8009d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d98:	07dc      	lsls	r4, r3, #31
 8009d9a:	d504      	bpl.n	8009da6 <_vfiprintf_r+0x4e>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	b01d      	add	sp, #116	@ 0x74
 8009da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	0598      	lsls	r0, r3, #22
 8009daa:	d4f7      	bmi.n	8009d9c <_vfiprintf_r+0x44>
 8009dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dae:	f7fe fb7f 	bl	80084b0 <__retarget_lock_release_recursive>
 8009db2:	e7f3      	b.n	8009d9c <_vfiprintf_r+0x44>
 8009db4:	2300      	movs	r3, #0
 8009db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db8:	2320      	movs	r3, #32
 8009dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc2:	2330      	movs	r3, #48	@ 0x30
 8009dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f74 <_vfiprintf_r+0x21c>
 8009dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dcc:	f04f 0901 	mov.w	r9, #1
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	469a      	mov	sl, r3
 8009dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd8:	b10a      	cbz	r2, 8009dde <_vfiprintf_r+0x86>
 8009dda:	2a25      	cmp	r2, #37	@ 0x25
 8009ddc:	d1f9      	bne.n	8009dd2 <_vfiprintf_r+0x7a>
 8009dde:	ebba 0b04 	subs.w	fp, sl, r4
 8009de2:	d00b      	beq.n	8009dfc <_vfiprintf_r+0xa4>
 8009de4:	465b      	mov	r3, fp
 8009de6:	4622      	mov	r2, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	4630      	mov	r0, r6
 8009dec:	f7ff ffa1 	bl	8009d32 <__sfputs_r>
 8009df0:	3001      	adds	r0, #1
 8009df2:	f000 80a7 	beq.w	8009f44 <_vfiprintf_r+0x1ec>
 8009df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df8:	445a      	add	r2, fp
 8009dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 809f 	beq.w	8009f44 <_vfiprintf_r+0x1ec>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e10:	f10a 0a01 	add.w	sl, sl, #1
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	9307      	str	r3, [sp, #28]
 8009e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e1e:	4654      	mov	r4, sl
 8009e20:	2205      	movs	r2, #5
 8009e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e26:	4853      	ldr	r0, [pc, #332]	@ (8009f74 <_vfiprintf_r+0x21c>)
 8009e28:	f7f6 f9fa 	bl	8000220 <memchr>
 8009e2c:	9a04      	ldr	r2, [sp, #16]
 8009e2e:	b9d8      	cbnz	r0, 8009e68 <_vfiprintf_r+0x110>
 8009e30:	06d1      	lsls	r1, r2, #27
 8009e32:	bf44      	itt	mi
 8009e34:	2320      	movmi	r3, #32
 8009e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e3a:	0713      	lsls	r3, r2, #28
 8009e3c:	bf44      	itt	mi
 8009e3e:	232b      	movmi	r3, #43	@ 0x2b
 8009e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e44:	f89a 3000 	ldrb.w	r3, [sl]
 8009e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e4a:	d015      	beq.n	8009e78 <_vfiprintf_r+0x120>
 8009e4c:	9a07      	ldr	r2, [sp, #28]
 8009e4e:	4654      	mov	r4, sl
 8009e50:	2000      	movs	r0, #0
 8009e52:	f04f 0c0a 	mov.w	ip, #10
 8009e56:	4621      	mov	r1, r4
 8009e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e5c:	3b30      	subs	r3, #48	@ 0x30
 8009e5e:	2b09      	cmp	r3, #9
 8009e60:	d94b      	bls.n	8009efa <_vfiprintf_r+0x1a2>
 8009e62:	b1b0      	cbz	r0, 8009e92 <_vfiprintf_r+0x13a>
 8009e64:	9207      	str	r2, [sp, #28]
 8009e66:	e014      	b.n	8009e92 <_vfiprintf_r+0x13a>
 8009e68:	eba0 0308 	sub.w	r3, r0, r8
 8009e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e70:	4313      	orrs	r3, r2
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	46a2      	mov	sl, r4
 8009e76:	e7d2      	b.n	8009e1e <_vfiprintf_r+0xc6>
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	1d19      	adds	r1, r3, #4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	9103      	str	r1, [sp, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bfbb      	ittet	lt
 8009e84:	425b      	neglt	r3, r3
 8009e86:	f042 0202 	orrlt.w	r2, r2, #2
 8009e8a:	9307      	strge	r3, [sp, #28]
 8009e8c:	9307      	strlt	r3, [sp, #28]
 8009e8e:	bfb8      	it	lt
 8009e90:	9204      	strlt	r2, [sp, #16]
 8009e92:	7823      	ldrb	r3, [r4, #0]
 8009e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e96:	d10a      	bne.n	8009eae <_vfiprintf_r+0x156>
 8009e98:	7863      	ldrb	r3, [r4, #1]
 8009e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e9c:	d132      	bne.n	8009f04 <_vfiprintf_r+0x1ac>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	1d1a      	adds	r2, r3, #4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	9203      	str	r2, [sp, #12]
 8009ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eaa:	3402      	adds	r4, #2
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f84 <_vfiprintf_r+0x22c>
 8009eb2:	7821      	ldrb	r1, [r4, #0]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	f7f6 f9b2 	bl	8000220 <memchr>
 8009ebc:	b138      	cbz	r0, 8009ece <_vfiprintf_r+0x176>
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	eba0 000a 	sub.w	r0, r0, sl
 8009ec4:	2240      	movs	r2, #64	@ 0x40
 8009ec6:	4082      	lsls	r2, r0
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	3401      	adds	r4, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed2:	4829      	ldr	r0, [pc, #164]	@ (8009f78 <_vfiprintf_r+0x220>)
 8009ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ed8:	2206      	movs	r2, #6
 8009eda:	f7f6 f9a1 	bl	8000220 <memchr>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d03f      	beq.n	8009f62 <_vfiprintf_r+0x20a>
 8009ee2:	4b26      	ldr	r3, [pc, #152]	@ (8009f7c <_vfiprintf_r+0x224>)
 8009ee4:	bb1b      	cbnz	r3, 8009f2e <_vfiprintf_r+0x1d6>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	3307      	adds	r3, #7
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	3308      	adds	r3, #8
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef4:	443b      	add	r3, r7
 8009ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef8:	e76a      	b.n	8009dd0 <_vfiprintf_r+0x78>
 8009efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efe:	460c      	mov	r4, r1
 8009f00:	2001      	movs	r0, #1
 8009f02:	e7a8      	b.n	8009e56 <_vfiprintf_r+0xfe>
 8009f04:	2300      	movs	r3, #0
 8009f06:	3401      	adds	r4, #1
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f04f 0c0a 	mov.w	ip, #10
 8009f10:	4620      	mov	r0, r4
 8009f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f16:	3a30      	subs	r2, #48	@ 0x30
 8009f18:	2a09      	cmp	r2, #9
 8009f1a:	d903      	bls.n	8009f24 <_vfiprintf_r+0x1cc>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0c6      	beq.n	8009eae <_vfiprintf_r+0x156>
 8009f20:	9105      	str	r1, [sp, #20]
 8009f22:	e7c4      	b.n	8009eae <_vfiprintf_r+0x156>
 8009f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f28:	4604      	mov	r4, r0
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7f0      	b.n	8009f10 <_vfiprintf_r+0x1b8>
 8009f2e:	ab03      	add	r3, sp, #12
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	462a      	mov	r2, r5
 8009f34:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <_vfiprintf_r+0x228>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7fd fc6b 	bl	8007814 <_printf_float>
 8009f3e:	4607      	mov	r7, r0
 8009f40:	1c78      	adds	r0, r7, #1
 8009f42:	d1d6      	bne.n	8009ef2 <_vfiprintf_r+0x19a>
 8009f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d405      	bmi.n	8009f56 <_vfiprintf_r+0x1fe>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d402      	bmi.n	8009f56 <_vfiprintf_r+0x1fe>
 8009f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f52:	f7fe faad 	bl	80084b0 <__retarget_lock_release_recursive>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	065b      	lsls	r3, r3, #25
 8009f5a:	f53f af1f 	bmi.w	8009d9c <_vfiprintf_r+0x44>
 8009f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f60:	e71e      	b.n	8009da0 <_vfiprintf_r+0x48>
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	462a      	mov	r2, r5
 8009f68:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <_vfiprintf_r+0x228>)
 8009f6a:	a904      	add	r1, sp, #16
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f7fd fee9 	bl	8007d44 <_printf_i>
 8009f72:	e7e4      	b.n	8009f3e <_vfiprintf_r+0x1e6>
 8009f74:	0800acb8 	.word	0x0800acb8
 8009f78:	0800acc2 	.word	0x0800acc2
 8009f7c:	08007815 	.word	0x08007815
 8009f80:	08009d33 	.word	0x08009d33
 8009f84:	0800acbe 	.word	0x0800acbe

08009f88 <__sflush_r>:
 8009f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	0716      	lsls	r6, r2, #28
 8009f92:	4605      	mov	r5, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	d454      	bmi.n	800a042 <__sflush_r+0xba>
 8009f98:	684b      	ldr	r3, [r1, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	dc02      	bgt.n	8009fa4 <__sflush_r+0x1c>
 8009f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dd48      	ble.n	800a036 <__sflush_r+0xae>
 8009fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fa6:	2e00      	cmp	r6, #0
 8009fa8:	d045      	beq.n	800a036 <__sflush_r+0xae>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fb0:	682f      	ldr	r7, [r5, #0]
 8009fb2:	6a21      	ldr	r1, [r4, #32]
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	d030      	beq.n	800a01a <__sflush_r+0x92>
 8009fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	0759      	lsls	r1, r3, #29
 8009fbe:	d505      	bpl.n	8009fcc <__sflush_r+0x44>
 8009fc0:	6863      	ldr	r3, [r4, #4]
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fc6:	b10b      	cbz	r3, 8009fcc <__sflush_r+0x44>
 8009fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fca:	1ad2      	subs	r2, r2, r3
 8009fcc:	2300      	movs	r3, #0
 8009fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fd0:	6a21      	ldr	r1, [r4, #32]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b0      	blx	r6
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	d106      	bne.n	8009fea <__sflush_r+0x62>
 8009fdc:	6829      	ldr	r1, [r5, #0]
 8009fde:	291d      	cmp	r1, #29
 8009fe0:	d82b      	bhi.n	800a03a <__sflush_r+0xb2>
 8009fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800a08c <__sflush_r+0x104>)
 8009fe4:	410a      	asrs	r2, r1
 8009fe6:	07d6      	lsls	r6, r2, #31
 8009fe8:	d427      	bmi.n	800a03a <__sflush_r+0xb2>
 8009fea:	2200      	movs	r2, #0
 8009fec:	6062      	str	r2, [r4, #4]
 8009fee:	04d9      	lsls	r1, r3, #19
 8009ff0:	6922      	ldr	r2, [r4, #16]
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	d504      	bpl.n	800a000 <__sflush_r+0x78>
 8009ff6:	1c42      	adds	r2, r0, #1
 8009ff8:	d101      	bne.n	8009ffe <__sflush_r+0x76>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	b903      	cbnz	r3, 800a000 <__sflush_r+0x78>
 8009ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a002:	602f      	str	r7, [r5, #0]
 800a004:	b1b9      	cbz	r1, 800a036 <__sflush_r+0xae>
 800a006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a00a:	4299      	cmp	r1, r3
 800a00c:	d002      	beq.n	800a014 <__sflush_r+0x8c>
 800a00e:	4628      	mov	r0, r5
 800a010:	f7ff f89e 	bl	8009150 <_free_r>
 800a014:	2300      	movs	r3, #0
 800a016:	6363      	str	r3, [r4, #52]	@ 0x34
 800a018:	e00d      	b.n	800a036 <__sflush_r+0xae>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b0      	blx	r6
 800a020:	4602      	mov	r2, r0
 800a022:	1c50      	adds	r0, r2, #1
 800a024:	d1c9      	bne.n	8009fba <__sflush_r+0x32>
 800a026:	682b      	ldr	r3, [r5, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d0c6      	beq.n	8009fba <__sflush_r+0x32>
 800a02c:	2b1d      	cmp	r3, #29
 800a02e:	d001      	beq.n	800a034 <__sflush_r+0xac>
 800a030:	2b16      	cmp	r3, #22
 800a032:	d11e      	bne.n	800a072 <__sflush_r+0xea>
 800a034:	602f      	str	r7, [r5, #0]
 800a036:	2000      	movs	r0, #0
 800a038:	e022      	b.n	800a080 <__sflush_r+0xf8>
 800a03a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a03e:	b21b      	sxth	r3, r3
 800a040:	e01b      	b.n	800a07a <__sflush_r+0xf2>
 800a042:	690f      	ldr	r7, [r1, #16]
 800a044:	2f00      	cmp	r7, #0
 800a046:	d0f6      	beq.n	800a036 <__sflush_r+0xae>
 800a048:	0793      	lsls	r3, r2, #30
 800a04a:	680e      	ldr	r6, [r1, #0]
 800a04c:	bf08      	it	eq
 800a04e:	694b      	ldreq	r3, [r1, #20]
 800a050:	600f      	str	r7, [r1, #0]
 800a052:	bf18      	it	ne
 800a054:	2300      	movne	r3, #0
 800a056:	eba6 0807 	sub.w	r8, r6, r7
 800a05a:	608b      	str	r3, [r1, #8]
 800a05c:	f1b8 0f00 	cmp.w	r8, #0
 800a060:	dde9      	ble.n	800a036 <__sflush_r+0xae>
 800a062:	6a21      	ldr	r1, [r4, #32]
 800a064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a066:	4643      	mov	r3, r8
 800a068:	463a      	mov	r2, r7
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b0      	blx	r6
 800a06e:	2800      	cmp	r0, #0
 800a070:	dc08      	bgt.n	800a084 <__sflush_r+0xfc>
 800a072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	4407      	add	r7, r0
 800a086:	eba8 0800 	sub.w	r8, r8, r0
 800a08a:	e7e7      	b.n	800a05c <__sflush_r+0xd4>
 800a08c:	dfbffffe 	.word	0xdfbffffe

0800a090 <_fflush_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	690b      	ldr	r3, [r1, #16]
 800a094:	4605      	mov	r5, r0
 800a096:	460c      	mov	r4, r1
 800a098:	b913      	cbnz	r3, 800a0a0 <_fflush_r+0x10>
 800a09a:	2500      	movs	r5, #0
 800a09c:	4628      	mov	r0, r5
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	b118      	cbz	r0, 800a0aa <_fflush_r+0x1a>
 800a0a2:	6a03      	ldr	r3, [r0, #32]
 800a0a4:	b90b      	cbnz	r3, 800a0aa <_fflush_r+0x1a>
 800a0a6:	f7fd fff9 	bl	800809c <__sinit>
 800a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f3      	beq.n	800a09a <_fflush_r+0xa>
 800a0b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0b4:	07d0      	lsls	r0, r2, #31
 800a0b6:	d404      	bmi.n	800a0c2 <_fflush_r+0x32>
 800a0b8:	0599      	lsls	r1, r3, #22
 800a0ba:	d402      	bmi.n	800a0c2 <_fflush_r+0x32>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0be:	f7fe f9f6 	bl	80084ae <__retarget_lock_acquire_recursive>
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7ff ff5f 	bl	8009f88 <__sflush_r>
 800a0ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0cc:	07da      	lsls	r2, r3, #31
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	d4e4      	bmi.n	800a09c <_fflush_r+0xc>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	059b      	lsls	r3, r3, #22
 800a0d6:	d4e1      	bmi.n	800a09c <_fflush_r+0xc>
 800a0d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0da:	f7fe f9e9 	bl	80084b0 <__retarget_lock_release_recursive>
 800a0de:	e7dd      	b.n	800a09c <_fflush_r+0xc>

0800a0e0 <__swhatbuf_r>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	b096      	sub	sp, #88	@ 0x58
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	da0d      	bge.n	800a10e <__swhatbuf_r+0x2e>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0f8:	f04f 0100 	mov.w	r1, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2340      	movne	r3, #64	@ 0x40
 800a100:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a104:	2000      	movs	r0, #0
 800a106:	6031      	str	r1, [r6, #0]
 800a108:	602b      	str	r3, [r5, #0]
 800a10a:	b016      	add	sp, #88	@ 0x58
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	466a      	mov	r2, sp
 800a110:	f000 f862 	bl	800a1d8 <_fstat_r>
 800a114:	2800      	cmp	r0, #0
 800a116:	dbec      	blt.n	800a0f2 <__swhatbuf_r+0x12>
 800a118:	9901      	ldr	r1, [sp, #4]
 800a11a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a11e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a122:	4259      	negs	r1, r3
 800a124:	4159      	adcs	r1, r3
 800a126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a12a:	e7eb      	b.n	800a104 <__swhatbuf_r+0x24>

0800a12c <__smakebuf_r>:
 800a12c:	898b      	ldrh	r3, [r1, #12]
 800a12e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a130:	079d      	lsls	r5, r3, #30
 800a132:	4606      	mov	r6, r0
 800a134:	460c      	mov	r4, r1
 800a136:	d507      	bpl.n	800a148 <__smakebuf_r+0x1c>
 800a138:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	6123      	str	r3, [r4, #16]
 800a140:	2301      	movs	r3, #1
 800a142:	6163      	str	r3, [r4, #20]
 800a144:	b003      	add	sp, #12
 800a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a148:	ab01      	add	r3, sp, #4
 800a14a:	466a      	mov	r2, sp
 800a14c:	f7ff ffc8 	bl	800a0e0 <__swhatbuf_r>
 800a150:	9f00      	ldr	r7, [sp, #0]
 800a152:	4605      	mov	r5, r0
 800a154:	4639      	mov	r1, r7
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff f86e 	bl	8009238 <_malloc_r>
 800a15c:	b948      	cbnz	r0, 800a172 <__smakebuf_r+0x46>
 800a15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a162:	059a      	lsls	r2, r3, #22
 800a164:	d4ee      	bmi.n	800a144 <__smakebuf_r+0x18>
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	f043 0302 	orr.w	r3, r3, #2
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	e7e2      	b.n	800a138 <__smakebuf_r+0xc>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	6020      	str	r0, [r4, #0]
 800a176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a182:	b15b      	cbz	r3, 800a19c <__smakebuf_r+0x70>
 800a184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 f837 	bl	800a1fc <_isatty_r>
 800a18e:	b128      	cbz	r0, 800a19c <__smakebuf_r+0x70>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	431d      	orrs	r5, r3
 800a1a0:	81a5      	strh	r5, [r4, #12]
 800a1a2:	e7cf      	b.n	800a144 <__smakebuf_r+0x18>

0800a1a4 <memmove>:
 800a1a4:	4288      	cmp	r0, r1
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	eb01 0402 	add.w	r4, r1, r2
 800a1ac:	d902      	bls.n	800a1b4 <memmove+0x10>
 800a1ae:	4284      	cmp	r4, r0
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	d807      	bhi.n	800a1c4 <memmove+0x20>
 800a1b4:	1e43      	subs	r3, r0, #1
 800a1b6:	42a1      	cmp	r1, r4
 800a1b8:	d008      	beq.n	800a1cc <memmove+0x28>
 800a1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1c2:	e7f8      	b.n	800a1b6 <memmove+0x12>
 800a1c4:	4402      	add	r2, r0
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	428a      	cmp	r2, r1
 800a1ca:	d100      	bne.n	800a1ce <memmove+0x2a>
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1d6:	e7f7      	b.n	800a1c8 <memmove+0x24>

0800a1d8 <_fstat_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d07      	ldr	r5, [pc, #28]	@ (800a1f8 <_fstat_r+0x20>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	f7f7 fc11 	bl	8001a0c <_fstat>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d102      	bne.n	800a1f4 <_fstat_r+0x1c>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	b103      	cbz	r3, 800a1f4 <_fstat_r+0x1c>
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200005a8 	.word	0x200005a8

0800a1fc <_isatty_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d06      	ldr	r5, [pc, #24]	@ (800a218 <_isatty_r+0x1c>)
 800a200:	2300      	movs	r3, #0
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	602b      	str	r3, [r5, #0]
 800a208:	f7f7 fc10 	bl	8001a2c <_isatty>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_isatty_r+0x1a>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_isatty_r+0x1a>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	200005a8 	.word	0x200005a8

0800a21c <_sbrk_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d06      	ldr	r5, [pc, #24]	@ (800a238 <_sbrk_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7f7 fc18 	bl	8001a5c <_sbrk>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_sbrk_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_sbrk_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	200005a8 	.word	0x200005a8

0800a23c <memcpy>:
 800a23c:	440a      	add	r2, r1
 800a23e:	4291      	cmp	r1, r2
 800a240:	f100 33ff 	add.w	r3, r0, #4294967295
 800a244:	d100      	bne.n	800a248 <memcpy+0xc>
 800a246:	4770      	bx	lr
 800a248:	b510      	push	{r4, lr}
 800a24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a252:	4291      	cmp	r1, r2
 800a254:	d1f9      	bne.n	800a24a <memcpy+0xe>
 800a256:	bd10      	pop	{r4, pc}

0800a258 <__assert_func>:
 800a258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a25a:	4614      	mov	r4, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <__assert_func+0x2c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4605      	mov	r5, r0
 800a264:	68d8      	ldr	r0, [r3, #12]
 800a266:	b954      	cbnz	r4, 800a27e <__assert_func+0x26>
 800a268:	4b07      	ldr	r3, [pc, #28]	@ (800a288 <__assert_func+0x30>)
 800a26a:	461c      	mov	r4, r3
 800a26c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a270:	9100      	str	r1, [sp, #0]
 800a272:	462b      	mov	r3, r5
 800a274:	4905      	ldr	r1, [pc, #20]	@ (800a28c <__assert_func+0x34>)
 800a276:	f000 f86f 	bl	800a358 <fiprintf>
 800a27a:	f000 f87f 	bl	800a37c <abort>
 800a27e:	4b04      	ldr	r3, [pc, #16]	@ (800a290 <__assert_func+0x38>)
 800a280:	e7f4      	b.n	800a26c <__assert_func+0x14>
 800a282:	bf00      	nop
 800a284:	20000018 	.word	0x20000018
 800a288:	0800ad0e 	.word	0x0800ad0e
 800a28c:	0800ace0 	.word	0x0800ace0
 800a290:	0800acd3 	.word	0x0800acd3

0800a294 <_calloc_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	fba1 5402 	umull	r5, r4, r1, r2
 800a29a:	b93c      	cbnz	r4, 800a2ac <_calloc_r+0x18>
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7fe ffcb 	bl	8009238 <_malloc_r>
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <_calloc_r+0x1e>
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	220c      	movs	r2, #12
 800a2ae:	6002      	str	r2, [r0, #0]
 800a2b0:	e7f9      	b.n	800a2a6 <_calloc_r+0x12>
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	f7fe f87d 	bl	80083b4 <memset>
 800a2ba:	e7f5      	b.n	800a2a8 <_calloc_r+0x14>

0800a2bc <__ascii_mbtowc>:
 800a2bc:	b082      	sub	sp, #8
 800a2be:	b901      	cbnz	r1, 800a2c2 <__ascii_mbtowc+0x6>
 800a2c0:	a901      	add	r1, sp, #4
 800a2c2:	b142      	cbz	r2, 800a2d6 <__ascii_mbtowc+0x1a>
 800a2c4:	b14b      	cbz	r3, 800a2da <__ascii_mbtowc+0x1e>
 800a2c6:	7813      	ldrb	r3, [r2, #0]
 800a2c8:	600b      	str	r3, [r1, #0]
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	1e10      	subs	r0, r2, #0
 800a2ce:	bf18      	it	ne
 800a2d0:	2001      	movne	r0, #1
 800a2d2:	b002      	add	sp, #8
 800a2d4:	4770      	bx	lr
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	e7fb      	b.n	800a2d2 <__ascii_mbtowc+0x16>
 800a2da:	f06f 0001 	mvn.w	r0, #1
 800a2de:	e7f8      	b.n	800a2d2 <__ascii_mbtowc+0x16>

0800a2e0 <_realloc_r>:
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	4615      	mov	r5, r2
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	b921      	cbnz	r1, 800a2f6 <_realloc_r+0x16>
 800a2ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	f7fe bfa1 	b.w	8009238 <_malloc_r>
 800a2f6:	b92a      	cbnz	r2, 800a304 <_realloc_r+0x24>
 800a2f8:	f7fe ff2a 	bl	8009150 <_free_r>
 800a2fc:	2400      	movs	r4, #0
 800a2fe:	4620      	mov	r0, r4
 800a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a304:	f000 f841 	bl	800a38a <_malloc_usable_size_r>
 800a308:	4285      	cmp	r5, r0
 800a30a:	4606      	mov	r6, r0
 800a30c:	d802      	bhi.n	800a314 <_realloc_r+0x34>
 800a30e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a312:	d8f4      	bhi.n	800a2fe <_realloc_r+0x1e>
 800a314:	4629      	mov	r1, r5
 800a316:	4640      	mov	r0, r8
 800a318:	f7fe ff8e 	bl	8009238 <_malloc_r>
 800a31c:	4607      	mov	r7, r0
 800a31e:	2800      	cmp	r0, #0
 800a320:	d0ec      	beq.n	800a2fc <_realloc_r+0x1c>
 800a322:	42b5      	cmp	r5, r6
 800a324:	462a      	mov	r2, r5
 800a326:	4621      	mov	r1, r4
 800a328:	bf28      	it	cs
 800a32a:	4632      	movcs	r2, r6
 800a32c:	f7ff ff86 	bl	800a23c <memcpy>
 800a330:	4621      	mov	r1, r4
 800a332:	4640      	mov	r0, r8
 800a334:	f7fe ff0c 	bl	8009150 <_free_r>
 800a338:	463c      	mov	r4, r7
 800a33a:	e7e0      	b.n	800a2fe <_realloc_r+0x1e>

0800a33c <__ascii_wctomb>:
 800a33c:	4603      	mov	r3, r0
 800a33e:	4608      	mov	r0, r1
 800a340:	b141      	cbz	r1, 800a354 <__ascii_wctomb+0x18>
 800a342:	2aff      	cmp	r2, #255	@ 0xff
 800a344:	d904      	bls.n	800a350 <__ascii_wctomb+0x14>
 800a346:	228a      	movs	r2, #138	@ 0x8a
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	f04f 30ff 	mov.w	r0, #4294967295
 800a34e:	4770      	bx	lr
 800a350:	700a      	strb	r2, [r1, #0]
 800a352:	2001      	movs	r0, #1
 800a354:	4770      	bx	lr
	...

0800a358 <fiprintf>:
 800a358:	b40e      	push	{r1, r2, r3}
 800a35a:	b503      	push	{r0, r1, lr}
 800a35c:	4601      	mov	r1, r0
 800a35e:	ab03      	add	r3, sp, #12
 800a360:	4805      	ldr	r0, [pc, #20]	@ (800a378 <fiprintf+0x20>)
 800a362:	f853 2b04 	ldr.w	r2, [r3], #4
 800a366:	6800      	ldr	r0, [r0, #0]
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	f7ff fcf5 	bl	8009d58 <_vfiprintf_r>
 800a36e:	b002      	add	sp, #8
 800a370:	f85d eb04 	ldr.w	lr, [sp], #4
 800a374:	b003      	add	sp, #12
 800a376:	4770      	bx	lr
 800a378:	20000018 	.word	0x20000018

0800a37c <abort>:
 800a37c:	b508      	push	{r3, lr}
 800a37e:	2006      	movs	r0, #6
 800a380:	f000 f834 	bl	800a3ec <raise>
 800a384:	2001      	movs	r0, #1
 800a386:	f7f7 faf1 	bl	800196c <_exit>

0800a38a <_malloc_usable_size_r>:
 800a38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a38e:	1f18      	subs	r0, r3, #4
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbc      	itt	lt
 800a394:	580b      	ldrlt	r3, [r1, r0]
 800a396:	18c0      	addlt	r0, r0, r3
 800a398:	4770      	bx	lr

0800a39a <_raise_r>:
 800a39a:	291f      	cmp	r1, #31
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4605      	mov	r5, r0
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	d904      	bls.n	800a3ae <_raise_r+0x14>
 800a3a4:	2316      	movs	r3, #22
 800a3a6:	6003      	str	r3, [r0, #0]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	bd38      	pop	{r3, r4, r5, pc}
 800a3ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a3b0:	b112      	cbz	r2, 800a3b8 <_raise_r+0x1e>
 800a3b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3b6:	b94b      	cbnz	r3, 800a3cc <_raise_r+0x32>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f000 f831 	bl	800a420 <_getpid_r>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c8:	f000 b818 	b.w	800a3fc <_kill_r>
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d00a      	beq.n	800a3e6 <_raise_r+0x4c>
 800a3d0:	1c59      	adds	r1, r3, #1
 800a3d2:	d103      	bne.n	800a3dc <_raise_r+0x42>
 800a3d4:	2316      	movs	r3, #22
 800a3d6:	6003      	str	r3, [r0, #0]
 800a3d8:	2001      	movs	r0, #1
 800a3da:	e7e7      	b.n	800a3ac <_raise_r+0x12>
 800a3dc:	2100      	movs	r1, #0
 800a3de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4798      	blx	r3
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	e7e0      	b.n	800a3ac <_raise_r+0x12>
	...

0800a3ec <raise>:
 800a3ec:	4b02      	ldr	r3, [pc, #8]	@ (800a3f8 <raise+0xc>)
 800a3ee:	4601      	mov	r1, r0
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	f7ff bfd2 	b.w	800a39a <_raise_r>
 800a3f6:	bf00      	nop
 800a3f8:	20000018 	.word	0x20000018

0800a3fc <_kill_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d07      	ldr	r5, [pc, #28]	@ (800a41c <_kill_r+0x20>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	4611      	mov	r1, r2
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	f7f7 fa9f 	bl	800194c <_kill>
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	d102      	bne.n	800a418 <_kill_r+0x1c>
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	b103      	cbz	r3, 800a418 <_kill_r+0x1c>
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	200005a8 	.word	0x200005a8

0800a420 <_getpid_r>:
 800a420:	f7f7 ba8c 	b.w	800193c <_getpid>

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
