
acac_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08009110  08009110  0000a110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b60  08009b60  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b60  08009b60  0000ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b68  08009b68  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b68  08009b68  0000ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b6c  08009b6c  0000ab6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009b70  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001e8  08009d58  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08009d58  0000b420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6bc  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a0  00000000  00000000  000198d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0001be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e4  00000000  00000000  0001ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026704  00000000  00000000  0001d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104b4  00000000  00000000  00043a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebfe1  00000000  00000000  00053ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  0013fef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090f4 	.word	0x080090f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	080090f4 	.word	0x080090f4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a0e      	ldr	r2, [pc, #56]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_GPIO_Init+0x5c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001016:	2201      	movs	r2, #1
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <__io_putchar+0x20>)
 800101a:	f002 fb13 	bl	8003644 <HAL_UART_Transmit>
	return ch;
 800101e:	687b      	ldr	r3, [r7, #4]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000208 	.word	0x20000208
 800102c:	00000000 	.word	0x00000000

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fe89 	bl	8001d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f82a 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f7ff ffb4 	bl	8000fa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001040:	f000 fbbc 	bl	80017bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001044:	f000 f9b0 	bl	80013a8 <OLED_Init>
  OLED_Clear();
 8001048:	f000 f8fc 	bl	8001244 <OLED_Clear>
  OLED_ShowString(0, 0, "1234");
 800104c:	4a0c      	ldr	r2, [pc, #48]	@ (8001080 <main+0x50>)
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f97b 	bl	800134c <OLED_ShowString>
  printf("%.4f\n",12.34);
 8001056:	a308      	add	r3, pc, #32	@ (adr r3, 8001078 <main+0x48>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <main+0x54>)
 800105e:	f006 f929 	bl	80072b4 <iprintf>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, g_vofa_rx_buffer, VOFA_FRAME_RECEIVE_MAX_LENGTH);
 8001062:	2228      	movs	r2, #40	@ 0x28
 8001064:	4908      	ldr	r1, [pc, #32]	@ (8001088 <main+0x58>)
 8001066:	4809      	ldr	r0, [pc, #36]	@ (800108c <main+0x5c>)
 8001068:	f004 fb4d 	bl	8005706 <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Vofa_Test();
 800106c:	f000 fe22 	bl	8001cb4 <Vofa_Test>
 8001070:	e7fc      	b.n	800106c <main+0x3c>
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	7ae147ae 	.word	0x7ae147ae
 800107c:	4028ae14 	.word	0x4028ae14
 8001080:	08009110 	.word	0x08009110
 8001084:	08009118 	.word	0x08009118
 8001088:	200002a4 	.word	0x200002a4
 800108c:	20000208 	.word	0x20000208

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	2238      	movs	r2, #56	@ 0x38
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 fa50 	bl	8007544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010b6:	f001 fa45 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2340      	movs	r3, #64	@ 0x40
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80010d4:	2319      	movs	r3, #25
 80010d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fadf 	bl	80026ac <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80010f4:	f000 f818 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2103      	movs	r1, #3
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fddd 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800111c:	f000 f804 	bl	8001128 <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3750      	adds	r7, #80	@ 0x50
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <Error_Handler+0x8>

08001134 <OLED_WR_Byte>:
#include "oledfont.h"  
//��SSD1106д��һ���ֽڡ�
//dat:Ҫд�������/����
//cmd:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <OLED_WR_Byte+0x24>
	  OLED_DC_Set();
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001150:	4826      	ldr	r0, [pc, #152]	@ (80011ec <OLED_WR_Byte+0xb8>)
 8001152:	f001 f9df 	bl	8002514 <HAL_GPIO_WritePin>
 8001156:	e005      	b.n	8001164 <OLED_WR_Byte+0x30>
	else 
	  OLED_DC_Clr();		  
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115e:	4823      	ldr	r0, [pc, #140]	@ (80011ec <OLED_WR_Byte+0xb8>)
 8001160:	f001 f9d8 	bl	8002514 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800116a:	4820      	ldr	r0, [pc, #128]	@ (80011ec <OLED_WR_Byte+0xb8>)
 800116c:	f001 f9d2 	bl	8002514 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e026      	b.n	80011c4 <OLED_WR_Byte+0x90>
	{			  
		OLED_SCLK_Clr();
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f001 f9c8 	bl	8002514 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	da07      	bge.n	800119c <OLED_WR_Byte+0x68>
		   OLED_SDIN_Set();
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f001 f9bd 	bl	8002514 <HAL_GPIO_WritePin>
 800119a:	e006      	b.n	80011aa <OLED_WR_Byte+0x76>
		else 
		   OLED_SDIN_Clr();
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a6:	f001 f9b5 	bl	8002514 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f001 f9ae 	bl	8002514 <HAL_GPIO_WritePin>
		dat<<=1;   
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d9d5      	bls.n	8001176 <OLED_WR_Byte+0x42>
	}				 		  
	OLED_CS_Set();
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d0:	4806      	ldr	r0, [pc, #24]	@ (80011ec <OLED_WR_Byte+0xb8>)
 80011d2:	f001 f99f 	bl	8002514 <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011dc:	4803      	ldr	r0, [pc, #12]	@ (80011ec <OLED_WR_Byte+0xb8>)
 80011de:	f001 f999 	bl	8002514 <HAL_GPIO_WritePin>
} 
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48000400 	.word	0x48000400

080011f0 <OLED_Set_Pos>:

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	460a      	mov	r2, r1
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	4613      	mov	r3, r2
 80011fe:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	3b50      	subs	r3, #80	@ 0x50
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff93 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff89 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	f003 030e 	and.w	r3, r3, #14
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	b25b      	sxtb	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff7c 	bl	8001134 <OLED_WR_Byte>
}   	  
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	u8 i,n;		    
	for(i=0;i<8;i++)  
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e01f      	b.n	8001290 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	3b50      	subs	r3, #80	@ 0x50
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff6b 	bl	8001134 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 800125e:	2100      	movs	r1, #0
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff67 	bl	8001134 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8001266:	2100      	movs	r1, #0
 8001268:	2010      	movs	r0, #16
 800126a:	f7ff ff63 	bl	8001134 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 800126e:	2300      	movs	r3, #0
 8001270:	71bb      	strb	r3, [r7, #6]
 8001272:	e006      	b.n	8001282 <OLED_Clear+0x3e>
 8001274:	2101      	movs	r1, #1
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ff5c 	bl	8001134 <OLED_WR_Byte>
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	3301      	adds	r3, #1
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001286:	2b00      	cmp	r3, #0
 8001288:	daf4      	bge.n	8001274 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3301      	adds	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b07      	cmp	r3, #7
 8001294:	d9dc      	bls.n	8001250 <OLED_Clear+0xc>
	} //������ʾ
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(u8 x,u8 y,u8 chr)
{      	
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	460b      	mov	r3, r1
 80012ac:	71bb      	strb	r3, [r7, #6]
 80012ae:	4613      	mov	r3, r2
 80012b0:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 80012ba:	797b      	ldrb	r3, [r7, #5]
 80012bc:	3b20      	subs	r3, #32
 80012be:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da04      	bge.n	80012d2 <OLED_ShowChar+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	3302      	adds	r3, #2
 80012d0:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff89 	bl	80011f0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e00c      	b.n	80012fe <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
 80012e6:	011a      	lsls	r2, r3, #4
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <OLED_ShowChar+0xa8>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff1e 	bl	8001134 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	3301      	adds	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d9ef      	bls.n	80012e4 <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	3301      	adds	r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff6e 	bl	80011f0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e00d      	b.n	8001336 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	011a      	lsls	r2, r3, #4
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	4413      	add	r3, r2
 8001322:	3308      	adds	r3, #8
 8001324:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <OLED_ShowChar+0xa8>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff02 	bl	8001134 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	3301      	adds	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b07      	cmp	r3, #7
 800133a:	d9ee      	bls.n	800131a <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0800918c 	.word	0x0800918c

0800134c <OLED_ShowString>:
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0'); 
	}
} 
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(u8 x,u8 y,u8 *chr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	603a      	str	r2, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	460b      	mov	r3, r1
 800135a:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001360:	e016      	b.n	8001390 <OLED_ShowString+0x44>
	{		OLED_ShowChar(x,y,chr[j]);
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	4413      	add	r3, r2
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	79b9      	ldrb	r1, [r7, #6]
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff96 	bl	80012a0 <OLED_ShowChar>
			x+=8;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3308      	adds	r3, #8
 8001378:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b78      	cmp	r3, #120	@ 0x78
 800137e:	d904      	bls.n	800138a <OLED_ShowString+0x3e>
 8001380:	2300      	movs	r3, #0
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	3302      	adds	r3, #2
 8001388:	71bb      	strb	r3, [r7, #6]
			j++;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e2      	bne.n	8001362 <OLED_ShowString+0x16>
	}
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <OLED_Init>:
} 


//��ʼ��				    
void OLED_Init(void)
{ 	
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b62      	ldr	r3, [pc, #392]	@ (8001548 <OLED_Init+0x1a0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a61      	ldr	r2, [pc, #388]	@ (8001548 <OLED_Init+0x1a0>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <OLED_Init+0x1a0>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001548 <OLED_Init+0x1a0>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a5b      	ldr	r2, [pc, #364]	@ (8001548 <OLED_Init+0x1a0>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b59      	ldr	r3, [pc, #356]	@ (8001548 <OLED_Init+0x1a0>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	4851      	ldr	r0, [pc, #324]	@ (800154c <OLED_Init+0x1a4>)
 8001408:	f000 ff02 	bl	8002210 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001412:	484e      	ldr	r0, [pc, #312]	@ (800154c <OLED_Init+0x1a4>)
 8001414:	f001 f87e 	bl	8002514 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001418:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001434:	f000 feec 	bl	8002210 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800143e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001442:	f001 f867 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001446:	2064      	movs	r0, #100	@ 0x64
 8001448:	f000 fcf0 	bl	8001e2c <HAL_Delay>

	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 800144c:	2100      	movs	r1, #0
 800144e:	20ae      	movs	r0, #174	@ 0xae
 8001450:	f7ff fe70 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe6c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800145c:	2100      	movs	r1, #0
 800145e:	2010      	movs	r0, #16
 8001460:	f7ff fe68 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8001464:	2100      	movs	r1, #0
 8001466:	2040      	movs	r0, #64	@ 0x40
 8001468:	f7ff fe64 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 800146c:	2100      	movs	r1, #0
 800146e:	2081      	movs	r0, #129	@ 0x81
 8001470:	f7ff fe60 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8001474:	2100      	movs	r1, #0
 8001476:	20cf      	movs	r0, #207	@ 0xcf
 8001478:	f7ff fe5c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 800147c:	2100      	movs	r1, #0
 800147e:	20a1      	movs	r0, #161	@ 0xa1
 8001480:	f7ff fe58 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8001484:	2100      	movs	r1, #0
 8001486:	20c8      	movs	r0, #200	@ 0xc8
 8001488:	f7ff fe54 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 800148c:	2100      	movs	r1, #0
 800148e:	20a6      	movs	r0, #166	@ 0xa6
 8001490:	f7ff fe50 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001494:	2100      	movs	r1, #0
 8001496:	20a8      	movs	r0, #168	@ 0xa8
 8001498:	f7ff fe4c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 800149c:	2100      	movs	r1, #0
 800149e:	203f      	movs	r0, #63	@ 0x3f
 80014a0:	f7ff fe48 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80014a4:	2100      	movs	r1, #0
 80014a6:	20d3      	movs	r0, #211	@ 0xd3
 80014a8:	f7ff fe44 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 80014ac:	2100      	movs	r1, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fe40 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 80014b4:	2100      	movs	r1, #0
 80014b6:	20d5      	movs	r0, #213	@ 0xd5
 80014b8:	f7ff fe3c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 80014bc:	2100      	movs	r1, #0
 80014be:	20f0      	movs	r0, #240	@ 0xf0
 80014c0:	f7ff fe38 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 80014c4:	2100      	movs	r1, #0
 80014c6:	20d9      	movs	r0, #217	@ 0xd9
 80014c8:	f7ff fe34 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80014cc:	2100      	movs	r1, #0
 80014ce:	20f1      	movs	r0, #241	@ 0xf1
 80014d0:	f7ff fe30 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 80014d4:	2100      	movs	r1, #0
 80014d6:	20da      	movs	r0, #218	@ 0xda
 80014d8:	f7ff fe2c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 80014dc:	2100      	movs	r1, #0
 80014de:	2012      	movs	r0, #18
 80014e0:	f7ff fe28 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 80014e4:	2100      	movs	r1, #0
 80014e6:	20db      	movs	r0, #219	@ 0xdb
 80014e8:	f7ff fe24 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 80014ec:	2100      	movs	r1, #0
 80014ee:	2040      	movs	r0, #64	@ 0x40
 80014f0:	f7ff fe20 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80014f4:	2100      	movs	r1, #0
 80014f6:	2020      	movs	r0, #32
 80014f8:	f7ff fe1c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 80014fc:	2100      	movs	r1, #0
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fe18 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8001504:	2100      	movs	r1, #0
 8001506:	208d      	movs	r0, #141	@ 0x8d
 8001508:	f7ff fe14 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 800150c:	2100      	movs	r1, #0
 800150e:	2014      	movs	r0, #20
 8001510:	f7ff fe10 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8001514:	2100      	movs	r1, #0
 8001516:	20a4      	movs	r0, #164	@ 0xa4
 8001518:	f7ff fe0c 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 800151c:	2100      	movs	r1, #0
 800151e:	20a6      	movs	r0, #166	@ 0xa6
 8001520:	f7ff fe08 	bl	8001134 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8001524:	2100      	movs	r1, #0
 8001526:	20af      	movs	r0, #175	@ 0xaf
 8001528:	f7ff fe04 	bl	8001134 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 800152c:	2100      	movs	r1, #0
 800152e:	20af      	movs	r0, #175	@ 0xaf
 8001530:	f7ff fe00 	bl	8001134 <OLED_WR_Byte>
	OLED_Clear();
 8001534:	f7ff fe86 	bl	8001244 <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 8001538:	2100      	movs	r1, #0
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fe58 	bl	80011f0 <OLED_Set_Pos>
}  
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <HAL_MspInit+0x44>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_MspInit+0x44>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6613      	str	r3, [r2, #96]	@ 0x60
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <HAL_MspInit+0x44>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_MspInit+0x44>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <HAL_MspInit+0x44>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	6593      	str	r3, [r2, #88]	@ 0x58
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_MspInit+0x44>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001586:	f001 f881 	bl	800268c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 fbff 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015fc:	4802      	ldr	r0, [pc, #8]	@ (8001608 <USART1_IRQHandler+0x10>)
 80015fe:	f002 f8af 	bl	8003760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000208 	.word	0x20000208

0800160c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_kill>:

int _kill(int pid, int sig)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001626:	f005 ffef 	bl	8007608 <__errno>
 800162a:	4603      	mov	r3, r0
 800162c:	2216      	movs	r2, #22
 800162e:	601a      	str	r2, [r3, #0]
  return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_exit>:

void _exit (int status)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffe7 	bl	800161c <_kill>
  while (1) {}    /* Make sure we hang here */
 800164e:	bf00      	nop
 8001650:	e7fd      	b.n	800164e <_exit+0x12>

08001652 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	e00a      	b.n	800167a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001664:	f3af 8000 	nop.w
 8001668:	4601      	mov	r1, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	b2ca      	uxtb	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf0      	blt.n	8001664 <_read+0x12>
  }

  return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e009      	b.n	80016b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	60ba      	str	r2, [r7, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fcae 	bl	8001008 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbf1      	blt.n	800169e <_write+0x12>
  }
  return len;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_close>:

int _close(int file)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ec:	605a      	str	r2, [r3, #4]
  return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_isatty>:

int _isatty(int file)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f005 ff54 	bl	8007608 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20020000 	.word	0x20020000
 800178c:	00000400 	.word	0x00000400
 8001790:	20000204 	.word	0x20000204
 8001794:	20000420 	.word	0x20000420

08001798 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017c2:	4a23      	ldr	r2, [pc, #140]	@ (8001850 <MX_USART1_UART_Init+0x94>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_USART1_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_USART1_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001804:	4811      	ldr	r0, [pc, #68]	@ (800184c <MX_USART1_UART_Init+0x90>)
 8001806:	f001 fecd 	bl	80035a4 <HAL_UART_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001810:	f7ff fc8a 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001814:	2100      	movs	r1, #0
 8001816:	480d      	ldr	r0, [pc, #52]	@ (800184c <MX_USART1_UART_Init+0x90>)
 8001818:	f003 fef9 	bl	800560e <HAL_UARTEx_SetTxFifoThreshold>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001822:	f7ff fc81 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	4808      	ldr	r0, [pc, #32]	@ (800184c <MX_USART1_UART_Init+0x90>)
 800182a:	f003 ff2e 	bl	800568a <HAL_UARTEx_SetRxFifoThreshold>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001834:	f7ff fc78 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <MX_USART1_UART_Init+0x90>)
 800183a:	f003 feaf 	bl	800559c <HAL_UARTEx_DisableFifoMode>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001844:	f7ff fc70 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000208 	.word	0x20000208
 8001850:	40013800 	.word	0x40013800

08001854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b09e      	sub	sp, #120	@ 0x78
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2254      	movs	r2, #84	@ 0x54
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fe65 	bl	8007544 <memset>
  if(uartHandle->Instance==USART1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d13d      	bne.n	8001900 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fc39 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800189c:	f7ff fc44 	bl	8001128 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a4:	4a19      	ldr	r2, [pc, #100]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ac:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	4a13      	ldr	r2, [pc, #76]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018d0:	2330      	movs	r3, #48	@ 0x30
 80018d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e0:	2307      	movs	r3, #7
 80018e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018e8:	4619      	mov	r1, r3
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_UART_MspInit+0xbc>)
 80018ec:	f000 fc90 	bl	8002210 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2025      	movs	r0, #37	@ 0x25
 80018f6:	f000 fb96 	bl	8002026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018fa:	2025      	movs	r0, #37	@ 0x25
 80018fc:	f000 fbad 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001900:	bf00      	nop
 8001902:	3778      	adds	r7, #120	@ 0x78
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40013800 	.word	0x40013800
 800190c:	40021000 	.word	0x40021000
 8001910:	48000800 	.word	0x48000800

08001914 <HAL_UARTEx_RxEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1){//MCU作为从机接收上位机的逻辑
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <HAL_UARTEx_RxEventCallback+0x34>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d10b      	bne.n	8001940 <HAL_UARTEx_RxEventCallback+0x2c>
		g_vofa_frame_received=VOFA_SET_OK;
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_UARTEx_RxEventCallback+0x38>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
		g_vofa_frame_size=Size;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001934:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, g_vofa_rx_buffer, VOFA_FRAME_RECEIVE_MAX_LENGTH);
 8001936:	2228      	movs	r2, #40	@ 0x28
 8001938:	4906      	ldr	r1, [pc, #24]	@ (8001954 <HAL_UARTEx_RxEventCallback+0x40>)
 800193a:	4803      	ldr	r0, [pc, #12]	@ (8001948 <HAL_UARTEx_RxEventCallback+0x34>)
 800193c:	f003 fee3 	bl	8005706 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000208 	.word	0x20000208
 800194c:	200002cc 	.word	0x200002cc
 8001950:	200002cd 	.word	0x200002cd
 8001954:	200002a4 	.word	0x200002a4

08001958 <_calASCII>:
uint8_t g_vofa_frame_received=0;
uint8_t g_vofa_frame_size=0;
uint8_t g_vofa_frame_byte=0;
uint8_t g_vofa_rx_index=0;

uint8_t _calASCII(char num){
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	return (num-ASCII_TRANS);
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	3b30      	subs	r3, #48	@ 0x30
 8001966:	b2db      	uxtb	r3, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	0000      	movs	r0, r0
	...

08001978 <_calculateData>:

uint8_t _calculateData(char *data,uint16_t dataLenth,float *sum){
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	460b      	mov	r3, r1
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	817b      	strh	r3, [r7, #10]
	uint8_t integer_end=dataLenth-(VOFA_DATA_DECIMAL_LEN+1);//整数位数
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3b05      	subs	r3, #5
 800198c:	75bb      	strb	r3, [r7, #22]
	uint8_t decimal_start=dataLenth-VOFA_DATA_DECIMAL_LEN;//小数起始位数组下标
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3b04      	subs	r3, #4
 8001994:	757b      	strb	r3, [r7, #21]
	uint8_t index=0;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]
	if(dataLenth>=4){
 800199a:	897b      	ldrh	r3, [r7, #10]
 800199c:	2b03      	cmp	r3, #3
 800199e:	f240 808a 	bls.w	8001ab6 <_calculateData+0x13e>
		for(index=0;index<integer_end;index++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]
 80019a6:	e03c      	b.n	8001a22 <_calculateData+0xaa>
			*sum+=(_calASCII(data[index])*pow(10.0,integer_end-index-1));//幂次与下标和整数位长度有关
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ffd1 	bl	8001958 <_calASCII>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdeb 	bl	8000594 <__aeabi_i2d>
 80019be:	4604      	mov	r4, r0
 80019c0:	460d      	mov	r5, r1
 80019c2:	7dba      	ldrb	r2, [r7, #22]
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fde2 	bl	8000594 <__aeabi_i2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b11 	vmov	d1, r2, r3
 80019d8:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 8001ac0 <_calculateData+0x148>
 80019dc:	f003 ff32 	bl	8005844 <pow>
 80019e0:	ec53 2b10 	vmov	r2, r3, d0
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fe3e 	bl	8000668 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fddd 	bl	80005b8 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fc79 	bl	80002fc <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f901 	bl	8000c18 <__aeabi_d2f>
 8001a16:	4602      	mov	r2, r0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
		for(index=0;index<integer_end;index++){
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
 8001a22:	7dfa      	ldrb	r2, [r7, #23]
 8001a24:	7dbb      	ldrb	r3, [r7, #22]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3be      	bcc.n	80019a8 <_calculateData+0x30>
		}
		for(index=0;index<2;index++){
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
 8001a2e:	e03d      	b.n	8001aac <_calculateData+0x134>
			*sum+=(_calASCII(data[decimal_start+index])*pow(0.1,index+1));//从小数起始位遍历两位
 8001a30:	7d7a      	ldrb	r2, [r7, #21]
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	4413      	add	r3, r2
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff8a 	bl	8001958 <_calASCII>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fda4 	bl	8000594 <__aeabi_i2d>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	460d      	mov	r5, r1
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd9d 	bl	8000594 <__aeabi_i2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	ec43 2b11 	vmov	d1, r2, r3
 8001a62:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8001ac8 <_calculateData+0x150>
 8001a66:	f003 feed 	bl	8005844 <pow>
 8001a6a:	ec53 2b10 	vmov	r2, r3, d0
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fdf9 	bl	8000668 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd98 	bl	80005b8 <__aeabi_f2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fc34 	bl	80002fc <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f8bc 	bl	8000c18 <__aeabi_d2f>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
		for(index=0;index<2;index++){
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	75fb      	strb	r3, [r7, #23]
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d9be      	bls.n	8001a30 <_calculateData+0xb8>
		}
		return VOFA_SET_OK;//计算成功
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <_calculateData+0x140>
	}
	return VOFA_SET_NO;//计算失败
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40240000 	.word	0x40240000
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3fb99999 	.word	0x3fb99999

08001ad0 <_setVofaProtocol>:

//移植请修改下面的函数
//后续可以改成链表遍历+泛型的方式，传入链表对链表遍历实现查询VOFA对象
uint8_t _setVofaProtocol(float data,char *str){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ada:	6038      	str	r0, [r7, #0]
	char p1[]="P1";//移植请修改这里，下面同理
 8001adc:	4a2e      	ldr	r2, [pc, #184]	@ (8001b98 <_setVofaProtocol+0xc8>)
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	8019      	strh	r1, [r3, #0]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	0c12      	lsrs	r2, r2, #16
 8001aec:	701a      	strb	r2, [r3, #0]
	char p2[]="P2";
 8001aee:	4a2b      	ldr	r2, [pc, #172]	@ (8001b9c <_setVofaProtocol+0xcc>)
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	4611      	mov	r1, r2
 8001af8:	8019      	strh	r1, [r3, #0]
 8001afa:	3302      	adds	r3, #2
 8001afc:	0c12      	lsrs	r2, r2, #16
 8001afe:	701a      	strb	r2, [r3, #0]


	if(strcmp(str,p1)==0){//移植请修改这里，下面同理
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	6838      	ldr	r0, [r7, #0]
 8001b08:	f7fe fb8a 	bl	8000220 <strcmp>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <_setVofaProtocol+0x76>
		//绑定值
		a.v1=(uint16_t)data;//移植请修改这里，下面同理
 8001b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1a:	ee17 3a90 	vmov	r3, s15
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <_setVofaProtocol+0xd0>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
		printf("[VOFA]P1=%.4f\n",a.v1);
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <_setVofaProtocol+0xd0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd40 	bl	80005b8 <__aeabi_f2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4819      	ldr	r0, [pc, #100]	@ (8001ba4 <_setVofaProtocol+0xd4>)
 8001b3e:	f005 fbb9 	bl	80072b4 <iprintf>
		return VOFA_SET_OK;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e023      	b.n	8001b8e <_setVofaProtocol+0xbe>
	}
	else if(strcmp(str,p2)==0){
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6838      	ldr	r0, [r7, #0]
 8001b4e:	f7fe fb67 	bl	8000220 <strcmp>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d119      	bne.n	8001b8c <_setVofaProtocol+0xbc>
		//绑定值
		a.v2=(uint16_t)data;
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <_setVofaProtocol+0xd0>)
 8001b70:	edc3 7a01 	vstr	s15, [r3, #4]
		printf("[VOFA]P2=%.4f\n",a.v2);
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <_setVofaProtocol+0xd0>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fd1d 	bl	80005b8 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4809      	ldr	r0, [pc, #36]	@ (8001ba8 <_setVofaProtocol+0xd8>)
 8001b84:	f005 fb96 	bl	80072b4 <iprintf>
		return VOFA_SET_OK;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <_setVofaProtocol+0xbe>
	}

	else{
		return VOFA_SET_NO;
 8001b8c:	2300      	movs	r3, #0
	}
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	08009140 	.word	0x08009140
 8001b9c:	08009144 	.word	0x08009144
 8001ba0:	2000029c 	.word	0x2000029c
 8001ba4:	08009120 	.word	0x08009120
 8001ba8:	08009130 	.word	0x08009130

08001bac <_getVofaData>:

uint8_t _getVofaData(uint16_t frameLenth){//frameLenth长度不包括协议的结尾符号
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
	uint16_t index=0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	83fb      	strh	r3, [r7, #30]
	uint16_t dataLenth=0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	83bb      	strh	r3, [r7, #28]
	uint16_t strLenth=0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	837b      	strh	r3, [r7, #26]
	char *rawdata=NULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
	char *rawstr=NULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
	float data=0;//最终解算得到的数据
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
//	printf("OK\n");
	for(index=0;index<frameLenth;index++) // 查找等号的位置，不包含结尾的符号
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	83fb      	strh	r3, [r7, #30]
 8001bd4:	e011      	b.n	8001bfa <_getVofaData+0x4e>
	{
		if(g_vofa_rx_buffer[index]==VOFA_FRAME_STR_FRONT){
 8001bd6:	8bfb      	ldrh	r3, [r7, #30]
 8001bd8:	4a34      	ldr	r2, [pc, #208]	@ (8001cac <_getVofaData+0x100>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	2b3d      	cmp	r3, #61	@ 0x3d
 8001bde:	d109      	bne.n	8001bf4 <_getVofaData+0x48>
			strLenth=index+1;//+1是为了变成字符串，以\0结尾
 8001be0:	8bfb      	ldrh	r3, [r7, #30]
 8001be2:	3301      	adds	r3, #1
 8001be4:	837b      	strh	r3, [r7, #26]
			dataLenth=frameLenth-index-1;//不包含结尾的数据结束符号
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	8bfb      	ldrh	r3, [r7, #30]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	83bb      	strh	r3, [r7, #28]
			break ;
 8001bf2:	e006      	b.n	8001c02 <_getVofaData+0x56>
	for(index=0;index<frameLenth;index++) // 查找等号的位置，不包含结尾的符号
 8001bf4:	8bfb      	ldrh	r3, [r7, #30]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	83fb      	strh	r3, [r7, #30]
 8001bfa:	8bfa      	ldrh	r2, [r7, #30]
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3e9      	bcc.n	8001bd6 <_getVofaData+0x2a>
		}
	}
	rawdata=(char *)malloc(sizeof(char)*dataLenth);
 8001c02:	8bbb      	ldrh	r3, [r7, #28]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 fd7d 	bl	8006704 <malloc>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	617b      	str	r3, [r7, #20]
	rawstr=(char *)malloc(sizeof(char)*strLenth);
 8001c0e:	8b7b      	ldrh	r3, [r7, #26]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 fd77 	bl	8006704 <malloc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]
	if(rawdata != NULL&&rawstr != NULL){
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d03b      	beq.n	8001c98 <_getVofaData+0xec>
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d038      	beq.n	8001c98 <_getVofaData+0xec>
		memcpy(rawstr,g_vofa_rx_buffer,strLenth-1);
 8001c26:	8b7b      	ldrh	r3, [r7, #26]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	491f      	ldr	r1, [pc, #124]	@ (8001cac <_getVofaData+0x100>)
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f005 fd17 	bl	8007662 <memcpy>
		rawstr[strLenth-1]='\0';//变成字符串
 8001c34:	8b7b      	ldrh	r3, [r7, #26]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
		memcpy(rawdata,(g_vofa_rx_buffer+strLenth),dataLenth);
 8001c40:	8b7b      	ldrh	r3, [r7, #26]
 8001c42:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <_getVofaData+0x100>)
 8001c44:	4413      	add	r3, r2
 8001c46:	8bba      	ldrh	r2, [r7, #28]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f005 fd09 	bl	8007662 <memcpy>
		if(_calculateData(rawdata,dataLenth,&data)){//如果计算成功
 8001c50:	f107 020c 	add.w	r2, r7, #12
 8001c54:	8bbb      	ldrh	r3, [r7, #28]
 8001c56:	4619      	mov	r1, r3
 8001c58:	6978      	ldr	r0, [r7, #20]
 8001c5a:	f7ff fe8d 	bl	8001978 <_calculateData>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d011      	beq.n	8001c88 <_getVofaData+0xdc>
			if(_setVofaProtocol(data,rawstr)){//这里没有做error_handler
 8001c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	f7ff ff2f 	bl	8001ad0 <_setVofaProtocol>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d014      	beq.n	8001ca2 <_getVofaData+0xf6>
				free(rawdata);
 8001c78:	6978      	ldr	r0, [r7, #20]
 8001c7a:	f004 fd4b 	bl	8006714 <free>
				free(rawstr);
 8001c7e:	6938      	ldr	r0, [r7, #16]
 8001c80:	f004 fd48 	bl	8006714 <free>
				return VOFA_SET_OK;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e00d      	b.n	8001ca4 <_getVofaData+0xf8>
			}
		}
		else{
			free(rawdata);
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f004 fd43 	bl	8006714 <free>
			free(rawstr);
 8001c8e:	6938      	ldr	r0, [r7, #16]
 8001c90:	f004 fd40 	bl	8006714 <free>
			return VOFA_SET_NO;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e005      	b.n	8001ca4 <_getVofaData+0xf8>
		}
	}
	else{
		printf("[VOFA]vofa malloc fail\n");
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <_getVofaData+0x104>)
 8001c9a:	f005 fb73 	bl	8007384 <puts>
		return VOFA_SET_NO;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <_getVofaData+0xf8>
		if(_calculateData(rawdata,dataLenth,&data)){//如果计算成功
 8001ca2:	bf00      	nop
	}

}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200002a4 	.word	0x200002a4
 8001cb0:	08009148 	.word	0x08009148

08001cb4 <Vofa_Test>:

void Vofa_Test(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	if(g_vofa_frame_received){
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <Vofa_Test+0x34>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d011      	beq.n	8001ce4 <Vofa_Test+0x30>
		g_vofa_frame_received=0;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <Vofa_Test+0x34>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
//		printf("%d\n",g_vofa_frame_size);
		if(_getVofaData(g_vofa_frame_size)){//如果有结尾的符号，这里传入的size要-1
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <Vofa_Test+0x38>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff6e 	bl	8001bac <_getVofaData>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <Vofa_Test+0x2a>
			printf("[VOFA]vofa set success\n");
 8001cd6:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <Vofa_Test+0x3c>)
 8001cd8:	f005 fb54 	bl	8007384 <puts>
		}
		else{
			printf("[VOFA]vofa set fail\n");
		}
	}
}
 8001cdc:	e002      	b.n	8001ce4 <Vofa_Test+0x30>
			printf("[VOFA]vofa set fail\n");
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <Vofa_Test+0x40>)
 8001ce0:	f005 fb50 	bl	8007384 <puts>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200002cc 	.word	0x200002cc
 8001cec:	200002cd 	.word	0x200002cd
 8001cf0:	08009160 	.word	0x08009160
 8001cf4:	08009178 	.word	0x08009178

08001cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf8:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cfc:	f7ff fd4c 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <LoopForever+0xe>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	@ (8001d44 <LoopForever+0x16>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f005 fc75 	bl	8007614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2a:	f7ff f981 	bl	8001030 <main>

08001d2e <LoopForever>:

LoopForever:
    b LoopForever
 8001d2e:	e7fe      	b.n	8001d2e <LoopForever>
  ldr   r0, =_estack
 8001d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d3c:	08009b70 	.word	0x08009b70
  ldr r2, =_sbss
 8001d40:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d44:	20000420 	.word	0x20000420

08001d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC1_2_IRQHandler>

08001d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 f95b 	bl	8002010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f000 f80e 	bl	8001d7c <HAL_InitTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e001      	b.n	8001d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d6c:	f7ff fbf0 	bl	8001550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d70:	79fb      	ldrb	r3, [r7, #7]

}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <HAL_InitTick+0x68>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_InitTick+0x6c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <HAL_InitTick+0x68>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f966 	bl	8002076 <HAL_SYSTICK_Config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	d809      	bhi.n	8001dca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db6:	2200      	movs	r2, #0
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbe:	f000 f932 	bl	8002026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <HAL_InitTick+0x70>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e004      	b.n	8001dda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_IncTick+0x20>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a03      	ldr	r2, [pc, #12]	@ (8001e0c <HAL_IncTick+0x1c>)
 8001e00:	6013      	str	r3, [r2, #0]
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	200002d0 	.word	0x200002d0
 8001e10:	20000008 	.word	0x20000008

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200002d0 	.word	0x200002d0

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d004      	beq.n	8001e50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_Delay+0x40>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e50:	bf00      	nop
 8001e52:	f7ff ffdf 	bl	8001e14 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d8f7      	bhi.n	8001e52 <HAL_Delay+0x26>
  {
  }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000008 	.word	0x20000008

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4907      	ldr	r1, [pc, #28]	@ (8001f0c <__NVIC_EnableIRQ+0x38>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fdc:	d301      	bcc.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00f      	b.n	8002002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <SysTick_Config+0x40>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	210f      	movs	r1, #15
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f7ff ff8e 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <SysTick_Config+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	4b04      	ldr	r3, [pc, #16]	@ (800200c <SysTick_Config+0x40>)
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff29 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff40 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff33 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa4 	bl	8001fcc <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d005      	beq.n	80020b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e037      	b.n	8002122 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 020e 	bic.w	r2, r2, #14
 80020c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00c      	beq.n	8002122 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002112:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002116:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002120:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d00d      	beq.n	8002174 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e047      	b.n	8002204 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020e 	bic.w	r2, r2, #14
 8002182:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f202 	lsl.w	r2, r1, r2
 80021b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
    }
  }
  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221e:	e15a      	b.n	80024d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 814c 	beq.w	80024d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b5b      	ldr	r3, [pc, #364]	@ (80024f4 <HAL_GPIO_Init+0x2e4>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	4a5a      	ldr	r2, [pc, #360]	@ (80024f4 <HAL_GPIO_Init+0x2e4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002390:	4b58      	ldr	r3, [pc, #352]	@ (80024f4 <HAL_GPIO_Init+0x2e4>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239c:	4a56      	ldr	r2, [pc, #344]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c6:	d01f      	beq.n	8002408 <HAL_GPIO_Init+0x1f8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_GPIO_Init+0x2ec>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d019      	beq.n	8002404 <HAL_GPIO_Init+0x1f4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_GPIO_Init+0x2f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1f0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4a      	ldr	r2, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x2f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a49      	ldr	r2, [pc, #292]	@ (8002508 <HAL_GPIO_Init+0x2f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a48      	ldr	r2, [pc, #288]	@ (800250c <HAL_GPIO_Init+0x2fc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023f0:	2305      	movs	r3, #5
 80023f2:	e00a      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023f4:	2306      	movs	r3, #6
 80023f6:	e008      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023f8:	2304      	movs	r3, #4
 80023fa:	e006      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e004      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002400:	2302      	movs	r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_GPIO_Init+0x1fa>
 8002408:	2300      	movs	r3, #0
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4093      	lsls	r3, r2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241a:	4937      	ldr	r1, [pc, #220]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002428:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_GPIO_Init+0x300>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800244c:	4a30      	ldr	r2, [pc, #192]	@ (8002510 <HAL_GPIO_Init+0x300>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002452:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_GPIO_Init+0x300>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002476:	4a26      	ldr	r2, [pc, #152]	@ (8002510 <HAL_GPIO_Init+0x300>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_GPIO_Init+0x300>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ca:	4a11      	ldr	r2, [pc, #68]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f ae9d 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000800 	.word	0x48000800
 8002504:	48000c00 	.word	0x48000c00
 8002508:	48001000 	.word	0x48001000
 800250c:	48001400 	.word	0x48001400
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d141      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002552:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255e:	d131      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002560:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002566:	4a46      	ldr	r2, [pc, #280]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800256c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002570:	4b43      	ldr	r3, [pc, #268]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002578:	4a41      	ldr	r2, [pc, #260]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2232      	movs	r2, #50	@ 0x32
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a3f      	ldr	r2, [pc, #252]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002596:	e002      	b.n	800259e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3b01      	subs	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259e:	4b38      	ldr	r3, [pc, #224]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025aa:	d102      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f2      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b2:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025be:	d158      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e057      	b.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025d4:	e04d      	b.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025dc:	d141      	bne.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025de:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ea:	d131      	bne.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025ec:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025f2:	4a23      	ldr	r2, [pc, #140]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025fc:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002604:	4a1e      	ldr	r2, [pc, #120]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800260c:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2232      	movs	r2, #50	@ 0x32
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002622:	e002      	b.n	800262a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3b01      	subs	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002636:	d102      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f2      	bne.n	8002624 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800264a:	d112      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e011      	b.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002656:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002660:	e007      	b.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002670:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40007000 	.word	0x40007000
 8002684:	20000000 	.word	0x20000000
 8002688:	431bde83 	.word	0x431bde83

0800268c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269a:	6093      	str	r3, [r2, #8]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40007000 	.word	0x40007000

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e2fe      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d075      	beq.n	80027b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4b97      	ldr	r3, [pc, #604]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d4:	4b94      	ldr	r3, [pc, #592]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x3e>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_OscConfig+0x44>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05b      	beq.n	80027b4 <HAL_RCC_OscConfig+0x108>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d157      	bne.n	80027b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e2d9      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x74>
 8002712:	4b85      	ldr	r3, [pc, #532]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a84      	ldr	r2, [pc, #528]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x98>
 800272a:	4b7f      	ldr	r3, [pc, #508]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7e      	ldr	r2, [pc, #504]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b7c      	ldr	r3, [pc, #496]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7b      	ldr	r2, [pc, #492]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002744:	4b78      	ldr	r3, [pc, #480]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a77      	ldr	r2, [pc, #476]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b75      	ldr	r3, [pc, #468]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a74      	ldr	r2, [pc, #464]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff fb56 	bl	8001e14 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fb52 	bl	8001e14 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e29e      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277e:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xc0>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff fb42 	bl	8001e14 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fb3e 	bl	8001e14 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e28a      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	4b60      	ldr	r3, [pc, #384]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0xe8>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d075      	beq.n	80028ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027cc:	4b56      	ldr	r3, [pc, #344]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_OscConfig+0x136>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_OscConfig+0x13c>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d11f      	bne.n	8002828 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x154>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e25d      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4946      	ldr	r1, [pc, #280]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002814:	4b45      	ldr	r3, [pc, #276]	@ (800292c <HAL_RCC_OscConfig+0x280>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff faaf 	bl	8001d7c <HAL_InitTick>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d043      	beq.n	80028ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e249      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d023      	beq.n	8002878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b3d      	ldr	r3, [pc, #244]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3c      	ldr	r2, [pc, #240]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff faea 	bl	8001e14 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff fae6 	bl	8001e14 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e232      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002856:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b31      	ldr	r3, [pc, #196]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	492d      	ldr	r1, [pc, #180]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e01a      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2a      	ldr	r2, [pc, #168]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff fac6 	bl	8001e14 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff fac2 	bl	8001e14 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e20e      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289e:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1e0>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d041      	beq.n	800293e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01c      	beq.n	80028fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c8:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7ff fa9f 	bl	8001e14 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028da:	f7ff fa9b 	bl	8001e14 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1e7      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ef      	beq.n	80028da <HAL_RCC_OscConfig+0x22e>
 80028fa:	e020      	b.n	800293e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002902:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_RCC_OscConfig+0x27c>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff fa82 	bl	8001e14 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002912:	e00d      	b.n	8002930 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7ff fa7e 	bl	8001e14 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d906      	bls.n	8002930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1ca      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002930:	4b8c      	ldr	r3, [pc, #560]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ea      	bne.n	8002914 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80a6 	beq.w	8002a98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002950:	4b84      	ldr	r3, [pc, #528]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x2b4>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x2b6>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002970:	6593      	str	r3, [r2, #88]	@ 0x58
 8002972:	4b7c      	ldr	r3, [pc, #496]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800297e:	2301      	movs	r3, #1
 8002980:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002982:	4b79      	ldr	r3, [pc, #484]	@ (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298e:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	@ (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7ff fa3b 	bl	8001e14 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7ff fa37 	bl	8001e14 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e183      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <HAL_RCC_OscConfig+0x4bc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d108      	bne.n	80029da <HAL_RCC_OscConfig+0x32e>
 80029c8:	4b66      	ldr	r3, [pc, #408]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	4a65      	ldr	r2, [pc, #404]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d8:	e024      	b.n	8002a24 <HAL_RCC_OscConfig+0x378>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d110      	bne.n	8002a04 <HAL_RCC_OscConfig+0x358>
 80029e2:	4b60      	ldr	r3, [pc, #384]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a02:	e00f      	b.n	8002a24 <HAL_RCC_OscConfig+0x378>
 8002a04:	4b57      	ldr	r3, [pc, #348]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0a:	4a56      	ldr	r2, [pc, #344]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	4a52      	ldr	r2, [pc, #328]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d016      	beq.n	8002a5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7ff f9f2 	bl	8001e14 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7ff f9ee 	bl	8001e14 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e138      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4a:	4b46      	ldr	r3, [pc, #280]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ed      	beq.n	8002a34 <HAL_RCC_OscConfig+0x388>
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f9db 	bl	8001e14 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7ff f9d7 	bl	8001e14 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e121      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a78:	4b3a      	ldr	r3, [pc, #232]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ed      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a86:	7ffb      	ldrb	r3, [r7, #31]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	4a34      	ldr	r2, [pc, #208]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7ff f9aa 	bl	8001e14 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac4:	f7ff f9a6 	bl	8001e14 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0f2      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x418>
 8002ae4:	e01b      	b.n	8002b1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aec:	4a1d      	ldr	r2, [pc, #116]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7ff f98d 	bl	8001e14 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002afe:	f7ff f989 	bl	8001e14 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0d5      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b10:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ef      	bne.n	8002afe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80c9 	beq.w	8002cba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	f000 8083 	beq.w	8002c3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d15e      	bne.n	8002bfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <HAL_RCC_OscConfig+0x4b8>)
 8002b44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f963 	bl	8001e14 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b50:	e00c      	b.n	8002b6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7ff f95f 	bl	8001e14 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d905      	bls.n	8002b6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0ab      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	4b55      	ldr	r3, [pc, #340]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ec      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b78:	4b52      	ldr	r3, [pc, #328]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <HAL_RCC_OscConfig+0x61c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6a11      	ldr	r1, [r2, #32]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b92:	0212      	lsls	r2, r2, #8
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b9a:	0852      	lsrs	r2, r2, #1
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0552      	lsls	r2, r2, #21
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ba6:	0852      	lsrs	r2, r2, #1
 8002ba8:	3a01      	subs	r2, #1
 8002baa:	0652      	lsls	r2, r2, #25
 8002bac:	4311      	orrs	r1, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bb2:	06d2      	lsls	r2, r2, #27
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4943      	ldr	r1, [pc, #268]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a40      	ldr	r2, [pc, #256]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f91e 	bl	8001e14 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7ff f91a 	bl	8001e14 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e066      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	4b35      	ldr	r3, [pc, #212]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x530>
 8002bfa:	e05e      	b.n	8002cba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a30      	ldr	r2, [pc, #192]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f904 	bl	8001e14 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff f900 	bl	8001e14 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04c      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c22:	4b28      	ldr	r3, [pc, #160]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c2e:	4b25      	ldr	r3, [pc, #148]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	4924      	ldr	r1, [pc, #144]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_OscConfig+0x620>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60cb      	str	r3, [r1, #12]
 8002c3a:	e03e      	b.n	8002cba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e039      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d12c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d123      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d113      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	019f800c 	.word	0x019f800c
 8002ccc:	feeefffc 	.word	0xfeeefffc

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e11e      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b91      	ldr	r3, [pc, #580]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d910      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b8e      	ldr	r3, [pc, #568]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 020f 	bic.w	r2, r3, #15
 8002cfe:	498c      	ldr	r1, [pc, #560]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b8a      	ldr	r3, [pc, #552]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e106      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d073      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d129      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2c:	4b81      	ldr	r3, [pc, #516]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0f4      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d3c:	f000 f99e 	bl	800307c <RCC_GetSysClockFreqFromPLLSource>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4a7c      	ldr	r2, [pc, #496]	@ (8002f38 <HAL_RCC_ClockConfig+0x268>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d93f      	bls.n	8002dca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d033      	beq.n	8002dca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d12f      	bne.n	8002dca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d6a:	4b72      	ldr	r3, [pc, #456]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d72:	4a70      	ldr	r2, [pc, #448]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e024      	b.n	8002dca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d88:	4b6a      	ldr	r3, [pc, #424]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0c6      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d98:	4b66      	ldr	r3, [pc, #408]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0be      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002da8:	f000 f8ce 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4a61      	ldr	r2, [pc, #388]	@ (8002f38 <HAL_RCC_ClockConfig+0x268>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d909      	bls.n	8002dca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b5a      	ldr	r3, [pc, #360]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4957      	ldr	r1, [pc, #348]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ddc:	f7ff f81a 	bl	8001e14 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7ff f816 	bl	8001e14 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e095      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d023      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b43      	ldr	r3, [pc, #268]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a42      	ldr	r2, [pc, #264]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e44:	4a3b      	ldr	r2, [pc, #236]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b39      	ldr	r3, [pc, #228]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4936      	ldr	r1, [pc, #216]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b80      	cmp	r3, #128	@ 0x80
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e66:	4b33      	ldr	r3, [pc, #204]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a32      	ldr	r2, [pc, #200]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002e6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b2f      	ldr	r3, [pc, #188]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d21d      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	4929      	ldr	r1, [pc, #164]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e90:	f7fe ffc0 	bl	8001e14 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe ffbc 	bl	8001e14 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e03b      	b.n	8002f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b20      	ldr	r3, [pc, #128]	@ (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1ed      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4917      	ldr	r1, [pc, #92]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee6:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	490f      	ldr	r1, [pc, #60]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002efa:	f000 f825 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <HAL_RCC_ClockConfig+0x264>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <HAL_RCC_ClockConfig+0x26c>)
 8002f0c:	5ccb      	ldrb	r3, [r1, r3]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_RCC_ClockConfig+0x270>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_RCC_ClockConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ff2c 	bl	8001d7c <HAL_InitTick>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	04c4b400 	.word	0x04c4b400
 8002f3c:	0800977c 	.word	0x0800977c
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e047      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f60:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f6c:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e03e      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d136      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	4a16      	ldr	r2, [pc, #88]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	0a12      	lsrs	r2, r2, #8
 8002faa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
      break;
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb6:	4a13      	ldr	r2, [pc, #76]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4a10      	ldr	r2, [pc, #64]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	0a12      	lsrs	r2, r2, #8
 8002fc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
      break;
 8002fce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0e5b      	lsrs	r3, r3, #25
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e001      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ff0:	693b      	ldr	r3, [r7, #16]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	00f42400 	.word	0x00f42400
 8003008:	007a1200 	.word	0x007a1200

0800300c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_RCC_GetHCLKFreq+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000000 	.word	0x20000000

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003028:	f7ff fff0 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	@ (800304c <HAL_RCC_GetPCLK1Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	0800978c 	.word	0x0800978c

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003054:	f7ff ffda 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0adb      	lsrs	r3, r3, #11
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4904      	ldr	r1, [pc, #16]	@ (8003078 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	0800978c 	.word	0x0800978c

0800307c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003082:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800308c:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3301      	adds	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d10c      	bne.n	80030ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a0:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030aa:	68d2      	ldr	r2, [r2, #12]
 80030ac:	0a12      	lsrs	r2, r2, #8
 80030ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]
    break;
 80030b8:	e00c      	b.n	80030d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ba:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	4a0e      	ldr	r2, [pc, #56]	@ (80030fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	0a12      	lsrs	r2, r2, #8
 80030c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
    break;
 80030d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0e5b      	lsrs	r3, r3, #25
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030ee:	687b      	ldr	r3, [r7, #4]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40021000 	.word	0x40021000
 8003100:	007a1200 	.word	0x007a1200
 8003104:	00f42400 	.word	0x00f42400

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003110:	2300      	movs	r3, #0
 8003112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003114:	2300      	movs	r3, #0
 8003116:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8098 	beq.w	8003256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b40      	ldr	r3, [pc, #256]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	4a3f      	ldr	r2, [pc, #252]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003140:	6593      	str	r3, [r2, #88]	@ 0x58
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314e:	2301      	movs	r3, #1
 8003150:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003152:	4b3a      	ldr	r3, [pc, #232]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a39      	ldr	r2, [pc, #228]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800315e:	f7fe fe59 	bl	8001e14 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003164:	e009      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fe55 	bl	8001e14 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d902      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	74fb      	strb	r3, [r7, #19]
        break;
 8003178:	e005      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317a:	4b30      	ldr	r3, [pc, #192]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ef      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d159      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800318c:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003196:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01e      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d019      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a8:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b4:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031d4:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fe15 	bl	8001e14 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ec:	e00b      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fe11 	bl	8001e14 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d902      	bls.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	74fb      	strb	r3, [r7, #19]
            break;
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003206:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ec      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003228:	4903      	ldr	r1, [pc, #12]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003230:	e008      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
 8003236:	e005      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003244:	7c7b      	ldrb	r3, [r7, #17]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4ba7      	ldr	r3, [pc, #668]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4aa6      	ldr	r2, [pc, #664]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003262:	4ba1      	ldr	r3, [pc, #644]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	499d      	ldr	r1, [pc, #628]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003284:	4b98      	ldr	r3, [pc, #608]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f023 020c 	bic.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4995      	ldr	r1, [pc, #596]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a6:	4b90      	ldr	r3, [pc, #576]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	498c      	ldr	r1, [pc, #560]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c8:	4b87      	ldr	r3, [pc, #540]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	4984      	ldr	r1, [pc, #528]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ea:	4b7f      	ldr	r3, [pc, #508]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	497b      	ldr	r1, [pc, #492]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800330c:	4b76      	ldr	r3, [pc, #472]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	4973      	ldr	r1, [pc, #460]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332e:	4b6e      	ldr	r3, [pc, #440]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	496a      	ldr	r1, [pc, #424]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003350:	4b65      	ldr	r3, [pc, #404]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4962      	ldr	r1, [pc, #392]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003372:	4b5d      	ldr	r3, [pc, #372]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	4959      	ldr	r1, [pc, #356]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003394:	4b54      	ldr	r3, [pc, #336]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003396:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	4951      	ldr	r1, [pc, #324]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033b6:	4b4c      	ldr	r3, [pc, #304]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	4948      	ldr	r1, [pc, #288]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d8:	4b43      	ldr	r3, [pc, #268]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4940      	ldr	r1, [pc, #256]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b3b      	ldr	r3, [pc, #236]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a3a      	ldr	r2, [pc, #232]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003402:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003410:	4b35      	ldr	r3, [pc, #212]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	4932      	ldr	r1, [pc, #200]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a2c      	ldr	r2, [pc, #176]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003448:	4b27      	ldr	r3, [pc, #156]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	4924      	ldr	r1, [pc, #144]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003468:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003472:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d015      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	4916      	ldr	r1, [pc, #88]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349e:	d105      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a0:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a10      	ldr	r2, [pc, #64]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d019      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034b8:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	4908      	ldr	r1, [pc, #32]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034d6:	d109      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a02      	ldr	r2, [pc, #8]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034e2:	60d3      	str	r3, [r2, #12]
 80034e4:	e002      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034f8:	4b29      	ldr	r3, [pc, #164]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	4926      	ldr	r1, [pc, #152]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003518:	4b21      	ldr	r3, [pc, #132]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a20      	ldr	r2, [pc, #128]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003522:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353e:	4918      	ldr	r1, [pc, #96]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003550:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003568:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800356a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800356e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	490a      	ldr	r1, [pc, #40]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a04      	ldr	r2, [pc, #16]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003594:	7cbb      	ldrb	r3, [r7, #18]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e042      	b.n	800363c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fe f943 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2224      	movs	r2, #36	@ 0x24
 80035d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 ff12 	bl	8004418 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fc13 	bl	8003e20 <UART_SetConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e01b      	b.n	800363c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 ff91 	bl	800455c <UART_CheckIdleState>
 800363a:	4603      	mov	r3, r0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	@ 0x28
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	2b20      	cmp	r3, #32
 800365c:	d17b      	bne.n	8003756 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_UART_Transmit+0x26>
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e074      	b.n	8003758 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2221      	movs	r2, #33	@ 0x21
 800367a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367e:	f7fe fbc9 	bl	8001e14 <HAL_GetTick>
 8003682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369c:	d108      	bne.n	80036b0 <HAL_UART_Transmit+0x6c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e003      	b.n	80036b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036b8:	e030      	b.n	800371c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2180      	movs	r1, #128	@ 0x80
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fff3 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e03d      	b.n	8003758 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	3302      	adds	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	e007      	b.n	800370a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	3301      	adds	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1c8      	bne.n	80036ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2200      	movs	r2, #0
 8003730:	2140      	movs	r1, #64	@ 0x40
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 ffbc 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e006      	b.n	8003758 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0ba      	sub	sp, #232	@ 0xe8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800378a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800378e:	4013      	ands	r3, r2
 8003790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11b      	bne.n	80037d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8300 	beq.w	8003dca <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
      }
      return;
 80037d2:	e2fa      	b.n	8003dca <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8123 	beq.w	8003a24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80037e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003a18 <HAL_UART_IRQHandler+0x2b8>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003a1c <HAL_UART_IRQHandler+0x2bc>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8116 	beq.w	8003a24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d011      	beq.n	8003828 <HAL_UART_IRQHandler+0xc8>
 8003804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d011      	beq.n	8003858 <HAL_UART_IRQHandler+0xf8>
 8003834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d011      	beq.n	8003888 <HAL_UART_IRQHandler+0x128>
 8003864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2204      	movs	r2, #4
 8003876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	f043 0202 	orr.w	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d017      	beq.n	80038c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80038a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80038a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003a18 <HAL_UART_IRQHandler+0x2b8>)
 80038a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2208      	movs	r2, #8
 80038b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <HAL_UART_IRQHandler+0x196>
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8266 	beq.w	8003dce <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d013      	beq.n	8003936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800390e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394a:	2b40      	cmp	r3, #64	@ 0x40
 800394c:	d005      	beq.n	800395a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800394e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003952:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d054      	beq.n	8003a04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f001 f838 	bl	80049d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	d146      	bne.n	80039fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800398c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3308      	adds	r3, #8
 8003996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800399a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800399e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1d9      	bne.n	800396e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d017      	beq.n	80039f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ca:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <HAL_UART_IRQHandler+0x2c0>)
 80039cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fbb3 	bl	8002140 <HAL_DMA_Abort_IT>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80039ee:	4610      	mov	r0, r2
 80039f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	e00f      	b.n	8003a14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa09 	bl	8003e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fa:	e00b      	b.n	8003a14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa05 	bl	8003e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a02:	e007      	b.n	8003a14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa01 	bl	8003e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003a12:	e1dc      	b.n	8003dce <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	bf00      	nop
    return;
 8003a16:	e1da      	b.n	8003dce <HAL_UART_IRQHandler+0x66e>
 8003a18:	10000001 	.word	0x10000001
 8003a1c:	04000120 	.word	0x04000120
 8003a20:	08004a9d 	.word	0x08004a9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	f040 8170 	bne.w	8003d0e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8169 	beq.w	8003d0e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8162 	beq.w	8003d0e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b40      	cmp	r3, #64	@ 0x40
 8003a5e:	f040 80d8 	bne.w	8003c12 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80af 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a84:	429a      	cmp	r2, r3
 8003a86:	f080 80a7 	bcs.w	8003bd8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 8087 	bne.w	8003bb6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ad6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1da      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e1      	bne.n	8003af2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3308      	adds	r3, #8
 8003b34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e3      	bne.n	8003b2e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b84:	f023 0310 	bic.w	r3, r3, #16
 8003b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e4      	bne.n	8003b74 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fa6c 	bl	800208e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fd fe9f 	bl	8001914 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003bd6:	e0fc      	b.n	8003dd2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003be2:	429a      	cmp	r2, r3
 8003be4:	f040 80f5 	bne.w	8003dd2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f040 80eb 	bne.w	8003dd2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fe82 	bl	8001914 <HAL_UARTEx_RxEventCallback>
      return;
 8003c10:	e0df      	b.n	8003dd2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80d1 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80cc 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e4      	bne.n	8003c3e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	623b      	str	r3, [r7, #32]
   return(result);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e1      	bne.n	8003c74 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e4      	bne.n	8003cc4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd fe04 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d0c:	e063      	b.n	8003dd6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <HAL_UART_IRQHandler+0x5d8>
 8003d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f001 fc15 	bl	8005560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d36:	e051      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d014      	beq.n	8003d6e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03a      	beq.n	8003dda <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
    }
    return;
 8003d6c:	e035      	b.n	8003dda <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_UART_IRQHandler+0x62e>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fe9e 	bl	8004ac8 <UART_EndTransmit_IT>
    return;
 8003d8c:	e026      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_UART_IRQHandler+0x64e>
 8003d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d9e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 fbee 	bl	8005588 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dac:	e016      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_UART_IRQHandler+0x67c>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da0c      	bge.n	8003ddc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 fbd6 	bl	8005574 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dc8:	e008      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
      return;
 8003dca:	bf00      	nop
 8003dcc:	e006      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
    return;
 8003dce:	bf00      	nop
 8003dd0:	e004      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
      return;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
      return;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_UART_IRQHandler+0x67c>
    return;
 8003dda:	bf00      	nop
  }
}
 8003ddc:	37e8      	adds	r7, #232	@ 0xe8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop

08003de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b08c      	sub	sp, #48	@ 0x30
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4baa      	ldr	r3, [pc, #680]	@ (80040f8 <UART_SetConfig+0x2d8>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	@ (80040fc <UART_SetConfig+0x2dc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003e96:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	f023 010f 	bic.w	r1, r3, #15
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a90      	ldr	r2, [pc, #576]	@ (8004100 <UART_SetConfig+0x2e0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d125      	bne.n	8003f10 <UART_SetConfig+0xf0>
 8003ec4:	4b8f      	ldr	r3, [pc, #572]	@ (8004104 <UART_SetConfig+0x2e4>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d81a      	bhi.n	8003f08 <UART_SetConfig+0xe8>
 8003ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <UART_SetConfig+0xb8>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003ef9 	.word	0x08003ef9
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003f01 	.word	0x08003f01
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eee:	e116      	b.n	800411e <UART_SetConfig+0x2fe>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	e112      	b.n	800411e <UART_SetConfig+0x2fe>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efe:	e10e      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f00:	2308      	movs	r3, #8
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f06:	e10a      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f08:	2310      	movs	r3, #16
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0e:	e106      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a7c      	ldr	r2, [pc, #496]	@ (8004108 <UART_SetConfig+0x2e8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d138      	bne.n	8003f8c <UART_SetConfig+0x16c>
 8003f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8004104 <UART_SetConfig+0x2e4>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d82d      	bhi.n	8003f84 <UART_SetConfig+0x164>
 8003f28:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <UART_SetConfig+0x110>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003f85 	.word	0x08003f85
 8003f38:	08003f85 	.word	0x08003f85
 8003f3c:	08003f85 	.word	0x08003f85
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f85 	.word	0x08003f85
 8003f48:	08003f85 	.word	0x08003f85
 8003f4c:	08003f85 	.word	0x08003f85
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	08003f85 	.word	0x08003f85
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e0d8      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	e0d4      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f74:	2304      	movs	r3, #4
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7a:	e0d0      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f82:	e0cc      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f84:	2310      	movs	r3, #16
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e0c8      	b.n	800411e <UART_SetConfig+0x2fe>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5e      	ldr	r2, [pc, #376]	@ (800410c <UART_SetConfig+0x2ec>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d125      	bne.n	8003fe2 <UART_SetConfig+0x1c2>
 8003f96:	4b5b      	ldr	r3, [pc, #364]	@ (8004104 <UART_SetConfig+0x2e4>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d016      	beq.n	8003fd2 <UART_SetConfig+0x1b2>
 8003fa4:	2b30      	cmp	r3, #48	@ 0x30
 8003fa6:	d818      	bhi.n	8003fda <UART_SetConfig+0x1ba>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d00a      	beq.n	8003fc2 <UART_SetConfig+0x1a2>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d814      	bhi.n	8003fda <UART_SetConfig+0x1ba>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <UART_SetConfig+0x19a>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d008      	beq.n	8003fca <UART_SetConfig+0x1aa>
 8003fb8:	e00f      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc0:	e0ad      	b.n	800411e <UART_SetConfig+0x2fe>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc8:	e0a9      	b.n	800411e <UART_SetConfig+0x2fe>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd0:	e0a5      	b.n	800411e <UART_SetConfig+0x2fe>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd8:	e0a1      	b.n	800411e <UART_SetConfig+0x2fe>
 8003fda:	2310      	movs	r3, #16
 8003fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe0:	e09d      	b.n	800411e <UART_SetConfig+0x2fe>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8004110 <UART_SetConfig+0x2f0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d125      	bne.n	8004038 <UART_SetConfig+0x218>
 8003fec:	4b45      	ldr	r3, [pc, #276]	@ (8004104 <UART_SetConfig+0x2e4>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ff8:	d016      	beq.n	8004028 <UART_SetConfig+0x208>
 8003ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ffc:	d818      	bhi.n	8004030 <UART_SetConfig+0x210>
 8003ffe:	2b80      	cmp	r3, #128	@ 0x80
 8004000:	d00a      	beq.n	8004018 <UART_SetConfig+0x1f8>
 8004002:	2b80      	cmp	r3, #128	@ 0x80
 8004004:	d814      	bhi.n	8004030 <UART_SetConfig+0x210>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <UART_SetConfig+0x1f0>
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d008      	beq.n	8004020 <UART_SetConfig+0x200>
 800400e:	e00f      	b.n	8004030 <UART_SetConfig+0x210>
 8004010:	2300      	movs	r3, #0
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004016:	e082      	b.n	800411e <UART_SetConfig+0x2fe>
 8004018:	2302      	movs	r3, #2
 800401a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401e:	e07e      	b.n	800411e <UART_SetConfig+0x2fe>
 8004020:	2304      	movs	r3, #4
 8004022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004026:	e07a      	b.n	800411e <UART_SetConfig+0x2fe>
 8004028:	2308      	movs	r3, #8
 800402a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402e:	e076      	b.n	800411e <UART_SetConfig+0x2fe>
 8004030:	2310      	movs	r3, #16
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004036:	e072      	b.n	800411e <UART_SetConfig+0x2fe>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a35      	ldr	r2, [pc, #212]	@ (8004114 <UART_SetConfig+0x2f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d12a      	bne.n	8004098 <UART_SetConfig+0x278>
 8004042:	4b30      	ldr	r3, [pc, #192]	@ (8004104 <UART_SetConfig+0x2e4>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004050:	d01a      	beq.n	8004088 <UART_SetConfig+0x268>
 8004052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004056:	d81b      	bhi.n	8004090 <UART_SetConfig+0x270>
 8004058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800405c:	d00c      	beq.n	8004078 <UART_SetConfig+0x258>
 800405e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004062:	d815      	bhi.n	8004090 <UART_SetConfig+0x270>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <UART_SetConfig+0x250>
 8004068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406c:	d008      	beq.n	8004080 <UART_SetConfig+0x260>
 800406e:	e00f      	b.n	8004090 <UART_SetConfig+0x270>
 8004070:	2300      	movs	r3, #0
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004076:	e052      	b.n	800411e <UART_SetConfig+0x2fe>
 8004078:	2302      	movs	r3, #2
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407e:	e04e      	b.n	800411e <UART_SetConfig+0x2fe>
 8004080:	2304      	movs	r3, #4
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004086:	e04a      	b.n	800411e <UART_SetConfig+0x2fe>
 8004088:	2308      	movs	r3, #8
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408e:	e046      	b.n	800411e <UART_SetConfig+0x2fe>
 8004090:	2310      	movs	r3, #16
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e042      	b.n	800411e <UART_SetConfig+0x2fe>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a17      	ldr	r2, [pc, #92]	@ (80040fc <UART_SetConfig+0x2dc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d13a      	bne.n	8004118 <UART_SetConfig+0x2f8>
 80040a2:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <UART_SetConfig+0x2e4>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040b0:	d01a      	beq.n	80040e8 <UART_SetConfig+0x2c8>
 80040b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040b6:	d81b      	bhi.n	80040f0 <UART_SetConfig+0x2d0>
 80040b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040bc:	d00c      	beq.n	80040d8 <UART_SetConfig+0x2b8>
 80040be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c2:	d815      	bhi.n	80040f0 <UART_SetConfig+0x2d0>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <UART_SetConfig+0x2b0>
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040cc:	d008      	beq.n	80040e0 <UART_SetConfig+0x2c0>
 80040ce:	e00f      	b.n	80040f0 <UART_SetConfig+0x2d0>
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d6:	e022      	b.n	800411e <UART_SetConfig+0x2fe>
 80040d8:	2302      	movs	r3, #2
 80040da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040de:	e01e      	b.n	800411e <UART_SetConfig+0x2fe>
 80040e0:	2304      	movs	r3, #4
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e6:	e01a      	b.n	800411e <UART_SetConfig+0x2fe>
 80040e8:	2308      	movs	r3, #8
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e016      	b.n	800411e <UART_SetConfig+0x2fe>
 80040f0:	2310      	movs	r3, #16
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e012      	b.n	800411e <UART_SetConfig+0x2fe>
 80040f8:	cfff69f3 	.word	0xcfff69f3
 80040fc:	40008000 	.word	0x40008000
 8004100:	40013800 	.word	0x40013800
 8004104:	40021000 	.word	0x40021000
 8004108:	40004400 	.word	0x40004400
 800410c:	40004800 	.word	0x40004800
 8004110:	40004c00 	.word	0x40004c00
 8004114:	40005000 	.word	0x40005000
 8004118:	2310      	movs	r3, #16
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4aae      	ldr	r2, [pc, #696]	@ (80043dc <UART_SetConfig+0x5bc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	f040 8097 	bne.w	8004258 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800412a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800412e:	2b08      	cmp	r3, #8
 8004130:	d823      	bhi.n	800417a <UART_SetConfig+0x35a>
 8004132:	a201      	add	r2, pc, #4	@ (adr r2, 8004138 <UART_SetConfig+0x318>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800417b 	.word	0x0800417b
 8004140:	08004165 	.word	0x08004165
 8004144:	0800417b 	.word	0x0800417b
 8004148:	0800416b 	.word	0x0800416b
 800414c:	0800417b 	.word	0x0800417b
 8004150:	0800417b 	.word	0x0800417b
 8004154:	0800417b 	.word	0x0800417b
 8004158:	08004173 	.word	0x08004173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800415c:	f7fe ff62 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8004160:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004162:	e010      	b.n	8004186 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004164:	4b9e      	ldr	r3, [pc, #632]	@ (80043e0 <UART_SetConfig+0x5c0>)
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004168:	e00d      	b.n	8004186 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416a:	f7fe feed 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 800416e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004170:	e009      	b.n	8004186 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004178:	e005      	b.n	8004186 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8130 	beq.w	80043ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	4a94      	ldr	r2, [pc, #592]	@ (80043e4 <UART_SetConfig+0x5c4>)
 8004194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004198:	461a      	mov	r2, r3
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	fbb3 f3f2 	udiv	r3, r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d305      	bcc.n	80041be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d903      	bls.n	80041c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041c4:	e113      	b.n	80043ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	2200      	movs	r2, #0
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	60fa      	str	r2, [r7, #12]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	4a84      	ldr	r2, [pc, #528]	@ (80043e4 <UART_SetConfig+0x5c4>)
 80041d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2200      	movs	r2, #0
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041e8:	f7fc fd66 	bl	8000cb8 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	020b      	lsls	r3, r1, #8
 80041fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004202:	0202      	lsls	r2, r0, #8
 8004204:	6979      	ldr	r1, [r7, #20]
 8004206:	6849      	ldr	r1, [r1, #4]
 8004208:	0849      	lsrs	r1, r1, #1
 800420a:	2000      	movs	r0, #0
 800420c:	460c      	mov	r4, r1
 800420e:	4605      	mov	r5, r0
 8004210:	eb12 0804 	adds.w	r8, r2, r4
 8004214:	eb43 0905 	adc.w	r9, r3, r5
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	469a      	mov	sl, r3
 8004220:	4693      	mov	fp, r2
 8004222:	4652      	mov	r2, sl
 8004224:	465b      	mov	r3, fp
 8004226:	4640      	mov	r0, r8
 8004228:	4649      	mov	r1, r9
 800422a:	f7fc fd45 	bl	8000cb8 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4613      	mov	r3, r2
 8004234:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800423c:	d308      	bcc.n	8004250 <UART_SetConfig+0x430>
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004244:	d204      	bcs.n	8004250 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	e0ce      	b.n	80043ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004256:	e0ca      	b.n	80043ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004260:	d166      	bne.n	8004330 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004262:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004266:	2b08      	cmp	r3, #8
 8004268:	d827      	bhi.n	80042ba <UART_SetConfig+0x49a>
 800426a:	a201      	add	r2, pc, #4	@ (adr r2, 8004270 <UART_SetConfig+0x450>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042ab 	.word	0x080042ab
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042bb 	.word	0x080042bb
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7fe fec6 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8004298:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800429a:	e014      	b.n	80042c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7fe fed8 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 80042a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042a2:	e010      	b.n	80042c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b4e      	ldr	r3, [pc, #312]	@ (80043e0 <UART_SetConfig+0x5c0>)
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042a8:	e00d      	b.n	80042c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7fe fe4d 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 80042ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b0:	e009      	b.n	80042c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042b8:	e005      	b.n	80042c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8090 	beq.w	80043ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	4a44      	ldr	r2, [pc, #272]	@ (80043e4 <UART_SetConfig+0x5c4>)
 80042d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d8:	461a      	mov	r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e0:	005a      	lsls	r2, r3, #1
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	441a      	add	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d916      	bls.n	8004328 <UART_SetConfig+0x508>
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d212      	bcs.n	8004328 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f023 030f 	bic.w	r3, r3, #15
 800430a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	b29b      	uxth	r3, r3
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	b29a      	uxth	r2, r3
 8004318:	8bfb      	ldrh	r3, [r7, #30]
 800431a:	4313      	orrs	r3, r2
 800431c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	8bfa      	ldrh	r2, [r7, #30]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	e062      	b.n	80043ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800432e:	e05e      	b.n	80043ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004330:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004334:	2b08      	cmp	r3, #8
 8004336:	d828      	bhi.n	800438a <UART_SetConfig+0x56a>
 8004338:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <UART_SetConfig+0x520>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004375 	.word	0x08004375
 800434c:	0800438b 	.word	0x0800438b
 8004350:	0800437b 	.word	0x0800437b
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800438b 	.word	0x0800438b
 800435c:	0800438b 	.word	0x0800438b
 8004360:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe fe5e 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8004368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800436a:	e014      	b.n	8004396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fe fe70 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8004370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004372:	e010      	b.n	8004396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b1a      	ldr	r3, [pc, #104]	@ (80043e0 <UART_SetConfig+0x5c0>)
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004378:	e00d      	b.n	8004396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fe fde5 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 800437e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004380:	e009      	b.n	8004396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004388:	e005      	b.n	8004396 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004394:	bf00      	nop
    }

    if (pclk != 0U)
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	2b00      	cmp	r3, #0
 800439a:	d028      	beq.n	80043ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	4a10      	ldr	r2, [pc, #64]	@ (80043e4 <UART_SetConfig+0x5c4>)
 80043a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	441a      	add	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d910      	bls.n	80043e8 <UART_SetConfig+0x5c8>
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043cc:	d20c      	bcs.n	80043e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	e009      	b.n	80043ee <UART_SetConfig+0x5ce>
 80043da:	bf00      	nop
 80043dc:	40008000 	.word	0x40008000
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	08009794 	.word	0x08009794
      }
      else
      {
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800440a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800440e:	4618      	mov	r0, r3
 8004410:	3730      	adds	r7, #48	@ 0x30
 8004412:	46bd      	mov	sp, r7
 8004414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01a      	beq.n	800452e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004516:	d10a      	bne.n	800452e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b098      	sub	sp, #96	@ 0x60
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800456c:	f7fd fc52 	bl	8001e14 <HAL_GetTick>
 8004570:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d12f      	bne.n	80045e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004580:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f88e 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d022      	beq.n	80045e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e6      	bne.n	800459a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e063      	b.n	80046a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d149      	bne.n	8004682 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f6:	2200      	movs	r2, #0
 80045f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f857 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03c      	beq.n	8004682 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	623b      	str	r3, [r7, #32]
   return(result);
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800461c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004626:	633b      	str	r3, [r7, #48]	@ 0x30
 8004628:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800462c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	60fb      	str	r3, [r7, #12]
   return(result);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	617b      	str	r3, [r7, #20]
   return(result);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e5      	bne.n	800463a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e012      	b.n	80046a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3758      	adds	r7, #88	@ 0x58
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c0:	e04f      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d04b      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fd fba3 	bl	8001e14 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e04e      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d037      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b80      	cmp	r3, #128	@ 0x80
 80046f6:	d034      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b40      	cmp	r3, #64	@ 0x40
 80046fc:	d031      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b08      	cmp	r3, #8
 800470a:	d110      	bne.n	800472e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2208      	movs	r2, #8
 8004712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f95b 	bl	80049d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2208      	movs	r2, #8
 800471e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e029      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473c:	d111      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f941 	bl	80049d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e00f      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d0a0      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800478c:	b480      	push	{r7}
 800478e:	b0a3      	sub	sp, #140	@ 0x8c
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047be:	d10e      	bne.n	80047de <UART_Start_Receive_IT+0x52>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <UART_Start_Receive_IT+0x48>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80047ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047d2:	e02d      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	22ff      	movs	r2, #255	@ 0xff
 80047d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047dc:	e028      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <UART_Start_Receive_IT+0x76>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <UART_Start_Receive_IT+0x6c>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	@ 0xff
 80047f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047f6:	e01b      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	227f      	movs	r2, #127	@ 0x7f
 80047fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004800:	e016      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800480a:	d10d      	bne.n	8004828 <UART_Start_Receive_IT+0x9c>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <UART_Start_Receive_IT+0x92>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	227f      	movs	r2, #127	@ 0x7f
 8004818:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800481c:	e008      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	223f      	movs	r2, #63	@ 0x3f
 8004822:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004826:	e003      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2222      	movs	r2, #34	@ 0x22
 800483c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004864:	673a      	str	r2, [r7, #112]	@ 0x70
 8004866:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800486a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e3      	bne.n	8004840 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004880:	d14f      	bne.n	8004922 <UART_Start_Receive_IT+0x196>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	429a      	cmp	r2, r3
 800488c:	d349      	bcc.n	8004922 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	d107      	bne.n	80048a8 <UART_Start_Receive_IT+0x11c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a47      	ldr	r2, [pc, #284]	@ (80049c0 <UART_Start_Receive_IT+0x234>)
 80048a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80048a6:	e002      	b.n	80048ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a46      	ldr	r2, [pc, #280]	@ (80049c4 <UART_Start_Receive_IT+0x238>)
 80048ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01a      	beq.n	80048ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80048c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e4      	bne.n	80048b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800490c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800490e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800491a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_Start_Receive_IT+0x160>
 8004920:	e046      	b.n	80049b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492a:	d107      	bne.n	800493c <UART_Start_Receive_IT+0x1b0>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a24      	ldr	r2, [pc, #144]	@ (80049c8 <UART_Start_Receive_IT+0x23c>)
 8004938:	675a      	str	r2, [r3, #116]	@ 0x74
 800493a:	e002      	b.n	8004942 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a23      	ldr	r2, [pc, #140]	@ (80049cc <UART_Start_Receive_IT+0x240>)
 8004940:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d019      	beq.n	800497e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800495e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004968:	637b      	str	r3, [r7, #52]	@ 0x34
 800496a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800496e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <UART_Start_Receive_IT+0x1be>
 800497c:	e018      	b.n	80049b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f043 0320 	orr.w	r3, r3, #32
 8004992:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e6      	bne.n	800497e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	378c      	adds	r7, #140	@ 0x8c
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	080051f5 	.word	0x080051f5
 80049c4:	08004e91 	.word	0x08004e91
 80049c8:	08004cd9 	.word	0x08004cd9
 80049cc:	08004b21 	.word	0x08004b21

080049d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b095      	sub	sp, #84	@ 0x54
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e6      	bne.n	80049d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d118      	bne.n	8004a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6979      	ldr	r1, [r7, #20]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	613b      	str	r3, [r7, #16]
   return(result);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a90:	bf00      	nop
 8004a92:	3754      	adds	r7, #84	@ 0x54
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff f9a6 	bl	8003e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6979      	ldr	r1, [r7, #20]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	613b      	str	r3, [r7, #16]
   return(result);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e6      	bne.n	8004ad0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff f967 	bl	8003de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b16:	bf00      	nop
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b09c      	sub	sp, #112	@ 0x70
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004b2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b38:	2b22      	cmp	r3, #34	@ 0x22
 8004b3a:	f040 80be 	bne.w	8004cba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b4c:	b2d9      	uxtb	r1, r3
 8004b4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	400a      	ands	r2, r1
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 80a1 	bne.w	8004cca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ba8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e6      	bne.n	8004b88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bda:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e5      	bne.n	8004bba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a33      	ldr	r2, [pc, #204]	@ (8004cd4 <UART_RxISR_8BIT+0x1b4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d01f      	beq.n	8004c4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d018      	beq.n	8004c4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	623b      	str	r3, [r7, #32]
   return(result);
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d12e      	bne.n	8004cb2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	69b9      	ldr	r1, [r7, #24]
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	617b      	str	r3, [r7, #20]
   return(result);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e6      	bne.n	8004c5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d103      	bne.n	8004ca2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fe32 	bl	8001914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cb0:	e00b      	b.n	8004cca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff f8a0 	bl	8003df8 <HAL_UART_RxCpltCallback>
}
 8004cb8:	e007      	b.n	8004cca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0208 	orr.w	r2, r2, #8
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	3770      	adds	r7, #112	@ 0x70
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40008000 	.word	0x40008000

08004cd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b09c      	sub	sp, #112	@ 0x70
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ce6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf0:	2b22      	cmp	r3, #34	@ 0x22
 8004cf2:	f040 80be 	bne.w	8004e72 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004d0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1a:	1c9a      	adds	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 80a1 	bne.w	8004e82 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d54:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d60:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e6      	bne.n	8004d40 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d92:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a33      	ldr	r2, [pc, #204]	@ (8004e8c <UART_RxISR_16BIT+0x1b4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01f      	beq.n	8004e04 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d12e      	bne.n	8004e6a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f023 0310 	bic.w	r3, r3, #16
 8004e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6979      	ldr	r1, [r7, #20]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e6      	bne.n	8004e12 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d103      	bne.n	8004e5a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2210      	movs	r2, #16
 8004e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc fd56 	bl	8001914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e68:	e00b      	b.n	8004e82 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe ffc4 	bl	8003df8 <HAL_UART_RxCpltCallback>
}
 8004e70:	e007      	b.n	8004e82 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	619a      	str	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	3770      	adds	r7, #112	@ 0x70
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40008000 	.word	0x40008000

08004e90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b0ac      	sub	sp, #176	@ 0xb0
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004e9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ec6:	2b22      	cmp	r3, #34	@ 0x22
 8004ec8:	f040 8183 	bne.w	80051d2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004ed2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ed6:	e126      	b.n	8005126 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ee2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004ee6:	b2d9      	uxtb	r1, r3
 8004ee8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d053      	beq.n	8004fd2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2202      	movs	r2, #2
 8004f78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb0:	f043 0202 	orr.w	r2, r3, #2
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d006      	beq.n	8004fd2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fe ff21 	bl	8003e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 80a3 	bne.w	8005126 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005002:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005004:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005008:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005010:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e4      	bne.n	8004fe0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800503e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005040:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005044:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800504c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e1      	bne.n	8005016 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a60      	ldr	r2, [pc, #384]	@ (80051ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d021      	beq.n	80050b4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01a      	beq.n	80050b4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800508c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800508e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80050a2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80050a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80050ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e4      	bne.n	800507e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d130      	bne.n	800511e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f023 0310 	bic.w	r3, r3, #16
 80050d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e4      	bne.n	80050c2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b10      	cmp	r3, #16
 8005104:	d103      	bne.n	800510e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2210      	movs	r2, #16
 800510c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc fbfc 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800511c:	e00e      	b.n	800513c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fe fe6a 	bl	8003df8 <HAL_UART_RxCpltCallback>
        break;
 8005124:	e00a      	b.n	800513c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005126:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800512e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	f47f aece 	bne.w	8004ed8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005142:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005146:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800514a:	2b00      	cmp	r3, #0
 800514c:	d049      	beq.n	80051e2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005154:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005158:	429a      	cmp	r2, r3
 800515a:	d242      	bcs.n	80051e2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	61fb      	str	r3, [r7, #28]
   return(result);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005172:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e3      	bne.n	800515c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a16      	ldr	r2, [pc, #88]	@ (80051f0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005198:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f043 0320 	orr.w	r3, r3, #32
 80051ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6979      	ldr	r1, [r7, #20]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051d0:	e007      	b.n	80051e2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0208 	orr.w	r2, r2, #8
 80051e0:	619a      	str	r2, [r3, #24]
}
 80051e2:	bf00      	nop
 80051e4:	37b0      	adds	r7, #176	@ 0xb0
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40008000 	.word	0x40008000
 80051f0:	08004b21 	.word	0x08004b21

080051f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0ae      	sub	sp, #184	@ 0xb8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005202:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800522a:	2b22      	cmp	r3, #34	@ 0x22
 800522c:	f040 8187 	bne.w	800553e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005236:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800523a:	e12a      	b.n	8005492 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800524e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005252:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005256:	4013      	ands	r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800525e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	2b00      	cmp	r3, #0
 8005290:	d053      	beq.n	800533a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800529e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b8:	f043 0201 	orr.w	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80052ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2202      	movs	r2, #2
 80052e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	f043 0204 	orr.w	r2, r3, #4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d011      	beq.n	8005322 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80052fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2204      	movs	r2, #4
 8005310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005318:	f043 0202 	orr.w	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fe fd6d 	bl	8003e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 80a5 	bne.w	8005492 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800536a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800536e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800537c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e2      	bne.n	8005348 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80053aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e1      	bne.n	8005382 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a60      	ldr	r2, [pc, #384]	@ (8005558 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d021      	beq.n	8005420 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01a      	beq.n	8005420 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800540c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800540e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005412:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800541a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e4      	bne.n	80053ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d130      	bne.n	800548a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005450:	647b      	str	r3, [r7, #68]	@ 0x44
 8005452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e4      	bne.n	800542e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b10      	cmp	r3, #16
 8005470:	d103      	bne.n	800547a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2210      	movs	r2, #16
 8005478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc fa46 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005488:	e00e      	b.n	80054a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fe fcb4 	bl	8003df8 <HAL_UART_RxCpltCallback>
        break;
 8005490:	e00a      	b.n	80054a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005492:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800549a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f47f aeca 	bne.w	800523c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054ae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80054b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d049      	beq.n	800554e <UART_RxISR_16BIT_FIFOEN+0x35a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80054c0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d242      	bcs.n	800554e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	623b      	str	r3, [r7, #32]
   return(result);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80054ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e3      	bne.n	80054c8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a16      	ldr	r2, [pc, #88]	@ (800555c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005504:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	60fb      	str	r3, [r7, #12]
   return(result);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f043 0320 	orr.w	r3, r3, #32
 800551a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69b9      	ldr	r1, [r7, #24]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	617b      	str	r3, [r7, #20]
   return(result);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e4      	bne.n	8005506 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800553c:	e007      	b.n	800554e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	619a      	str	r2, [r3, #24]
}
 800554e:	bf00      	nop
 8005550:	37b8      	adds	r7, #184	@ 0xb8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40008000 	.word	0x40008000
 800555c:	08004cd9 	.word	0x08004cd9

08005560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e027      	b.n	8005602 <HAL_UARTEx_DisableFifoMode+0x66>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	@ 0x24
 80055be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80055e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005622:	2302      	movs	r3, #2
 8005624:	e02d      	b.n	8005682 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2224      	movs	r2, #36	@ 0x24
 8005632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8a0 	bl	80057a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800569e:	2302      	movs	r3, #2
 80056a0:	e02d      	b.n	80056fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2224      	movs	r2, #36	@ 0x24
 80056ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f862 	bl	80057a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b08c      	sub	sp, #48	@ 0x30
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	4613      	mov	r3, r2
 8005712:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005720:	2b20      	cmp	r3, #32
 8005722:	d13b      	bne.n	800579c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e034      	b.n	800579e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	461a      	mov	r2, r3
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff f820 	bl	800478c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11d      	bne.n	8005790 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2210      	movs	r2, #16
 800575a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	617b      	str	r3, [r7, #20]
   return(result);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f043 0310 	orr.w	r3, r3, #16
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
 800577c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6a39      	ldr	r1, [r7, #32]
 8005780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	61fb      	str	r3, [r7, #28]
   return(result);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800578e:	e002      	b.n	8005796 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8005796:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800579a:	e000      	b.n	800579e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3730      	adds	r7, #48	@ 0x30
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d108      	bne.n	80057ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057c8:	e031      	b.n	800582e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057ca:	2308      	movs	r3, #8
 80057cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057ce:	2308      	movs	r3, #8
 80057d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	0e5b      	lsrs	r3, r3, #25
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	0f5b      	lsrs	r3, r3, #29
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	7b3a      	ldrb	r2, [r7, #12]
 80057f6:	4911      	ldr	r1, [pc, #68]	@ (800583c <UARTEx_SetNbDataToProcess+0x94>)
 80057f8:	5c8a      	ldrb	r2, [r1, r2]
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057fe:	7b3a      	ldrb	r2, [r7, #12]
 8005800:	490f      	ldr	r1, [pc, #60]	@ (8005840 <UARTEx_SetNbDataToProcess+0x98>)
 8005802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005804:	fb93 f3f2 	sdiv	r3, r3, r2
 8005808:	b29a      	uxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	7b7a      	ldrb	r2, [r7, #13]
 8005814:	4909      	ldr	r1, [pc, #36]	@ (800583c <UARTEx_SetNbDataToProcess+0x94>)
 8005816:	5c8a      	ldrb	r2, [r1, r2]
 8005818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800581c:	7b7a      	ldrb	r2, [r7, #13]
 800581e:	4908      	ldr	r1, [pc, #32]	@ (8005840 <UARTEx_SetNbDataToProcess+0x98>)
 8005820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005822:	fb93 f3f2 	sdiv	r3, r3, r2
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	080097ac 	.word	0x080097ac
 8005840:	080097b4 	.word	0x080097b4

08005844 <pow>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	ed2d 8b02 	vpush	{d8}
 800584a:	eeb0 8a40 	vmov.f32	s16, s0
 800584e:	eef0 8a60 	vmov.f32	s17, s1
 8005852:	ec55 4b11 	vmov	r4, r5, d1
 8005856:	f000 f873 	bl	8005940 <__ieee754_pow>
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	ec57 6b10 	vmov	r6, r7, d0
 8005866:	f7fb f999 	bl	8000b9c <__aeabi_dcmpun>
 800586a:	2800      	cmp	r0, #0
 800586c:	d13b      	bne.n	80058e6 <pow+0xa2>
 800586e:	ec51 0b18 	vmov	r0, r1, d8
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	f7fb f95f 	bl	8000b38 <__aeabi_dcmpeq>
 800587a:	b1b8      	cbz	r0, 80058ac <pow+0x68>
 800587c:	2200      	movs	r2, #0
 800587e:	2300      	movs	r3, #0
 8005880:	4620      	mov	r0, r4
 8005882:	4629      	mov	r1, r5
 8005884:	f7fb f958 	bl	8000b38 <__aeabi_dcmpeq>
 8005888:	2800      	cmp	r0, #0
 800588a:	d146      	bne.n	800591a <pow+0xd6>
 800588c:	ec45 4b10 	vmov	d0, r4, r5
 8005890:	f000 f848 	bl	8005924 <finite>
 8005894:	b338      	cbz	r0, 80058e6 <pow+0xa2>
 8005896:	2200      	movs	r2, #0
 8005898:	2300      	movs	r3, #0
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	f7fb f955 	bl	8000b4c <__aeabi_dcmplt>
 80058a2:	b300      	cbz	r0, 80058e6 <pow+0xa2>
 80058a4:	f001 feb0 	bl	8007608 <__errno>
 80058a8:	2322      	movs	r3, #34	@ 0x22
 80058aa:	e01b      	b.n	80058e4 <pow+0xa0>
 80058ac:	ec47 6b10 	vmov	d0, r6, r7
 80058b0:	f000 f838 	bl	8005924 <finite>
 80058b4:	b9e0      	cbnz	r0, 80058f0 <pow+0xac>
 80058b6:	eeb0 0a48 	vmov.f32	s0, s16
 80058ba:	eef0 0a68 	vmov.f32	s1, s17
 80058be:	f000 f831 	bl	8005924 <finite>
 80058c2:	b1a8      	cbz	r0, 80058f0 <pow+0xac>
 80058c4:	ec45 4b10 	vmov	d0, r4, r5
 80058c8:	f000 f82c 	bl	8005924 <finite>
 80058cc:	b180      	cbz	r0, 80058f0 <pow+0xac>
 80058ce:	4632      	mov	r2, r6
 80058d0:	463b      	mov	r3, r7
 80058d2:	4630      	mov	r0, r6
 80058d4:	4639      	mov	r1, r7
 80058d6:	f7fb f961 	bl	8000b9c <__aeabi_dcmpun>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d0e2      	beq.n	80058a4 <pow+0x60>
 80058de:	f001 fe93 	bl	8007608 <__errno>
 80058e2:	2321      	movs	r3, #33	@ 0x21
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	ecbd 8b02 	vpop	{d8}
 80058ea:	ec47 6b10 	vmov	d0, r6, r7
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	2200      	movs	r2, #0
 80058f2:	2300      	movs	r3, #0
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f7fb f91e 	bl	8000b38 <__aeabi_dcmpeq>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0f2      	beq.n	80058e6 <pow+0xa2>
 8005900:	eeb0 0a48 	vmov.f32	s0, s16
 8005904:	eef0 0a68 	vmov.f32	s1, s17
 8005908:	f000 f80c 	bl	8005924 <finite>
 800590c:	2800      	cmp	r0, #0
 800590e:	d0ea      	beq.n	80058e6 <pow+0xa2>
 8005910:	ec45 4b10 	vmov	d0, r4, r5
 8005914:	f000 f806 	bl	8005924 <finite>
 8005918:	e7c3      	b.n	80058a2 <pow+0x5e>
 800591a:	4f01      	ldr	r7, [pc, #4]	@ (8005920 <pow+0xdc>)
 800591c:	2600      	movs	r6, #0
 800591e:	e7e2      	b.n	80058e6 <pow+0xa2>
 8005920:	3ff00000 	.word	0x3ff00000

08005924 <finite>:
 8005924:	b082      	sub	sp, #8
 8005926:	ed8d 0b00 	vstr	d0, [sp]
 800592a:	9801      	ldr	r0, [sp, #4]
 800592c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005930:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005934:	0fc0      	lsrs	r0, r0, #31
 8005936:	b002      	add	sp, #8
 8005938:	4770      	bx	lr
 800593a:	0000      	movs	r0, r0
 800593c:	0000      	movs	r0, r0
	...

08005940 <__ieee754_pow>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	b091      	sub	sp, #68	@ 0x44
 8005946:	ed8d 1b00 	vstr	d1, [sp]
 800594a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800594e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005952:	ea5a 0001 	orrs.w	r0, sl, r1
 8005956:	ec57 6b10 	vmov	r6, r7, d0
 800595a:	d113      	bne.n	8005984 <__ieee754_pow+0x44>
 800595c:	19b3      	adds	r3, r6, r6
 800595e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005962:	4152      	adcs	r2, r2
 8005964:	4298      	cmp	r0, r3
 8005966:	4b98      	ldr	r3, [pc, #608]	@ (8005bc8 <__ieee754_pow+0x288>)
 8005968:	4193      	sbcs	r3, r2
 800596a:	f080 84ea 	bcs.w	8006342 <__ieee754_pow+0xa02>
 800596e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005972:	4630      	mov	r0, r6
 8005974:	4639      	mov	r1, r7
 8005976:	f7fa fcc1 	bl	80002fc <__adddf3>
 800597a:	ec41 0b10 	vmov	d0, r0, r1
 800597e:	b011      	add	sp, #68	@ 0x44
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	4a91      	ldr	r2, [pc, #580]	@ (8005bcc <__ieee754_pow+0x28c>)
 8005986:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800598a:	4590      	cmp	r8, r2
 800598c:	463d      	mov	r5, r7
 800598e:	4633      	mov	r3, r6
 8005990:	d806      	bhi.n	80059a0 <__ieee754_pow+0x60>
 8005992:	d101      	bne.n	8005998 <__ieee754_pow+0x58>
 8005994:	2e00      	cmp	r6, #0
 8005996:	d1ea      	bne.n	800596e <__ieee754_pow+0x2e>
 8005998:	4592      	cmp	sl, r2
 800599a:	d801      	bhi.n	80059a0 <__ieee754_pow+0x60>
 800599c:	d10e      	bne.n	80059bc <__ieee754_pow+0x7c>
 800599e:	b169      	cbz	r1, 80059bc <__ieee754_pow+0x7c>
 80059a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80059a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80059a8:	431d      	orrs	r5, r3
 80059aa:	d1e0      	bne.n	800596e <__ieee754_pow+0x2e>
 80059ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80059b0:	18db      	adds	r3, r3, r3
 80059b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80059b6:	4152      	adcs	r2, r2
 80059b8:	429d      	cmp	r5, r3
 80059ba:	e7d4      	b.n	8005966 <__ieee754_pow+0x26>
 80059bc:	2d00      	cmp	r5, #0
 80059be:	46c3      	mov	fp, r8
 80059c0:	da3a      	bge.n	8005a38 <__ieee754_pow+0xf8>
 80059c2:	4a83      	ldr	r2, [pc, #524]	@ (8005bd0 <__ieee754_pow+0x290>)
 80059c4:	4592      	cmp	sl, r2
 80059c6:	d84d      	bhi.n	8005a64 <__ieee754_pow+0x124>
 80059c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80059cc:	4592      	cmp	sl, r2
 80059ce:	f240 84c7 	bls.w	8006360 <__ieee754_pow+0xa20>
 80059d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80059d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80059da:	2a14      	cmp	r2, #20
 80059dc:	dd0f      	ble.n	80059fe <__ieee754_pow+0xbe>
 80059de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80059e2:	fa21 f402 	lsr.w	r4, r1, r2
 80059e6:	fa04 f202 	lsl.w	r2, r4, r2
 80059ea:	428a      	cmp	r2, r1
 80059ec:	f040 84b8 	bne.w	8006360 <__ieee754_pow+0xa20>
 80059f0:	f004 0401 	and.w	r4, r4, #1
 80059f4:	f1c4 0402 	rsb	r4, r4, #2
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d158      	bne.n	8005aae <__ieee754_pow+0x16e>
 80059fc:	e00e      	b.n	8005a1c <__ieee754_pow+0xdc>
 80059fe:	2900      	cmp	r1, #0
 8005a00:	d154      	bne.n	8005aac <__ieee754_pow+0x16c>
 8005a02:	f1c2 0214 	rsb	r2, r2, #20
 8005a06:	fa4a f402 	asr.w	r4, sl, r2
 8005a0a:	fa04 f202 	lsl.w	r2, r4, r2
 8005a0e:	4552      	cmp	r2, sl
 8005a10:	f040 84a3 	bne.w	800635a <__ieee754_pow+0xa1a>
 8005a14:	f004 0401 	and.w	r4, r4, #1
 8005a18:	f1c4 0402 	rsb	r4, r4, #2
 8005a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd4 <__ieee754_pow+0x294>)
 8005a1e:	4592      	cmp	sl, r2
 8005a20:	d12e      	bne.n	8005a80 <__ieee754_pow+0x140>
 8005a22:	f1b9 0f00 	cmp.w	r9, #0
 8005a26:	f280 8494 	bge.w	8006352 <__ieee754_pow+0xa12>
 8005a2a:	496a      	ldr	r1, [pc, #424]	@ (8005bd4 <__ieee754_pow+0x294>)
 8005a2c:	4632      	mov	r2, r6
 8005a2e:	463b      	mov	r3, r7
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7fa ff43 	bl	80008bc <__aeabi_ddiv>
 8005a36:	e7a0      	b.n	800597a <__ieee754_pow+0x3a>
 8005a38:	2400      	movs	r4, #0
 8005a3a:	bbc1      	cbnz	r1, 8005aae <__ieee754_pow+0x16e>
 8005a3c:	4a63      	ldr	r2, [pc, #396]	@ (8005bcc <__ieee754_pow+0x28c>)
 8005a3e:	4592      	cmp	sl, r2
 8005a40:	d1ec      	bne.n	8005a1c <__ieee754_pow+0xdc>
 8005a42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005a46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	f000 8479 	beq.w	8006342 <__ieee754_pow+0xa02>
 8005a50:	4b61      	ldr	r3, [pc, #388]	@ (8005bd8 <__ieee754_pow+0x298>)
 8005a52:	4598      	cmp	r8, r3
 8005a54:	d908      	bls.n	8005a68 <__ieee754_pow+0x128>
 8005a56:	f1b9 0f00 	cmp.w	r9, #0
 8005a5a:	f2c0 8476 	blt.w	800634a <__ieee754_pow+0xa0a>
 8005a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a62:	e78a      	b.n	800597a <__ieee754_pow+0x3a>
 8005a64:	2402      	movs	r4, #2
 8005a66:	e7e8      	b.n	8005a3a <__ieee754_pow+0xfa>
 8005a68:	f1b9 0f00 	cmp.w	r9, #0
 8005a6c:	f04f 0000 	mov.w	r0, #0
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	da81      	bge.n	800597a <__ieee754_pow+0x3a>
 8005a76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005a7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005a7e:	e77c      	b.n	800597a <__ieee754_pow+0x3a>
 8005a80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005a84:	d106      	bne.n	8005a94 <__ieee754_pow+0x154>
 8005a86:	4632      	mov	r2, r6
 8005a88:	463b      	mov	r3, r7
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fa fdeb 	bl	8000668 <__aeabi_dmul>
 8005a92:	e772      	b.n	800597a <__ieee754_pow+0x3a>
 8005a94:	4a51      	ldr	r2, [pc, #324]	@ (8005bdc <__ieee754_pow+0x29c>)
 8005a96:	4591      	cmp	r9, r2
 8005a98:	d109      	bne.n	8005aae <__ieee754_pow+0x16e>
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	db07      	blt.n	8005aae <__ieee754_pow+0x16e>
 8005a9e:	ec47 6b10 	vmov	d0, r6, r7
 8005aa2:	b011      	add	sp, #68	@ 0x44
 8005aa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	f000 bd52 	b.w	8006550 <__ieee754_sqrt>
 8005aac:	2400      	movs	r4, #0
 8005aae:	ec47 6b10 	vmov	d0, r6, r7
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	f000 fc88 	bl	80063c8 <fabs>
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	ec51 0b10 	vmov	r0, r1, d0
 8005abe:	bb53      	cbnz	r3, 8005b16 <__ieee754_pow+0x1d6>
 8005ac0:	4b44      	ldr	r3, [pc, #272]	@ (8005bd4 <__ieee754_pow+0x294>)
 8005ac2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d002      	beq.n	8005ad0 <__ieee754_pow+0x190>
 8005aca:	f1b8 0f00 	cmp.w	r8, #0
 8005ace:	d122      	bne.n	8005b16 <__ieee754_pow+0x1d6>
 8005ad0:	f1b9 0f00 	cmp.w	r9, #0
 8005ad4:	da05      	bge.n	8005ae2 <__ieee754_pow+0x1a2>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	2000      	movs	r0, #0
 8005adc:	493d      	ldr	r1, [pc, #244]	@ (8005bd4 <__ieee754_pow+0x294>)
 8005ade:	f7fa feed 	bl	80008bc <__aeabi_ddiv>
 8005ae2:	2d00      	cmp	r5, #0
 8005ae4:	f6bf af49 	bge.w	800597a <__ieee754_pow+0x3a>
 8005ae8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005aec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005af0:	ea58 0804 	orrs.w	r8, r8, r4
 8005af4:	d108      	bne.n	8005b08 <__ieee754_pow+0x1c8>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4610      	mov	r0, r2
 8005afc:	4619      	mov	r1, r3
 8005afe:	f7fa fbfb 	bl	80002f8 <__aeabi_dsub>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	e794      	b.n	8005a32 <__ieee754_pow+0xf2>
 8005b08:	2c01      	cmp	r4, #1
 8005b0a:	f47f af36 	bne.w	800597a <__ieee754_pow+0x3a>
 8005b0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b12:	4619      	mov	r1, r3
 8005b14:	e731      	b.n	800597a <__ieee754_pow+0x3a>
 8005b16:	0feb      	lsrs	r3, r5, #31
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	ea53 0204 	orrs.w	r2, r3, r4
 8005b1e:	d102      	bne.n	8005b26 <__ieee754_pow+0x1e6>
 8005b20:	4632      	mov	r2, r6
 8005b22:	463b      	mov	r3, r7
 8005b24:	e7e9      	b.n	8005afa <__ieee754_pow+0x1ba>
 8005b26:	3c01      	subs	r4, #1
 8005b28:	431c      	orrs	r4, r3
 8005b2a:	d016      	beq.n	8005b5a <__ieee754_pow+0x21a>
 8005b2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005bb8 <__ieee754_pow+0x278>
 8005b30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005b34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b38:	f240 8112 	bls.w	8005d60 <__ieee754_pow+0x420>
 8005b3c:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <__ieee754_pow+0x2a0>)
 8005b3e:	459a      	cmp	sl, r3
 8005b40:	4b25      	ldr	r3, [pc, #148]	@ (8005bd8 <__ieee754_pow+0x298>)
 8005b42:	d916      	bls.n	8005b72 <__ieee754_pow+0x232>
 8005b44:	4598      	cmp	r8, r3
 8005b46:	d80b      	bhi.n	8005b60 <__ieee754_pow+0x220>
 8005b48:	f1b9 0f00 	cmp.w	r9, #0
 8005b4c:	da0b      	bge.n	8005b66 <__ieee754_pow+0x226>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	b011      	add	sp, #68	@ 0x44
 8005b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b56:	f000 bcf3 	b.w	8006540 <__math_oflow>
 8005b5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005bc0 <__ieee754_pow+0x280>
 8005b5e:	e7e7      	b.n	8005b30 <__ieee754_pow+0x1f0>
 8005b60:	f1b9 0f00 	cmp.w	r9, #0
 8005b64:	dcf3      	bgt.n	8005b4e <__ieee754_pow+0x20e>
 8005b66:	2000      	movs	r0, #0
 8005b68:	b011      	add	sp, #68	@ 0x44
 8005b6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6e:	f000 bcdf 	b.w	8006530 <__math_uflow>
 8005b72:	4598      	cmp	r8, r3
 8005b74:	d20c      	bcs.n	8005b90 <__ieee754_pow+0x250>
 8005b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f7fa ffe5 	bl	8000b4c <__aeabi_dcmplt>
 8005b82:	3800      	subs	r0, #0
 8005b84:	bf18      	it	ne
 8005b86:	2001      	movne	r0, #1
 8005b88:	f1b9 0f00 	cmp.w	r9, #0
 8005b8c:	daec      	bge.n	8005b68 <__ieee754_pow+0x228>
 8005b8e:	e7df      	b.n	8005b50 <__ieee754_pow+0x210>
 8005b90:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <__ieee754_pow+0x294>)
 8005b92:	4598      	cmp	r8, r3
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	d924      	bls.n	8005be4 <__ieee754_pow+0x2a4>
 8005b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f7fa ffd4 	bl	8000b4c <__aeabi_dcmplt>
 8005ba4:	3800      	subs	r0, #0
 8005ba6:	bf18      	it	ne
 8005ba8:	2001      	movne	r0, #1
 8005baa:	f1b9 0f00 	cmp.w	r9, #0
 8005bae:	dccf      	bgt.n	8005b50 <__ieee754_pow+0x210>
 8005bb0:	e7da      	b.n	8005b68 <__ieee754_pow+0x228>
 8005bb2:	bf00      	nop
 8005bb4:	f3af 8000 	nop.w
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	3ff00000 	.word	0x3ff00000
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	bff00000 	.word	0xbff00000
 8005bc8:	fff00000 	.word	0xfff00000
 8005bcc:	7ff00000 	.word	0x7ff00000
 8005bd0:	433fffff 	.word	0x433fffff
 8005bd4:	3ff00000 	.word	0x3ff00000
 8005bd8:	3fefffff 	.word	0x3fefffff
 8005bdc:	3fe00000 	.word	0x3fe00000
 8005be0:	43f00000 	.word	0x43f00000
 8005be4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d50 <__ieee754_pow+0x410>)
 8005be6:	f7fa fb87 	bl	80002f8 <__aeabi_dsub>
 8005bea:	a351      	add	r3, pc, #324	@ (adr r3, 8005d30 <__ieee754_pow+0x3f0>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	f7fa fd38 	bl	8000668 <__aeabi_dmul>
 8005bf8:	a34f      	add	r3, pc, #316	@ (adr r3, 8005d38 <__ieee754_pow+0x3f8>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	4620      	mov	r0, r4
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7fa fd2f 	bl	8000668 <__aeabi_dmul>
 8005c0a:	4b52      	ldr	r3, [pc, #328]	@ (8005d54 <__ieee754_pow+0x414>)
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	468b      	mov	fp, r1
 8005c10:	2200      	movs	r2, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7fa fd27 	bl	8000668 <__aeabi_dmul>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	a148      	add	r1, pc, #288	@ (adr r1, 8005d40 <__ieee754_pow+0x400>)
 8005c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c24:	f7fa fb68 	bl	80002f8 <__aeabi_dsub>
 8005c28:	4622      	mov	r2, r4
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f7fa fd1c 	bl	8000668 <__aeabi_dmul>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	2000      	movs	r0, #0
 8005c36:	4948      	ldr	r1, [pc, #288]	@ (8005d58 <__ieee754_pow+0x418>)
 8005c38:	f7fa fb5e 	bl	80002f8 <__aeabi_dsub>
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4689      	mov	r9, r1
 8005c42:	462b      	mov	r3, r5
 8005c44:	4620      	mov	r0, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7fa fd0e 	bl	8000668 <__aeabi_dmul>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4640      	mov	r0, r8
 8005c52:	4649      	mov	r1, r9
 8005c54:	f7fa fd08 	bl	8000668 <__aeabi_dmul>
 8005c58:	a33b      	add	r3, pc, #236	@ (adr r3, 8005d48 <__ieee754_pow+0x408>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fd03 	bl	8000668 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4650      	mov	r0, sl
 8005c68:	4659      	mov	r1, fp
 8005c6a:	f7fa fb45 	bl	80002f8 <__aeabi_dsub>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4680      	mov	r8, r0
 8005c74:	4689      	mov	r9, r1
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa fb3f 	bl	80002fc <__adddf3>
 8005c7e:	2400      	movs	r4, #0
 8005c80:	4632      	mov	r2, r6
 8005c82:	463b      	mov	r3, r7
 8005c84:	4620      	mov	r0, r4
 8005c86:	460d      	mov	r5, r1
 8005c88:	f7fa fb36 	bl	80002f8 <__aeabi_dsub>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa fb30 	bl	80002f8 <__aeabi_dsub>
 8005c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005ca8:	4606      	mov	r6, r0
 8005caa:	460f      	mov	r7, r1
 8005cac:	4652      	mov	r2, sl
 8005cae:	465b      	mov	r3, fp
 8005cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb4:	f7fa fb20 	bl	80002f8 <__aeabi_dsub>
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	f7fa fcd4 	bl	8000668 <__aeabi_dmul>
 8005cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4689      	mov	r9, r1
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa fccc 	bl	8000668 <__aeabi_dmul>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa fb10 	bl	80002fc <__adddf3>
 8005cdc:	4652      	mov	r2, sl
 8005cde:	465b      	mov	r3, fp
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	460f      	mov	r7, r1
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7fa fcbe 	bl	8000668 <__aeabi_dmul>
 8005cec:	460b      	mov	r3, r1
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	f7fa fb00 	bl	80002fc <__adddf3>
 8005cfc:	4b17      	ldr	r3, [pc, #92]	@ (8005d5c <__ieee754_pow+0x41c>)
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	468a      	mov	sl, r1
 8005d06:	468b      	mov	fp, r1
 8005d08:	f340 82ef 	ble.w	80062ea <__ieee754_pow+0x9aa>
 8005d0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005d10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005d14:	4303      	orrs	r3, r0
 8005d16:	f000 81e8 	beq.w	80060ea <__ieee754_pow+0x7aa>
 8005d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2300      	movs	r3, #0
 8005d22:	f7fa ff13 	bl	8000b4c <__aeabi_dcmplt>
 8005d26:	3800      	subs	r0, #0
 8005d28:	bf18      	it	ne
 8005d2a:	2001      	movne	r0, #1
 8005d2c:	e710      	b.n	8005b50 <__ieee754_pow+0x210>
 8005d2e:	bf00      	nop
 8005d30:	60000000 	.word	0x60000000
 8005d34:	3ff71547 	.word	0x3ff71547
 8005d38:	f85ddf44 	.word	0xf85ddf44
 8005d3c:	3e54ae0b 	.word	0x3e54ae0b
 8005d40:	55555555 	.word	0x55555555
 8005d44:	3fd55555 	.word	0x3fd55555
 8005d48:	652b82fe 	.word	0x652b82fe
 8005d4c:	3ff71547 	.word	0x3ff71547
 8005d50:	3ff00000 	.word	0x3ff00000
 8005d54:	3fd00000 	.word	0x3fd00000
 8005d58:	3fe00000 	.word	0x3fe00000
 8005d5c:	408fffff 	.word	0x408fffff
 8005d60:	4bd5      	ldr	r3, [pc, #852]	@ (80060b8 <__ieee754_pow+0x778>)
 8005d62:	402b      	ands	r3, r5
 8005d64:	2200      	movs	r2, #0
 8005d66:	b92b      	cbnz	r3, 8005d74 <__ieee754_pow+0x434>
 8005d68:	4bd4      	ldr	r3, [pc, #848]	@ (80060bc <__ieee754_pow+0x77c>)
 8005d6a:	f7fa fc7d 	bl	8000668 <__aeabi_dmul>
 8005d6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005d72:	468b      	mov	fp, r1
 8005d74:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005d78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005d7c:	4413      	add	r3, r2
 8005d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d80:	4bcf      	ldr	r3, [pc, #828]	@ (80060c0 <__ieee754_pow+0x780>)
 8005d82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005d86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005d8a:	459b      	cmp	fp, r3
 8005d8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005d90:	dd08      	ble.n	8005da4 <__ieee754_pow+0x464>
 8005d92:	4bcc      	ldr	r3, [pc, #816]	@ (80060c4 <__ieee754_pow+0x784>)
 8005d94:	459b      	cmp	fp, r3
 8005d96:	f340 81a5 	ble.w	80060e4 <__ieee754_pow+0x7a4>
 8005d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005da0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005da4:	f04f 0a00 	mov.w	sl, #0
 8005da8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dae:	4bc6      	ldr	r3, [pc, #792]	@ (80060c8 <__ieee754_pow+0x788>)
 8005db0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005db4:	ed93 7b00 	vldr	d7, [r3]
 8005db8:	4629      	mov	r1, r5
 8005dba:	ec53 2b17 	vmov	r2, r3, d7
 8005dbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005dc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dc6:	f7fa fa97 	bl	80002f8 <__aeabi_dsub>
 8005dca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460f      	mov	r7, r1
 8005dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd6:	f7fa fa91 	bl	80002fc <__adddf3>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	2000      	movs	r0, #0
 8005de0:	49ba      	ldr	r1, [pc, #744]	@ (80060cc <__ieee754_pow+0x78c>)
 8005de2:	f7fa fd6b 	bl	80008bc <__aeabi_ddiv>
 8005de6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4630      	mov	r0, r6
 8005df0:	4639      	mov	r1, r7
 8005df2:	f7fa fc39 	bl	8000668 <__aeabi_dmul>
 8005df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dfa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005dfe:	106d      	asrs	r5, r5, #1
 8005e00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005e04:	f04f 0b00 	mov.w	fp, #0
 8005e08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005e0c:	4661      	mov	r1, ip
 8005e0e:	2200      	movs	r2, #0
 8005e10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005e14:	4658      	mov	r0, fp
 8005e16:	46e1      	mov	r9, ip
 8005e18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	461d      	mov	r5, r3
 8005e20:	f7fa fc22 	bl	8000668 <__aeabi_dmul>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	f7fa fa64 	bl	80002f8 <__aeabi_dsub>
 8005e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e34:	4606      	mov	r6, r0
 8005e36:	460f      	mov	r7, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa fa5c 	bl	80002f8 <__aeabi_dsub>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e48:	f7fa fa56 	bl	80002f8 <__aeabi_dsub>
 8005e4c:	465a      	mov	r2, fp
 8005e4e:	464b      	mov	r3, r9
 8005e50:	f7fa fc0a 	bl	8000668 <__aeabi_dmul>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fa4c 	bl	80002f8 <__aeabi_dsub>
 8005e60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e64:	f7fa fc00 	bl	8000668 <__aeabi_dmul>
 8005e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	f7fa fbf8 	bl	8000668 <__aeabi_dmul>
 8005e78:	a37d      	add	r3, pc, #500	@ (adr r3, 8006070 <__ieee754_pow+0x730>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	4604      	mov	r4, r0
 8005e80:	460d      	mov	r5, r1
 8005e82:	f7fa fbf1 	bl	8000668 <__aeabi_dmul>
 8005e86:	a37c      	add	r3, pc, #496	@ (adr r3, 8006078 <__ieee754_pow+0x738>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fa36 	bl	80002fc <__adddf3>
 8005e90:	4622      	mov	r2, r4
 8005e92:	462b      	mov	r3, r5
 8005e94:	f7fa fbe8 	bl	8000668 <__aeabi_dmul>
 8005e98:	a379      	add	r3, pc, #484	@ (adr r3, 8006080 <__ieee754_pow+0x740>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa fa2d 	bl	80002fc <__adddf3>
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	f7fa fbdf 	bl	8000668 <__aeabi_dmul>
 8005eaa:	a377      	add	r3, pc, #476	@ (adr r3, 8006088 <__ieee754_pow+0x748>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa fa24 	bl	80002fc <__adddf3>
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	f7fa fbd6 	bl	8000668 <__aeabi_dmul>
 8005ebc:	a374      	add	r3, pc, #464	@ (adr r3, 8006090 <__ieee754_pow+0x750>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa fa1b 	bl	80002fc <__adddf3>
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	462b      	mov	r3, r5
 8005eca:	f7fa fbcd 	bl	8000668 <__aeabi_dmul>
 8005ece:	a372      	add	r3, pc, #456	@ (adr r3, 8006098 <__ieee754_pow+0x758>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f7fa fa12 	bl	80002fc <__adddf3>
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4606      	mov	r6, r0
 8005edc:	460f      	mov	r7, r1
 8005ede:	462b      	mov	r3, r5
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f7fa fbc0 	bl	8000668 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa fbba 	bl	8000668 <__aeabi_dmul>
 8005ef4:	465a      	mov	r2, fp
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	464b      	mov	r3, r9
 8005efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f00:	f7fa f9fc 	bl	80002fc <__adddf3>
 8005f04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f08:	f7fa fbae 	bl	8000668 <__aeabi_dmul>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	f7fa f9f4 	bl	80002fc <__adddf3>
 8005f14:	465a      	mov	r2, fp
 8005f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	4658      	mov	r0, fp
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fba2 	bl	8000668 <__aeabi_dmul>
 8005f24:	4b6a      	ldr	r3, [pc, #424]	@ (80060d0 <__ieee754_pow+0x790>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	4606      	mov	r6, r0
 8005f2a:	460f      	mov	r7, r1
 8005f2c:	f7fa f9e6 	bl	80002fc <__adddf3>
 8005f30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f34:	f7fa f9e2 	bl	80002fc <__adddf3>
 8005f38:	46d8      	mov	r8, fp
 8005f3a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005f3e:	460d      	mov	r5, r1
 8005f40:	465a      	mov	r2, fp
 8005f42:	460b      	mov	r3, r1
 8005f44:	4640      	mov	r0, r8
 8005f46:	4649      	mov	r1, r9
 8005f48:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005f4c:	f7fa fb8c 	bl	8000668 <__aeabi_dmul>
 8005f50:	465c      	mov	r4, fp
 8005f52:	4680      	mov	r8, r0
 8005f54:	4689      	mov	r9, r1
 8005f56:	4b5e      	ldr	r3, [pc, #376]	@ (80060d0 <__ieee754_pow+0x790>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	f7fa f9cb 	bl	80002f8 <__aeabi_dsub>
 8005f62:	4632      	mov	r2, r6
 8005f64:	463b      	mov	r3, r7
 8005f66:	f7fa f9c7 	bl	80002f8 <__aeabi_dsub>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f72:	f7fa f9c1 	bl	80002f8 <__aeabi_dsub>
 8005f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f7a:	f7fa fb75 	bl	8000668 <__aeabi_dmul>
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4606      	mov	r6, r0
 8005f82:	460f      	mov	r7, r1
 8005f84:	462b      	mov	r3, r5
 8005f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8a:	f7fa fb6d 	bl	8000668 <__aeabi_dmul>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4630      	mov	r0, r6
 8005f94:	4639      	mov	r1, r7
 8005f96:	f7fa f9b1 	bl	80002fc <__adddf3>
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	f7fa f9a9 	bl	80002fc <__adddf3>
 8005faa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005fae:	a33c      	add	r3, pc, #240	@ (adr r3, 80060a0 <__ieee754_pow+0x760>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005fba:	460d      	mov	r5, r1
 8005fbc:	f7fa fb54 	bl	8000668 <__aeabi_dmul>
 8005fc0:	465c      	mov	r4, fp
 8005fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fc6:	4642      	mov	r2, r8
 8005fc8:	464b      	mov	r3, r9
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4629      	mov	r1, r5
 8005fce:	f7fa f993 	bl	80002f8 <__aeabi_dsub>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	4639      	mov	r1, r7
 8005fda:	f7fa f98d 	bl	80002f8 <__aeabi_dsub>
 8005fde:	a332      	add	r3, pc, #200	@ (adr r3, 80060a8 <__ieee754_pow+0x768>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa fb40 	bl	8000668 <__aeabi_dmul>
 8005fe8:	a331      	add	r3, pc, #196	@ (adr r3, 80060b0 <__ieee754_pow+0x770>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f7fa fb37 	bl	8000668 <__aeabi_dmul>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa f97b 	bl	80002fc <__adddf3>
 8006006:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006008:	4b32      	ldr	r3, [pc, #200]	@ (80060d4 <__ieee754_pow+0x794>)
 800600a:	4413      	add	r3, r2
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f7fa f974 	bl	80002fc <__adddf3>
 8006014:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006018:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800601a:	f7fa fabb 	bl	8000594 <__aeabi_i2d>
 800601e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006020:	4b2d      	ldr	r3, [pc, #180]	@ (80060d8 <__ieee754_pow+0x798>)
 8006022:	4413      	add	r3, r2
 8006024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006028:	4606      	mov	r6, r0
 800602a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800602e:	460f      	mov	r7, r1
 8006030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006034:	f7fa f962 	bl	80002fc <__adddf3>
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	f7fa f95e 	bl	80002fc <__adddf3>
 8006040:	4632      	mov	r2, r6
 8006042:	463b      	mov	r3, r7
 8006044:	f7fa f95a 	bl	80002fc <__adddf3>
 8006048:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800604c:	4632      	mov	r2, r6
 800604e:	463b      	mov	r3, r7
 8006050:	4658      	mov	r0, fp
 8006052:	460d      	mov	r5, r1
 8006054:	f7fa f950 	bl	80002f8 <__aeabi_dsub>
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	f7fa f94c 	bl	80002f8 <__aeabi_dsub>
 8006060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006064:	f7fa f948 	bl	80002f8 <__aeabi_dsub>
 8006068:	465c      	mov	r4, fp
 800606a:	4602      	mov	r2, r0
 800606c:	e036      	b.n	80060dc <__ieee754_pow+0x79c>
 800606e:	bf00      	nop
 8006070:	4a454eef 	.word	0x4a454eef
 8006074:	3fca7e28 	.word	0x3fca7e28
 8006078:	93c9db65 	.word	0x93c9db65
 800607c:	3fcd864a 	.word	0x3fcd864a
 8006080:	a91d4101 	.word	0xa91d4101
 8006084:	3fd17460 	.word	0x3fd17460
 8006088:	518f264d 	.word	0x518f264d
 800608c:	3fd55555 	.word	0x3fd55555
 8006090:	db6fabff 	.word	0xdb6fabff
 8006094:	3fdb6db6 	.word	0x3fdb6db6
 8006098:	33333303 	.word	0x33333303
 800609c:	3fe33333 	.word	0x3fe33333
 80060a0:	e0000000 	.word	0xe0000000
 80060a4:	3feec709 	.word	0x3feec709
 80060a8:	dc3a03fd 	.word	0xdc3a03fd
 80060ac:	3feec709 	.word	0x3feec709
 80060b0:	145b01f5 	.word	0x145b01f5
 80060b4:	be3e2fe0 	.word	0xbe3e2fe0
 80060b8:	7ff00000 	.word	0x7ff00000
 80060bc:	43400000 	.word	0x43400000
 80060c0:	0003988e 	.word	0x0003988e
 80060c4:	000bb679 	.word	0x000bb679
 80060c8:	080097e0 	.word	0x080097e0
 80060cc:	3ff00000 	.word	0x3ff00000
 80060d0:	40080000 	.word	0x40080000
 80060d4:	080097c0 	.word	0x080097c0
 80060d8:	080097d0 	.word	0x080097d0
 80060dc:	460b      	mov	r3, r1
 80060de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e2:	e5d7      	b.n	8005c94 <__ieee754_pow+0x354>
 80060e4:	f04f 0a01 	mov.w	sl, #1
 80060e8:	e65e      	b.n	8005da8 <__ieee754_pow+0x468>
 80060ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 80063bc <__ieee754_pow+0xa7c>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	4630      	mov	r0, r6
 80060f2:	4639      	mov	r1, r7
 80060f4:	f7fa f902 	bl	80002fc <__adddf3>
 80060f8:	4642      	mov	r2, r8
 80060fa:	e9cd 0100 	strd	r0, r1, [sp]
 80060fe:	464b      	mov	r3, r9
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa f8f8 	bl	80002f8 <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006110:	f7fa fd3a 	bl	8000b88 <__aeabi_dcmpgt>
 8006114:	2800      	cmp	r0, #0
 8006116:	f47f ae00 	bne.w	8005d1a <__ieee754_pow+0x3da>
 800611a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800611e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006122:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006126:	fa43 fa0a 	asr.w	sl, r3, sl
 800612a:	44da      	add	sl, fp
 800612c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006130:	489d      	ldr	r0, [pc, #628]	@ (80063a8 <__ieee754_pow+0xa68>)
 8006132:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006136:	4108      	asrs	r0, r1
 8006138:	ea00 030a 	and.w	r3, r0, sl
 800613c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006140:	f1c1 0114 	rsb	r1, r1, #20
 8006144:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006148:	fa4a fa01 	asr.w	sl, sl, r1
 800614c:	f1bb 0f00 	cmp.w	fp, #0
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	bfb8      	it	lt
 800615a:	f1ca 0a00 	rsblt	sl, sl, #0
 800615e:	f7fa f8cb 	bl	80002f8 <__aeabi_dsub>
 8006162:	4680      	mov	r8, r0
 8006164:	4689      	mov	r9, r1
 8006166:	4632      	mov	r2, r6
 8006168:	463b      	mov	r3, r7
 800616a:	4640      	mov	r0, r8
 800616c:	4649      	mov	r1, r9
 800616e:	f7fa f8c5 	bl	80002fc <__adddf3>
 8006172:	2400      	movs	r4, #0
 8006174:	a37c      	add	r3, pc, #496	@ (adr r3, 8006368 <__ieee754_pow+0xa28>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	4620      	mov	r0, r4
 800617c:	460d      	mov	r5, r1
 800617e:	f7fa fa73 	bl	8000668 <__aeabi_dmul>
 8006182:	4642      	mov	r2, r8
 8006184:	e9cd 0100 	strd	r0, r1, [sp]
 8006188:	464b      	mov	r3, r9
 800618a:	4620      	mov	r0, r4
 800618c:	4629      	mov	r1, r5
 800618e:	f7fa f8b3 	bl	80002f8 <__aeabi_dsub>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f7fa f8ad 	bl	80002f8 <__aeabi_dsub>
 800619e:	a374      	add	r3, pc, #464	@ (adr r3, 8006370 <__ieee754_pow+0xa30>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa fa60 	bl	8000668 <__aeabi_dmul>
 80061a8:	a373      	add	r3, pc, #460	@ (adr r3, 8006378 <__ieee754_pow+0xa38>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	4680      	mov	r8, r0
 80061b0:	4689      	mov	r9, r1
 80061b2:	4620      	mov	r0, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7fa fa57 	bl	8000668 <__aeabi_dmul>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa f89b 	bl	80002fc <__adddf3>
 80061c6:	4604      	mov	r4, r0
 80061c8:	460d      	mov	r5, r1
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d2:	f7fa f893 	bl	80002fc <__adddf3>
 80061d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	f7fa f88b 	bl	80002f8 <__aeabi_dsub>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4620      	mov	r0, r4
 80061e8:	4629      	mov	r1, r5
 80061ea:	f7fa f885 	bl	80002f8 <__aeabi_dsub>
 80061ee:	4642      	mov	r2, r8
 80061f0:	4606      	mov	r6, r0
 80061f2:	460f      	mov	r7, r1
 80061f4:	464b      	mov	r3, r9
 80061f6:	4640      	mov	r0, r8
 80061f8:	4649      	mov	r1, r9
 80061fa:	f7fa fa35 	bl	8000668 <__aeabi_dmul>
 80061fe:	a360      	add	r3, pc, #384	@ (adr r3, 8006380 <__ieee754_pow+0xa40>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	4604      	mov	r4, r0
 8006206:	460d      	mov	r5, r1
 8006208:	f7fa fa2e 	bl	8000668 <__aeabi_dmul>
 800620c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006388 <__ieee754_pow+0xa48>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f7fa f871 	bl	80002f8 <__aeabi_dsub>
 8006216:	4622      	mov	r2, r4
 8006218:	462b      	mov	r3, r5
 800621a:	f7fa fa25 	bl	8000668 <__aeabi_dmul>
 800621e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006390 <__ieee754_pow+0xa50>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7fa f86a 	bl	80002fc <__adddf3>
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	f7fa fa1c 	bl	8000668 <__aeabi_dmul>
 8006230:	a359      	add	r3, pc, #356	@ (adr r3, 8006398 <__ieee754_pow+0xa58>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa f85f 	bl	80002f8 <__aeabi_dsub>
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	f7fa fa13 	bl	8000668 <__aeabi_dmul>
 8006242:	a357      	add	r3, pc, #348	@ (adr r3, 80063a0 <__ieee754_pow+0xa60>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa f858 	bl	80002fc <__adddf3>
 800624c:	4622      	mov	r2, r4
 800624e:	462b      	mov	r3, r5
 8006250:	f7fa fa0a 	bl	8000668 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	f7fa f84c 	bl	80002f8 <__aeabi_dsub>
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa f9fc 	bl	8000668 <__aeabi_dmul>
 8006270:	2200      	movs	r2, #0
 8006272:	e9cd 0100 	strd	r0, r1, [sp]
 8006276:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800627a:	4620      	mov	r0, r4
 800627c:	4629      	mov	r1, r5
 800627e:	f7fa f83b 	bl	80002f8 <__aeabi_dsub>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800628a:	f7fa fb17 	bl	80008bc <__aeabi_ddiv>
 800628e:	4632      	mov	r2, r6
 8006290:	4604      	mov	r4, r0
 8006292:	460d      	mov	r5, r1
 8006294:	463b      	mov	r3, r7
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	f7fa f9e5 	bl	8000668 <__aeabi_dmul>
 800629e:	4632      	mov	r2, r6
 80062a0:	463b      	mov	r3, r7
 80062a2:	f7fa f82b 	bl	80002fc <__adddf3>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4620      	mov	r0, r4
 80062ac:	4629      	mov	r1, r5
 80062ae:	f7fa f823 	bl	80002f8 <__aeabi_dsub>
 80062b2:	4642      	mov	r2, r8
 80062b4:	464b      	mov	r3, r9
 80062b6:	f7fa f81f 	bl	80002f8 <__aeabi_dsub>
 80062ba:	460b      	mov	r3, r1
 80062bc:	4602      	mov	r2, r0
 80062be:	493b      	ldr	r1, [pc, #236]	@ (80063ac <__ieee754_pow+0xa6c>)
 80062c0:	2000      	movs	r0, #0
 80062c2:	f7fa f819 	bl	80002f8 <__aeabi_dsub>
 80062c6:	ec41 0b10 	vmov	d0, r0, r1
 80062ca:	ee10 3a90 	vmov	r3, s1
 80062ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d6:	da30      	bge.n	800633a <__ieee754_pow+0x9fa>
 80062d8:	4650      	mov	r0, sl
 80062da:	f000 f87d 	bl	80063d8 <scalbn>
 80062de:	ec51 0b10 	vmov	r0, r1, d0
 80062e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062e6:	f7ff bbd2 	b.w	8005a8e <__ieee754_pow+0x14e>
 80062ea:	4c31      	ldr	r4, [pc, #196]	@ (80063b0 <__ieee754_pow+0xa70>)
 80062ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d91a      	bls.n	800632a <__ieee754_pow+0x9ea>
 80062f4:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <__ieee754_pow+0xa74>)
 80062f6:	440b      	add	r3, r1
 80062f8:	4303      	orrs	r3, r0
 80062fa:	d009      	beq.n	8006310 <__ieee754_pow+0x9d0>
 80062fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	2300      	movs	r3, #0
 8006304:	f7fa fc22 	bl	8000b4c <__aeabi_dcmplt>
 8006308:	3800      	subs	r0, #0
 800630a:	bf18      	it	ne
 800630c:	2001      	movne	r0, #1
 800630e:	e42b      	b.n	8005b68 <__ieee754_pow+0x228>
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	f7f9 fff0 	bl	80002f8 <__aeabi_dsub>
 8006318:	4632      	mov	r2, r6
 800631a:	463b      	mov	r3, r7
 800631c:	f7fa fc2a 	bl	8000b74 <__aeabi_dcmpge>
 8006320:	2800      	cmp	r0, #0
 8006322:	d1eb      	bne.n	80062fc <__ieee754_pow+0x9bc>
 8006324:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80063c4 <__ieee754_pow+0xa84>
 8006328:	e6f7      	b.n	800611a <__ieee754_pow+0x7da>
 800632a:	469a      	mov	sl, r3
 800632c:	4b22      	ldr	r3, [pc, #136]	@ (80063b8 <__ieee754_pow+0xa78>)
 800632e:	459a      	cmp	sl, r3
 8006330:	f63f aef3 	bhi.w	800611a <__ieee754_pow+0x7da>
 8006334:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006338:	e715      	b.n	8006166 <__ieee754_pow+0x826>
 800633a:	ec51 0b10 	vmov	r0, r1, d0
 800633e:	4619      	mov	r1, r3
 8006340:	e7cf      	b.n	80062e2 <__ieee754_pow+0x9a2>
 8006342:	491a      	ldr	r1, [pc, #104]	@ (80063ac <__ieee754_pow+0xa6c>)
 8006344:	2000      	movs	r0, #0
 8006346:	f7ff bb18 	b.w	800597a <__ieee754_pow+0x3a>
 800634a:	2000      	movs	r0, #0
 800634c:	2100      	movs	r1, #0
 800634e:	f7ff bb14 	b.w	800597a <__ieee754_pow+0x3a>
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7ff bb10 	b.w	800597a <__ieee754_pow+0x3a>
 800635a:	460c      	mov	r4, r1
 800635c:	f7ff bb5e 	b.w	8005a1c <__ieee754_pow+0xdc>
 8006360:	2400      	movs	r4, #0
 8006362:	f7ff bb49 	b.w	80059f8 <__ieee754_pow+0xb8>
 8006366:	bf00      	nop
 8006368:	00000000 	.word	0x00000000
 800636c:	3fe62e43 	.word	0x3fe62e43
 8006370:	fefa39ef 	.word	0xfefa39ef
 8006374:	3fe62e42 	.word	0x3fe62e42
 8006378:	0ca86c39 	.word	0x0ca86c39
 800637c:	be205c61 	.word	0xbe205c61
 8006380:	72bea4d0 	.word	0x72bea4d0
 8006384:	3e663769 	.word	0x3e663769
 8006388:	c5d26bf1 	.word	0xc5d26bf1
 800638c:	3ebbbd41 	.word	0x3ebbbd41
 8006390:	af25de2c 	.word	0xaf25de2c
 8006394:	3f11566a 	.word	0x3f11566a
 8006398:	16bebd93 	.word	0x16bebd93
 800639c:	3f66c16c 	.word	0x3f66c16c
 80063a0:	5555553e 	.word	0x5555553e
 80063a4:	3fc55555 	.word	0x3fc55555
 80063a8:	fff00000 	.word	0xfff00000
 80063ac:	3ff00000 	.word	0x3ff00000
 80063b0:	4090cbff 	.word	0x4090cbff
 80063b4:	3f6f3400 	.word	0x3f6f3400
 80063b8:	3fe00000 	.word	0x3fe00000
 80063bc:	652b82fe 	.word	0x652b82fe
 80063c0:	3c971547 	.word	0x3c971547
 80063c4:	4090cc00 	.word	0x4090cc00

080063c8 <fabs>:
 80063c8:	ec51 0b10 	vmov	r0, r1, d0
 80063cc:	4602      	mov	r2, r0
 80063ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80063d2:	ec43 2b10 	vmov	d0, r2, r3
 80063d6:	4770      	bx	lr

080063d8 <scalbn>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	ec55 4b10 	vmov	r4, r5, d0
 80063de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80063e2:	4606      	mov	r6, r0
 80063e4:	462b      	mov	r3, r5
 80063e6:	b991      	cbnz	r1, 800640e <scalbn+0x36>
 80063e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80063ec:	4323      	orrs	r3, r4
 80063ee:	d03d      	beq.n	800646c <scalbn+0x94>
 80063f0:	4b35      	ldr	r3, [pc, #212]	@ (80064c8 <scalbn+0xf0>)
 80063f2:	4620      	mov	r0, r4
 80063f4:	4629      	mov	r1, r5
 80063f6:	2200      	movs	r2, #0
 80063f8:	f7fa f936 	bl	8000668 <__aeabi_dmul>
 80063fc:	4b33      	ldr	r3, [pc, #204]	@ (80064cc <scalbn+0xf4>)
 80063fe:	429e      	cmp	r6, r3
 8006400:	4604      	mov	r4, r0
 8006402:	460d      	mov	r5, r1
 8006404:	da0f      	bge.n	8006426 <scalbn+0x4e>
 8006406:	a328      	add	r3, pc, #160	@ (adr r3, 80064a8 <scalbn+0xd0>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	e01e      	b.n	800644c <scalbn+0x74>
 800640e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006412:	4291      	cmp	r1, r2
 8006414:	d10b      	bne.n	800642e <scalbn+0x56>
 8006416:	4622      	mov	r2, r4
 8006418:	4620      	mov	r0, r4
 800641a:	4629      	mov	r1, r5
 800641c:	f7f9 ff6e 	bl	80002fc <__adddf3>
 8006420:	4604      	mov	r4, r0
 8006422:	460d      	mov	r5, r1
 8006424:	e022      	b.n	800646c <scalbn+0x94>
 8006426:	460b      	mov	r3, r1
 8006428:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800642c:	3936      	subs	r1, #54	@ 0x36
 800642e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006432:	4296      	cmp	r6, r2
 8006434:	dd0d      	ble.n	8006452 <scalbn+0x7a>
 8006436:	2d00      	cmp	r5, #0
 8006438:	a11d      	add	r1, pc, #116	@ (adr r1, 80064b0 <scalbn+0xd8>)
 800643a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800643e:	da02      	bge.n	8006446 <scalbn+0x6e>
 8006440:	a11d      	add	r1, pc, #116	@ (adr r1, 80064b8 <scalbn+0xe0>)
 8006442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006446:	a31a      	add	r3, pc, #104	@ (adr r3, 80064b0 <scalbn+0xd8>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fa f90c 	bl	8000668 <__aeabi_dmul>
 8006450:	e7e6      	b.n	8006420 <scalbn+0x48>
 8006452:	1872      	adds	r2, r6, r1
 8006454:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006458:	428a      	cmp	r2, r1
 800645a:	dcec      	bgt.n	8006436 <scalbn+0x5e>
 800645c:	2a00      	cmp	r2, #0
 800645e:	dd08      	ble.n	8006472 <scalbn+0x9a>
 8006460:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006464:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006468:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800646c:	ec45 4b10 	vmov	d0, r4, r5
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006476:	da08      	bge.n	800648a <scalbn+0xb2>
 8006478:	2d00      	cmp	r5, #0
 800647a:	a10b      	add	r1, pc, #44	@ (adr r1, 80064a8 <scalbn+0xd0>)
 800647c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006480:	dac1      	bge.n	8006406 <scalbn+0x2e>
 8006482:	a10f      	add	r1, pc, #60	@ (adr r1, 80064c0 <scalbn+0xe8>)
 8006484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006488:	e7bd      	b.n	8006406 <scalbn+0x2e>
 800648a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800648e:	3236      	adds	r2, #54	@ 0x36
 8006490:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006494:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006498:	4620      	mov	r0, r4
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <scalbn+0xf8>)
 800649c:	4629      	mov	r1, r5
 800649e:	2200      	movs	r2, #0
 80064a0:	e7d4      	b.n	800644c <scalbn+0x74>
 80064a2:	bf00      	nop
 80064a4:	f3af 8000 	nop.w
 80064a8:	c2f8f359 	.word	0xc2f8f359
 80064ac:	01a56e1f 	.word	0x01a56e1f
 80064b0:	8800759c 	.word	0x8800759c
 80064b4:	7e37e43c 	.word	0x7e37e43c
 80064b8:	8800759c 	.word	0x8800759c
 80064bc:	fe37e43c 	.word	0xfe37e43c
 80064c0:	c2f8f359 	.word	0xc2f8f359
 80064c4:	81a56e1f 	.word	0x81a56e1f
 80064c8:	43500000 	.word	0x43500000
 80064cc:	ffff3cb0 	.word	0xffff3cb0
 80064d0:	3c900000 	.word	0x3c900000

080064d4 <with_errno>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	ed2d 8b02 	vpush	{d8}
 80064da:	eeb0 8a40 	vmov.f32	s16, s0
 80064de:	eef0 8a60 	vmov.f32	s17, s1
 80064e2:	4604      	mov	r4, r0
 80064e4:	f001 f890 	bl	8007608 <__errno>
 80064e8:	eeb0 0a48 	vmov.f32	s0, s16
 80064ec:	eef0 0a68 	vmov.f32	s1, s17
 80064f0:	ecbd 8b02 	vpop	{d8}
 80064f4:	6004      	str	r4, [r0, #0]
 80064f6:	bd10      	pop	{r4, pc}

080064f8 <xflow>:
 80064f8:	4603      	mov	r3, r0
 80064fa:	b507      	push	{r0, r1, r2, lr}
 80064fc:	ec51 0b10 	vmov	r0, r1, d0
 8006500:	b183      	cbz	r3, 8006524 <xflow+0x2c>
 8006502:	4602      	mov	r2, r0
 8006504:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006508:	e9cd 2300 	strd	r2, r3, [sp]
 800650c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006510:	f7fa f8aa 	bl	8000668 <__aeabi_dmul>
 8006514:	ec41 0b10 	vmov	d0, r0, r1
 8006518:	2022      	movs	r0, #34	@ 0x22
 800651a:	b003      	add	sp, #12
 800651c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006520:	f7ff bfd8 	b.w	80064d4 <with_errno>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	e7ee      	b.n	8006508 <xflow+0x10>
 800652a:	0000      	movs	r0, r0
 800652c:	0000      	movs	r0, r0
	...

08006530 <__math_uflow>:
 8006530:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006538 <__math_uflow+0x8>
 8006534:	f7ff bfe0 	b.w	80064f8 <xflow>
 8006538:	00000000 	.word	0x00000000
 800653c:	10000000 	.word	0x10000000

08006540 <__math_oflow>:
 8006540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006548 <__math_oflow+0x8>
 8006544:	f7ff bfd8 	b.w	80064f8 <xflow>
 8006548:	00000000 	.word	0x00000000
 800654c:	70000000 	.word	0x70000000

08006550 <__ieee754_sqrt>:
 8006550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	4a68      	ldr	r2, [pc, #416]	@ (80066f8 <__ieee754_sqrt+0x1a8>)
 8006556:	ec55 4b10 	vmov	r4, r5, d0
 800655a:	43aa      	bics	r2, r5
 800655c:	462b      	mov	r3, r5
 800655e:	4621      	mov	r1, r4
 8006560:	d110      	bne.n	8006584 <__ieee754_sqrt+0x34>
 8006562:	4622      	mov	r2, r4
 8006564:	4620      	mov	r0, r4
 8006566:	4629      	mov	r1, r5
 8006568:	f7fa f87e 	bl	8000668 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7f9 fec2 	bl	80002fc <__adddf3>
 8006578:	4604      	mov	r4, r0
 800657a:	460d      	mov	r5, r1
 800657c:	ec45 4b10 	vmov	d0, r4, r5
 8006580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006584:	2d00      	cmp	r5, #0
 8006586:	dc0e      	bgt.n	80065a6 <__ieee754_sqrt+0x56>
 8006588:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800658c:	4322      	orrs	r2, r4
 800658e:	d0f5      	beq.n	800657c <__ieee754_sqrt+0x2c>
 8006590:	b19d      	cbz	r5, 80065ba <__ieee754_sqrt+0x6a>
 8006592:	4622      	mov	r2, r4
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	f7f9 feae 	bl	80002f8 <__aeabi_dsub>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	f7fa f98c 	bl	80008bc <__aeabi_ddiv>
 80065a4:	e7e8      	b.n	8006578 <__ieee754_sqrt+0x28>
 80065a6:	152a      	asrs	r2, r5, #20
 80065a8:	d115      	bne.n	80065d6 <__ieee754_sqrt+0x86>
 80065aa:	2000      	movs	r0, #0
 80065ac:	e009      	b.n	80065c2 <__ieee754_sqrt+0x72>
 80065ae:	0acb      	lsrs	r3, r1, #11
 80065b0:	3a15      	subs	r2, #21
 80065b2:	0549      	lsls	r1, r1, #21
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0fa      	beq.n	80065ae <__ieee754_sqrt+0x5e>
 80065b8:	e7f7      	b.n	80065aa <__ieee754_sqrt+0x5a>
 80065ba:	462a      	mov	r2, r5
 80065bc:	e7fa      	b.n	80065b4 <__ieee754_sqrt+0x64>
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	3001      	adds	r0, #1
 80065c2:	02dc      	lsls	r4, r3, #11
 80065c4:	d5fb      	bpl.n	80065be <__ieee754_sqrt+0x6e>
 80065c6:	1e44      	subs	r4, r0, #1
 80065c8:	1b12      	subs	r2, r2, r4
 80065ca:	f1c0 0420 	rsb	r4, r0, #32
 80065ce:	fa21 f404 	lsr.w	r4, r1, r4
 80065d2:	4323      	orrs	r3, r4
 80065d4:	4081      	lsls	r1, r0
 80065d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e2:	07d2      	lsls	r2, r2, #31
 80065e4:	bf5c      	itt	pl
 80065e6:	005b      	lslpl	r3, r3, #1
 80065e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80065ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065f0:	bf58      	it	pl
 80065f2:	0049      	lslpl	r1, r1, #1
 80065f4:	2600      	movs	r6, #0
 80065f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80065fa:	106d      	asrs	r5, r5, #1
 80065fc:	0049      	lsls	r1, r1, #1
 80065fe:	2016      	movs	r0, #22
 8006600:	4632      	mov	r2, r6
 8006602:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006606:	1917      	adds	r7, r2, r4
 8006608:	429f      	cmp	r7, r3
 800660a:	bfde      	ittt	le
 800660c:	193a      	addle	r2, r7, r4
 800660e:	1bdb      	suble	r3, r3, r7
 8006610:	1936      	addle	r6, r6, r4
 8006612:	0fcf      	lsrs	r7, r1, #31
 8006614:	3801      	subs	r0, #1
 8006616:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800661a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800661e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006622:	d1f0      	bne.n	8006606 <__ieee754_sqrt+0xb6>
 8006624:	4604      	mov	r4, r0
 8006626:	2720      	movs	r7, #32
 8006628:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800662c:	429a      	cmp	r2, r3
 800662e:	eb00 0e0c 	add.w	lr, r0, ip
 8006632:	db02      	blt.n	800663a <__ieee754_sqrt+0xea>
 8006634:	d113      	bne.n	800665e <__ieee754_sqrt+0x10e>
 8006636:	458e      	cmp	lr, r1
 8006638:	d811      	bhi.n	800665e <__ieee754_sqrt+0x10e>
 800663a:	f1be 0f00 	cmp.w	lr, #0
 800663e:	eb0e 000c 	add.w	r0, lr, ip
 8006642:	da42      	bge.n	80066ca <__ieee754_sqrt+0x17a>
 8006644:	2800      	cmp	r0, #0
 8006646:	db40      	blt.n	80066ca <__ieee754_sqrt+0x17a>
 8006648:	f102 0801 	add.w	r8, r2, #1
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	458e      	cmp	lr, r1
 8006650:	bf88      	it	hi
 8006652:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006656:	eba1 010e 	sub.w	r1, r1, lr
 800665a:	4464      	add	r4, ip
 800665c:	4642      	mov	r2, r8
 800665e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006662:	3f01      	subs	r7, #1
 8006664:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006668:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800666c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006670:	d1dc      	bne.n	800662c <__ieee754_sqrt+0xdc>
 8006672:	4319      	orrs	r1, r3
 8006674:	d01b      	beq.n	80066ae <__ieee754_sqrt+0x15e>
 8006676:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80066fc <__ieee754_sqrt+0x1ac>
 800667a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006700 <__ieee754_sqrt+0x1b0>
 800667e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006682:	e9db 2300 	ldrd	r2, r3, [fp]
 8006686:	f7f9 fe37 	bl	80002f8 <__aeabi_dsub>
 800668a:	e9da 8900 	ldrd	r8, r9, [sl]
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7fa fa63 	bl	8000b60 <__aeabi_dcmple>
 800669a:	b140      	cbz	r0, 80066ae <__ieee754_sqrt+0x15e>
 800669c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80066a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80066a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80066a8:	d111      	bne.n	80066ce <__ieee754_sqrt+0x17e>
 80066aa:	3601      	adds	r6, #1
 80066ac:	463c      	mov	r4, r7
 80066ae:	1072      	asrs	r2, r6, #1
 80066b0:	0863      	lsrs	r3, r4, #1
 80066b2:	07f1      	lsls	r1, r6, #31
 80066b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80066b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80066bc:	bf48      	it	mi
 80066be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80066c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80066c6:	4618      	mov	r0, r3
 80066c8:	e756      	b.n	8006578 <__ieee754_sqrt+0x28>
 80066ca:	4690      	mov	r8, r2
 80066cc:	e7be      	b.n	800664c <__ieee754_sqrt+0xfc>
 80066ce:	f7f9 fe15 	bl	80002fc <__adddf3>
 80066d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7fa fa35 	bl	8000b4c <__aeabi_dcmplt>
 80066e2:	b120      	cbz	r0, 80066ee <__ieee754_sqrt+0x19e>
 80066e4:	1ca0      	adds	r0, r4, #2
 80066e6:	bf08      	it	eq
 80066e8:	3601      	addeq	r6, #1
 80066ea:	3402      	adds	r4, #2
 80066ec:	e7df      	b.n	80066ae <__ieee754_sqrt+0x15e>
 80066ee:	1c63      	adds	r3, r4, #1
 80066f0:	f023 0401 	bic.w	r4, r3, #1
 80066f4:	e7db      	b.n	80066ae <__ieee754_sqrt+0x15e>
 80066f6:	bf00      	nop
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	20000018 	.word	0x20000018
 8006700:	20000010 	.word	0x20000010

08006704 <malloc>:
 8006704:	4b02      	ldr	r3, [pc, #8]	@ (8006710 <malloc+0xc>)
 8006706:	4601      	mov	r1, r0
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f000 b82d 	b.w	8006768 <_malloc_r>
 800670e:	bf00      	nop
 8006710:	2000002c 	.word	0x2000002c

08006714 <free>:
 8006714:	4b02      	ldr	r3, [pc, #8]	@ (8006720 <free+0xc>)
 8006716:	4601      	mov	r1, r0
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	f001 bdfd 	b.w	8008318 <_free_r>
 800671e:	bf00      	nop
 8006720:	2000002c 	.word	0x2000002c

08006724 <sbrk_aligned>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	4e0f      	ldr	r6, [pc, #60]	@ (8006764 <sbrk_aligned+0x40>)
 8006728:	460c      	mov	r4, r1
 800672a:	6831      	ldr	r1, [r6, #0]
 800672c:	4605      	mov	r5, r0
 800672e:	b911      	cbnz	r1, 8006736 <sbrk_aligned+0x12>
 8006730:	f000 ff48 	bl	80075c4 <_sbrk_r>
 8006734:	6030      	str	r0, [r6, #0]
 8006736:	4621      	mov	r1, r4
 8006738:	4628      	mov	r0, r5
 800673a:	f000 ff43 	bl	80075c4 <_sbrk_r>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d103      	bne.n	800674a <sbrk_aligned+0x26>
 8006742:	f04f 34ff 	mov.w	r4, #4294967295
 8006746:	4620      	mov	r0, r4
 8006748:	bd70      	pop	{r4, r5, r6, pc}
 800674a:	1cc4      	adds	r4, r0, #3
 800674c:	f024 0403 	bic.w	r4, r4, #3
 8006750:	42a0      	cmp	r0, r4
 8006752:	d0f8      	beq.n	8006746 <sbrk_aligned+0x22>
 8006754:	1a21      	subs	r1, r4, r0
 8006756:	4628      	mov	r0, r5
 8006758:	f000 ff34 	bl	80075c4 <_sbrk_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d1f2      	bne.n	8006746 <sbrk_aligned+0x22>
 8006760:	e7ef      	b.n	8006742 <sbrk_aligned+0x1e>
 8006762:	bf00      	nop
 8006764:	200002d4 	.word	0x200002d4

08006768 <_malloc_r>:
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800676c:	1ccd      	adds	r5, r1, #3
 800676e:	f025 0503 	bic.w	r5, r5, #3
 8006772:	3508      	adds	r5, #8
 8006774:	2d0c      	cmp	r5, #12
 8006776:	bf38      	it	cc
 8006778:	250c      	movcc	r5, #12
 800677a:	2d00      	cmp	r5, #0
 800677c:	4606      	mov	r6, r0
 800677e:	db01      	blt.n	8006784 <_malloc_r+0x1c>
 8006780:	42a9      	cmp	r1, r5
 8006782:	d904      	bls.n	800678e <_malloc_r+0x26>
 8006784:	230c      	movs	r3, #12
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	2000      	movs	r0, #0
 800678a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006864 <_malloc_r+0xfc>
 8006792:	f000 f869 	bl	8006868 <__malloc_lock>
 8006796:	f8d8 3000 	ldr.w	r3, [r8]
 800679a:	461c      	mov	r4, r3
 800679c:	bb44      	cbnz	r4, 80067f0 <_malloc_r+0x88>
 800679e:	4629      	mov	r1, r5
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7ff ffbf 	bl	8006724 <sbrk_aligned>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	4604      	mov	r4, r0
 80067aa:	d158      	bne.n	800685e <_malloc_r+0xf6>
 80067ac:	f8d8 4000 	ldr.w	r4, [r8]
 80067b0:	4627      	mov	r7, r4
 80067b2:	2f00      	cmp	r7, #0
 80067b4:	d143      	bne.n	800683e <_malloc_r+0xd6>
 80067b6:	2c00      	cmp	r4, #0
 80067b8:	d04b      	beq.n	8006852 <_malloc_r+0xea>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	4639      	mov	r1, r7
 80067be:	4630      	mov	r0, r6
 80067c0:	eb04 0903 	add.w	r9, r4, r3
 80067c4:	f000 fefe 	bl	80075c4 <_sbrk_r>
 80067c8:	4581      	cmp	r9, r0
 80067ca:	d142      	bne.n	8006852 <_malloc_r+0xea>
 80067cc:	6821      	ldr	r1, [r4, #0]
 80067ce:	1a6d      	subs	r5, r5, r1
 80067d0:	4629      	mov	r1, r5
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7ff ffa6 	bl	8006724 <sbrk_aligned>
 80067d8:	3001      	adds	r0, #1
 80067da:	d03a      	beq.n	8006852 <_malloc_r+0xea>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	442b      	add	r3, r5
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	f8d8 3000 	ldr.w	r3, [r8]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	bb62      	cbnz	r2, 8006844 <_malloc_r+0xdc>
 80067ea:	f8c8 7000 	str.w	r7, [r8]
 80067ee:	e00f      	b.n	8006810 <_malloc_r+0xa8>
 80067f0:	6822      	ldr	r2, [r4, #0]
 80067f2:	1b52      	subs	r2, r2, r5
 80067f4:	d420      	bmi.n	8006838 <_malloc_r+0xd0>
 80067f6:	2a0b      	cmp	r2, #11
 80067f8:	d917      	bls.n	800682a <_malloc_r+0xc2>
 80067fa:	1961      	adds	r1, r4, r5
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	6025      	str	r5, [r4, #0]
 8006800:	bf18      	it	ne
 8006802:	6059      	strne	r1, [r3, #4]
 8006804:	6863      	ldr	r3, [r4, #4]
 8006806:	bf08      	it	eq
 8006808:	f8c8 1000 	streq.w	r1, [r8]
 800680c:	5162      	str	r2, [r4, r5]
 800680e:	604b      	str	r3, [r1, #4]
 8006810:	4630      	mov	r0, r6
 8006812:	f000 f82f 	bl	8006874 <__malloc_unlock>
 8006816:	f104 000b 	add.w	r0, r4, #11
 800681a:	1d23      	adds	r3, r4, #4
 800681c:	f020 0007 	bic.w	r0, r0, #7
 8006820:	1ac2      	subs	r2, r0, r3
 8006822:	bf1c      	itt	ne
 8006824:	1a1b      	subne	r3, r3, r0
 8006826:	50a3      	strne	r3, [r4, r2]
 8006828:	e7af      	b.n	800678a <_malloc_r+0x22>
 800682a:	6862      	ldr	r2, [r4, #4]
 800682c:	42a3      	cmp	r3, r4
 800682e:	bf0c      	ite	eq
 8006830:	f8c8 2000 	streq.w	r2, [r8]
 8006834:	605a      	strne	r2, [r3, #4]
 8006836:	e7eb      	b.n	8006810 <_malloc_r+0xa8>
 8006838:	4623      	mov	r3, r4
 800683a:	6864      	ldr	r4, [r4, #4]
 800683c:	e7ae      	b.n	800679c <_malloc_r+0x34>
 800683e:	463c      	mov	r4, r7
 8006840:	687f      	ldr	r7, [r7, #4]
 8006842:	e7b6      	b.n	80067b2 <_malloc_r+0x4a>
 8006844:	461a      	mov	r2, r3
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	42a3      	cmp	r3, r4
 800684a:	d1fb      	bne.n	8006844 <_malloc_r+0xdc>
 800684c:	2300      	movs	r3, #0
 800684e:	6053      	str	r3, [r2, #4]
 8006850:	e7de      	b.n	8006810 <_malloc_r+0xa8>
 8006852:	230c      	movs	r3, #12
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	4630      	mov	r0, r6
 8006858:	f000 f80c 	bl	8006874 <__malloc_unlock>
 800685c:	e794      	b.n	8006788 <_malloc_r+0x20>
 800685e:	6005      	str	r5, [r0, #0]
 8006860:	e7d6      	b.n	8006810 <_malloc_r+0xa8>
 8006862:	bf00      	nop
 8006864:	200002d8 	.word	0x200002d8

08006868 <__malloc_lock>:
 8006868:	4801      	ldr	r0, [pc, #4]	@ (8006870 <__malloc_lock+0x8>)
 800686a:	f000 bef8 	b.w	800765e <__retarget_lock_acquire_recursive>
 800686e:	bf00      	nop
 8006870:	2000041c 	.word	0x2000041c

08006874 <__malloc_unlock>:
 8006874:	4801      	ldr	r0, [pc, #4]	@ (800687c <__malloc_unlock+0x8>)
 8006876:	f000 bef3 	b.w	8007660 <__retarget_lock_release_recursive>
 800687a:	bf00      	nop
 800687c:	2000041c 	.word	0x2000041c

08006880 <__cvt>:
 8006880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	ec57 6b10 	vmov	r6, r7, d0
 8006888:	2f00      	cmp	r7, #0
 800688a:	460c      	mov	r4, r1
 800688c:	4619      	mov	r1, r3
 800688e:	463b      	mov	r3, r7
 8006890:	bfbb      	ittet	lt
 8006892:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006896:	461f      	movlt	r7, r3
 8006898:	2300      	movge	r3, #0
 800689a:	232d      	movlt	r3, #45	@ 0x2d
 800689c:	700b      	strb	r3, [r1, #0]
 800689e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80068a4:	4691      	mov	r9, r2
 80068a6:	f023 0820 	bic.w	r8, r3, #32
 80068aa:	bfbc      	itt	lt
 80068ac:	4632      	movlt	r2, r6
 80068ae:	4616      	movlt	r6, r2
 80068b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068b4:	d005      	beq.n	80068c2 <__cvt+0x42>
 80068b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068ba:	d100      	bne.n	80068be <__cvt+0x3e>
 80068bc:	3401      	adds	r4, #1
 80068be:	2102      	movs	r1, #2
 80068c0:	e000      	b.n	80068c4 <__cvt+0x44>
 80068c2:	2103      	movs	r1, #3
 80068c4:	ab03      	add	r3, sp, #12
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	ab02      	add	r3, sp, #8
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	ec47 6b10 	vmov	d0, r6, r7
 80068d0:	4653      	mov	r3, sl
 80068d2:	4622      	mov	r2, r4
 80068d4:	f000 ff5c 	bl	8007790 <_dtoa_r>
 80068d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068dc:	4605      	mov	r5, r0
 80068de:	d119      	bne.n	8006914 <__cvt+0x94>
 80068e0:	f019 0f01 	tst.w	r9, #1
 80068e4:	d00e      	beq.n	8006904 <__cvt+0x84>
 80068e6:	eb00 0904 	add.w	r9, r0, r4
 80068ea:	2200      	movs	r2, #0
 80068ec:	2300      	movs	r3, #0
 80068ee:	4630      	mov	r0, r6
 80068f0:	4639      	mov	r1, r7
 80068f2:	f7fa f921 	bl	8000b38 <__aeabi_dcmpeq>
 80068f6:	b108      	cbz	r0, 80068fc <__cvt+0x7c>
 80068f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80068fc:	2230      	movs	r2, #48	@ 0x30
 80068fe:	9b03      	ldr	r3, [sp, #12]
 8006900:	454b      	cmp	r3, r9
 8006902:	d31e      	bcc.n	8006942 <__cvt+0xc2>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006908:	1b5b      	subs	r3, r3, r5
 800690a:	4628      	mov	r0, r5
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	b004      	add	sp, #16
 8006910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006914:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006918:	eb00 0904 	add.w	r9, r0, r4
 800691c:	d1e5      	bne.n	80068ea <__cvt+0x6a>
 800691e:	7803      	ldrb	r3, [r0, #0]
 8006920:	2b30      	cmp	r3, #48	@ 0x30
 8006922:	d10a      	bne.n	800693a <__cvt+0xba>
 8006924:	2200      	movs	r2, #0
 8006926:	2300      	movs	r3, #0
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7fa f904 	bl	8000b38 <__aeabi_dcmpeq>
 8006930:	b918      	cbnz	r0, 800693a <__cvt+0xba>
 8006932:	f1c4 0401 	rsb	r4, r4, #1
 8006936:	f8ca 4000 	str.w	r4, [sl]
 800693a:	f8da 3000 	ldr.w	r3, [sl]
 800693e:	4499      	add	r9, r3
 8006940:	e7d3      	b.n	80068ea <__cvt+0x6a>
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	9103      	str	r1, [sp, #12]
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	e7d9      	b.n	80068fe <__cvt+0x7e>

0800694a <__exponent>:
 800694a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694c:	2900      	cmp	r1, #0
 800694e:	bfba      	itte	lt
 8006950:	4249      	neglt	r1, r1
 8006952:	232d      	movlt	r3, #45	@ 0x2d
 8006954:	232b      	movge	r3, #43	@ 0x2b
 8006956:	2909      	cmp	r1, #9
 8006958:	7002      	strb	r2, [r0, #0]
 800695a:	7043      	strb	r3, [r0, #1]
 800695c:	dd29      	ble.n	80069b2 <__exponent+0x68>
 800695e:	f10d 0307 	add.w	r3, sp, #7
 8006962:	461d      	mov	r5, r3
 8006964:	270a      	movs	r7, #10
 8006966:	461a      	mov	r2, r3
 8006968:	fbb1 f6f7 	udiv	r6, r1, r7
 800696c:	fb07 1416 	mls	r4, r7, r6, r1
 8006970:	3430      	adds	r4, #48	@ 0x30
 8006972:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006976:	460c      	mov	r4, r1
 8006978:	2c63      	cmp	r4, #99	@ 0x63
 800697a:	f103 33ff 	add.w	r3, r3, #4294967295
 800697e:	4631      	mov	r1, r6
 8006980:	dcf1      	bgt.n	8006966 <__exponent+0x1c>
 8006982:	3130      	adds	r1, #48	@ 0x30
 8006984:	1e94      	subs	r4, r2, #2
 8006986:	f803 1c01 	strb.w	r1, [r3, #-1]
 800698a:	1c41      	adds	r1, r0, #1
 800698c:	4623      	mov	r3, r4
 800698e:	42ab      	cmp	r3, r5
 8006990:	d30a      	bcc.n	80069a8 <__exponent+0x5e>
 8006992:	f10d 0309 	add.w	r3, sp, #9
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	42ac      	cmp	r4, r5
 800699a:	bf88      	it	hi
 800699c:	2300      	movhi	r3, #0
 800699e:	3302      	adds	r3, #2
 80069a0:	4403      	add	r3, r0
 80069a2:	1a18      	subs	r0, r3, r0
 80069a4:	b003      	add	sp, #12
 80069a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069b0:	e7ed      	b.n	800698e <__exponent+0x44>
 80069b2:	2330      	movs	r3, #48	@ 0x30
 80069b4:	3130      	adds	r1, #48	@ 0x30
 80069b6:	7083      	strb	r3, [r0, #2]
 80069b8:	70c1      	strb	r1, [r0, #3]
 80069ba:	1d03      	adds	r3, r0, #4
 80069bc:	e7f1      	b.n	80069a2 <__exponent+0x58>
	...

080069c0 <_printf_float>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	b08d      	sub	sp, #52	@ 0x34
 80069c6:	460c      	mov	r4, r1
 80069c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069cc:	4616      	mov	r6, r2
 80069ce:	461f      	mov	r7, r3
 80069d0:	4605      	mov	r5, r0
 80069d2:	f000 fdbf 	bl	8007554 <_localeconv_r>
 80069d6:	6803      	ldr	r3, [r0, #0]
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7f9 fc80 	bl	80002e0 <strlen>
 80069e0:	2300      	movs	r3, #0
 80069e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80069e4:	f8d8 3000 	ldr.w	r3, [r8]
 80069e8:	9005      	str	r0, [sp, #20]
 80069ea:	3307      	adds	r3, #7
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	f103 0208 	add.w	r2, r3, #8
 80069f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069f8:	f8d4 b000 	ldr.w	fp, [r4]
 80069fc:	f8c8 2000 	str.w	r2, [r8]
 8006a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a16:	4b9c      	ldr	r3, [pc, #624]	@ (8006c88 <_printf_float+0x2c8>)
 8006a18:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1c:	f7fa f8be 	bl	8000b9c <__aeabi_dcmpun>
 8006a20:	bb70      	cbnz	r0, 8006a80 <_printf_float+0xc0>
 8006a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a26:	4b98      	ldr	r3, [pc, #608]	@ (8006c88 <_printf_float+0x2c8>)
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2c:	f7fa f898 	bl	8000b60 <__aeabi_dcmple>
 8006a30:	bb30      	cbnz	r0, 8006a80 <_printf_float+0xc0>
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	4640      	mov	r0, r8
 8006a38:	4649      	mov	r1, r9
 8006a3a:	f7fa f887 	bl	8000b4c <__aeabi_dcmplt>
 8006a3e:	b110      	cbz	r0, 8006a46 <_printf_float+0x86>
 8006a40:	232d      	movs	r3, #45	@ 0x2d
 8006a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a46:	4a91      	ldr	r2, [pc, #580]	@ (8006c8c <_printf_float+0x2cc>)
 8006a48:	4b91      	ldr	r3, [pc, #580]	@ (8006c90 <_printf_float+0x2d0>)
 8006a4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a4e:	bf94      	ite	ls
 8006a50:	4690      	movls	r8, r2
 8006a52:	4698      	movhi	r8, r3
 8006a54:	2303      	movs	r3, #3
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	f02b 0304 	bic.w	r3, fp, #4
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	9700      	str	r7, [sp, #0]
 8006a64:	4633      	mov	r3, r6
 8006a66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 f9d2 	bl	8006e14 <_printf_common>
 8006a70:	3001      	adds	r0, #1
 8006a72:	f040 808d 	bne.w	8006b90 <_printf_float+0x1d0>
 8006a76:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7a:	b00d      	add	sp, #52	@ 0x34
 8006a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	4640      	mov	r0, r8
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7fa f888 	bl	8000b9c <__aeabi_dcmpun>
 8006a8c:	b140      	cbz	r0, 8006aa0 <_printf_float+0xe0>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bfbc      	itt	lt
 8006a94:	232d      	movlt	r3, #45	@ 0x2d
 8006a96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c94 <_printf_float+0x2d4>)
 8006a9c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c98 <_printf_float+0x2d8>)
 8006a9e:	e7d4      	b.n	8006a4a <_printf_float+0x8a>
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006aa6:	9206      	str	r2, [sp, #24]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	d13b      	bne.n	8006b24 <_printf_float+0x164>
 8006aac:	2306      	movs	r3, #6
 8006aae:	6063      	str	r3, [r4, #4]
 8006ab0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	6022      	str	r2, [r4, #0]
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	ab0a      	add	r3, sp, #40	@ 0x28
 8006abc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ac0:	ab09      	add	r3, sp, #36	@ 0x24
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	6861      	ldr	r1, [r4, #4]
 8006ac6:	ec49 8b10 	vmov	d0, r8, r9
 8006aca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7ff fed6 	bl	8006880 <__cvt>
 8006ad4:	9b06      	ldr	r3, [sp, #24]
 8006ad6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ad8:	2b47      	cmp	r3, #71	@ 0x47
 8006ada:	4680      	mov	r8, r0
 8006adc:	d129      	bne.n	8006b32 <_printf_float+0x172>
 8006ade:	1cc8      	adds	r0, r1, #3
 8006ae0:	db02      	blt.n	8006ae8 <_printf_float+0x128>
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	dd41      	ble.n	8006b6c <_printf_float+0x1ac>
 8006ae8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006aec:	fa5f fa8a 	uxtb.w	sl, sl
 8006af0:	3901      	subs	r1, #1
 8006af2:	4652      	mov	r2, sl
 8006af4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006af8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006afa:	f7ff ff26 	bl	800694a <__exponent>
 8006afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b00:	1813      	adds	r3, r2, r0
 8006b02:	2a01      	cmp	r2, #1
 8006b04:	4681      	mov	r9, r0
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	dc02      	bgt.n	8006b10 <_printf_float+0x150>
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	07d2      	lsls	r2, r2, #31
 8006b0e:	d501      	bpl.n	8006b14 <_printf_float+0x154>
 8006b10:	3301      	adds	r3, #1
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0a2      	beq.n	8006a62 <_printf_float+0xa2>
 8006b1c:	232d      	movs	r3, #45	@ 0x2d
 8006b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b22:	e79e      	b.n	8006a62 <_printf_float+0xa2>
 8006b24:	9a06      	ldr	r2, [sp, #24]
 8006b26:	2a47      	cmp	r2, #71	@ 0x47
 8006b28:	d1c2      	bne.n	8006ab0 <_printf_float+0xf0>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1c0      	bne.n	8006ab0 <_printf_float+0xf0>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e7bd      	b.n	8006aae <_printf_float+0xee>
 8006b32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b36:	d9db      	bls.n	8006af0 <_printf_float+0x130>
 8006b38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b3c:	d118      	bne.n	8006b70 <_printf_float+0x1b0>
 8006b3e:	2900      	cmp	r1, #0
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	dd0b      	ble.n	8006b5c <_printf_float+0x19c>
 8006b44:	6121      	str	r1, [r4, #16]
 8006b46:	b913      	cbnz	r3, 8006b4e <_printf_float+0x18e>
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	07d0      	lsls	r0, r2, #31
 8006b4c:	d502      	bpl.n	8006b54 <_printf_float+0x194>
 8006b4e:	3301      	adds	r3, #1
 8006b50:	440b      	add	r3, r1
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b56:	f04f 0900 	mov.w	r9, #0
 8006b5a:	e7db      	b.n	8006b14 <_printf_float+0x154>
 8006b5c:	b913      	cbnz	r3, 8006b64 <_printf_float+0x1a4>
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	07d2      	lsls	r2, r2, #31
 8006b62:	d501      	bpl.n	8006b68 <_printf_float+0x1a8>
 8006b64:	3302      	adds	r3, #2
 8006b66:	e7f4      	b.n	8006b52 <_printf_float+0x192>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e7f2      	b.n	8006b52 <_printf_float+0x192>
 8006b6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b72:	4299      	cmp	r1, r3
 8006b74:	db05      	blt.n	8006b82 <_printf_float+0x1c2>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	6121      	str	r1, [r4, #16]
 8006b7a:	07d8      	lsls	r0, r3, #31
 8006b7c:	d5ea      	bpl.n	8006b54 <_printf_float+0x194>
 8006b7e:	1c4b      	adds	r3, r1, #1
 8006b80:	e7e7      	b.n	8006b52 <_printf_float+0x192>
 8006b82:	2900      	cmp	r1, #0
 8006b84:	bfd4      	ite	le
 8006b86:	f1c1 0202 	rsble	r2, r1, #2
 8006b8a:	2201      	movgt	r2, #1
 8006b8c:	4413      	add	r3, r2
 8006b8e:	e7e0      	b.n	8006b52 <_printf_float+0x192>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	055a      	lsls	r2, r3, #21
 8006b94:	d407      	bmi.n	8006ba6 <_printf_float+0x1e6>
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d12b      	bne.n	8006bfc <_printf_float+0x23c>
 8006ba4:	e767      	b.n	8006a76 <_printf_float+0xb6>
 8006ba6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006baa:	f240 80dd 	bls.w	8006d68 <_printf_float+0x3a8>
 8006bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f7f9 ffbf 	bl	8000b38 <__aeabi_dcmpeq>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d033      	beq.n	8006c26 <_printf_float+0x266>
 8006bbe:	4a37      	ldr	r2, [pc, #220]	@ (8006c9c <_printf_float+0x2dc>)
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	f43f af54 	beq.w	8006a76 <_printf_float+0xb6>
 8006bce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006bd2:	4543      	cmp	r3, r8
 8006bd4:	db02      	blt.n	8006bdc <_printf_float+0x21c>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	07d8      	lsls	r0, r3, #31
 8006bda:	d50f      	bpl.n	8006bfc <_printf_float+0x23c>
 8006bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006be0:	4631      	mov	r1, r6
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	f43f af45 	beq.w	8006a76 <_printf_float+0xb6>
 8006bec:	f04f 0900 	mov.w	r9, #0
 8006bf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bf4:	f104 0a1a 	add.w	sl, r4, #26
 8006bf8:	45c8      	cmp	r8, r9
 8006bfa:	dc09      	bgt.n	8006c10 <_printf_float+0x250>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	079b      	lsls	r3, r3, #30
 8006c00:	f100 8103 	bmi.w	8006e0a <_printf_float+0x44a>
 8006c04:	68e0      	ldr	r0, [r4, #12]
 8006c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c08:	4298      	cmp	r0, r3
 8006c0a:	bfb8      	it	lt
 8006c0c:	4618      	movlt	r0, r3
 8006c0e:	e734      	b.n	8006a7a <_printf_float+0xba>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4652      	mov	r2, sl
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f af2b 	beq.w	8006a76 <_printf_float+0xb6>
 8006c20:	f109 0901 	add.w	r9, r9, #1
 8006c24:	e7e8      	b.n	8006bf8 <_printf_float+0x238>
 8006c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dc39      	bgt.n	8006ca0 <_printf_float+0x2e0>
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c9c <_printf_float+0x2dc>)
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4631      	mov	r1, r6
 8006c32:	4628      	mov	r0, r5
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	f43f af1d 	beq.w	8006a76 <_printf_float+0xb6>
 8006c3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c40:	ea59 0303 	orrs.w	r3, r9, r3
 8006c44:	d102      	bne.n	8006c4c <_printf_float+0x28c>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	07d9      	lsls	r1, r3, #31
 8006c4a:	d5d7      	bpl.n	8006bfc <_printf_float+0x23c>
 8006c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	f43f af0d 	beq.w	8006a76 <_printf_float+0xb6>
 8006c5c:	f04f 0a00 	mov.w	sl, #0
 8006c60:	f104 0b1a 	add.w	fp, r4, #26
 8006c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c66:	425b      	negs	r3, r3
 8006c68:	4553      	cmp	r3, sl
 8006c6a:	dc01      	bgt.n	8006c70 <_printf_float+0x2b0>
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	e793      	b.n	8006b98 <_printf_float+0x1d8>
 8006c70:	2301      	movs	r3, #1
 8006c72:	465a      	mov	r2, fp
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f43f aefb 	beq.w	8006a76 <_printf_float+0xb6>
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	e7ee      	b.n	8006c64 <_printf_float+0x2a4>
 8006c86:	bf00      	nop
 8006c88:	7fefffff 	.word	0x7fefffff
 8006c8c:	080097f0 	.word	0x080097f0
 8006c90:	080097f4 	.word	0x080097f4
 8006c94:	080097f8 	.word	0x080097f8
 8006c98:	080097fc 	.word	0x080097fc
 8006c9c:	08009800 	.word	0x08009800
 8006ca0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ca2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ca6:	4553      	cmp	r3, sl
 8006ca8:	bfa8      	it	ge
 8006caa:	4653      	movge	r3, sl
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	4699      	mov	r9, r3
 8006cb0:	dc36      	bgt.n	8006d20 <_printf_float+0x360>
 8006cb2:	f04f 0b00 	mov.w	fp, #0
 8006cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cba:	f104 021a 	add.w	r2, r4, #26
 8006cbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cc0:	9306      	str	r3, [sp, #24]
 8006cc2:	eba3 0309 	sub.w	r3, r3, r9
 8006cc6:	455b      	cmp	r3, fp
 8006cc8:	dc31      	bgt.n	8006d2e <_printf_float+0x36e>
 8006cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ccc:	459a      	cmp	sl, r3
 8006cce:	dc3a      	bgt.n	8006d46 <_printf_float+0x386>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	07da      	lsls	r2, r3, #31
 8006cd4:	d437      	bmi.n	8006d46 <_printf_float+0x386>
 8006cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd8:	ebaa 0903 	sub.w	r9, sl, r3
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	ebaa 0303 	sub.w	r3, sl, r3
 8006ce2:	4599      	cmp	r9, r3
 8006ce4:	bfa8      	it	ge
 8006ce6:	4699      	movge	r9, r3
 8006ce8:	f1b9 0f00 	cmp.w	r9, #0
 8006cec:	dc33      	bgt.n	8006d56 <_printf_float+0x396>
 8006cee:	f04f 0800 	mov.w	r8, #0
 8006cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cf6:	f104 0b1a 	add.w	fp, r4, #26
 8006cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfc:	ebaa 0303 	sub.w	r3, sl, r3
 8006d00:	eba3 0309 	sub.w	r3, r3, r9
 8006d04:	4543      	cmp	r3, r8
 8006d06:	f77f af79 	ble.w	8006bfc <_printf_float+0x23c>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	465a      	mov	r2, fp
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	f43f aeae 	beq.w	8006a76 <_printf_float+0xb6>
 8006d1a:	f108 0801 	add.w	r8, r8, #1
 8006d1e:	e7ec      	b.n	8006cfa <_printf_float+0x33a>
 8006d20:	4642      	mov	r2, r8
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1c2      	bne.n	8006cb2 <_printf_float+0x2f2>
 8006d2c:	e6a3      	b.n	8006a76 <_printf_float+0xb6>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	9206      	str	r2, [sp, #24]
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f ae9c 	beq.w	8006a76 <_printf_float+0xb6>
 8006d3e:	9a06      	ldr	r2, [sp, #24]
 8006d40:	f10b 0b01 	add.w	fp, fp, #1
 8006d44:	e7bb      	b.n	8006cbe <_printf_float+0x2fe>
 8006d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	d1c0      	bne.n	8006cd6 <_printf_float+0x316>
 8006d54:	e68f      	b.n	8006a76 <_printf_float+0xb6>
 8006d56:	9a06      	ldr	r2, [sp, #24]
 8006d58:	464b      	mov	r3, r9
 8006d5a:	4442      	add	r2, r8
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	d1c3      	bne.n	8006cee <_printf_float+0x32e>
 8006d66:	e686      	b.n	8006a76 <_printf_float+0xb6>
 8006d68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d6c:	f1ba 0f01 	cmp.w	sl, #1
 8006d70:	dc01      	bgt.n	8006d76 <_printf_float+0x3b6>
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d536      	bpl.n	8006de4 <_printf_float+0x424>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4642      	mov	r2, r8
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	f43f ae78 	beq.w	8006a76 <_printf_float+0xb6>
 8006d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	f43f ae70 	beq.w	8006a76 <_printf_float+0xb6>
 8006d96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006da2:	f7f9 fec9 	bl	8000b38 <__aeabi_dcmpeq>
 8006da6:	b9c0      	cbnz	r0, 8006dda <_printf_float+0x41a>
 8006da8:	4653      	mov	r3, sl
 8006daa:	f108 0201 	add.w	r2, r8, #1
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	d10c      	bne.n	8006dd2 <_printf_float+0x412>
 8006db8:	e65d      	b.n	8006a76 <_printf_float+0xb6>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	465a      	mov	r2, fp
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f ae56 	beq.w	8006a76 <_printf_float+0xb6>
 8006dca:	f108 0801 	add.w	r8, r8, #1
 8006dce:	45d0      	cmp	r8, sl
 8006dd0:	dbf3      	blt.n	8006dba <_printf_float+0x3fa>
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006dd8:	e6df      	b.n	8006b9a <_printf_float+0x1da>
 8006dda:	f04f 0800 	mov.w	r8, #0
 8006dde:	f104 0b1a 	add.w	fp, r4, #26
 8006de2:	e7f4      	b.n	8006dce <_printf_float+0x40e>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4642      	mov	r2, r8
 8006de8:	e7e1      	b.n	8006dae <_printf_float+0x3ee>
 8006dea:	2301      	movs	r3, #1
 8006dec:	464a      	mov	r2, r9
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	f43f ae3e 	beq.w	8006a76 <_printf_float+0xb6>
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	4543      	cmp	r3, r8
 8006e06:	dcf0      	bgt.n	8006dea <_printf_float+0x42a>
 8006e08:	e6fc      	b.n	8006c04 <_printf_float+0x244>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	f104 0919 	add.w	r9, r4, #25
 8006e12:	e7f4      	b.n	8006dfe <_printf_float+0x43e>

08006e14 <_printf_common>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	4616      	mov	r6, r2
 8006e1a:	4698      	mov	r8, r3
 8006e1c:	688a      	ldr	r2, [r1, #8]
 8006e1e:	690b      	ldr	r3, [r1, #16]
 8006e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	bfb8      	it	lt
 8006e28:	4613      	movlt	r3, r2
 8006e2a:	6033      	str	r3, [r6, #0]
 8006e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e30:	4607      	mov	r7, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	b10a      	cbz	r2, 8006e3a <_printf_common+0x26>
 8006e36:	3301      	adds	r3, #1
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	0699      	lsls	r1, r3, #26
 8006e3e:	bf42      	ittt	mi
 8006e40:	6833      	ldrmi	r3, [r6, #0]
 8006e42:	3302      	addmi	r3, #2
 8006e44:	6033      	strmi	r3, [r6, #0]
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	f015 0506 	ands.w	r5, r5, #6
 8006e4c:	d106      	bne.n	8006e5c <_printf_common+0x48>
 8006e4e:	f104 0a19 	add.w	sl, r4, #25
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	6832      	ldr	r2, [r6, #0]
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	42ab      	cmp	r3, r5
 8006e5a:	dc26      	bgt.n	8006eaa <_printf_common+0x96>
 8006e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e60:	6822      	ldr	r2, [r4, #0]
 8006e62:	3b00      	subs	r3, #0
 8006e64:	bf18      	it	ne
 8006e66:	2301      	movne	r3, #1
 8006e68:	0692      	lsls	r2, r2, #26
 8006e6a:	d42b      	bmi.n	8006ec4 <_printf_common+0xb0>
 8006e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e70:	4641      	mov	r1, r8
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c8      	blx	r9
 8006e76:	3001      	adds	r0, #1
 8006e78:	d01e      	beq.n	8006eb8 <_printf_common+0xa4>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	f003 0306 	and.w	r3, r3, #6
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	bf02      	ittt	eq
 8006e86:	68e5      	ldreq	r5, [r4, #12]
 8006e88:	6833      	ldreq	r3, [r6, #0]
 8006e8a:	1aed      	subeq	r5, r5, r3
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	bf0c      	ite	eq
 8006e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e94:	2500      	movne	r5, #0
 8006e96:	4293      	cmp	r3, r2
 8006e98:	bfc4      	itt	gt
 8006e9a:	1a9b      	subgt	r3, r3, r2
 8006e9c:	18ed      	addgt	r5, r5, r3
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	341a      	adds	r4, #26
 8006ea2:	42b5      	cmp	r5, r6
 8006ea4:	d11a      	bne.n	8006edc <_printf_common+0xc8>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e008      	b.n	8006ebc <_printf_common+0xa8>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4641      	mov	r1, r8
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	47c8      	blx	r9
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d103      	bne.n	8006ec0 <_printf_common+0xac>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	e7c6      	b.n	8006e52 <_printf_common+0x3e>
 8006ec4:	18e1      	adds	r1, r4, r3
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	2030      	movs	r0, #48	@ 0x30
 8006eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ece:	4422      	add	r2, r4
 8006ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ed8:	3302      	adds	r3, #2
 8006eda:	e7c7      	b.n	8006e6c <_printf_common+0x58>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c8      	blx	r9
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d0e6      	beq.n	8006eb8 <_printf_common+0xa4>
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7d9      	b.n	8006ea2 <_printf_common+0x8e>
	...

08006ef0 <_printf_i>:
 8006ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	7e0f      	ldrb	r7, [r1, #24]
 8006ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ef8:	2f78      	cmp	r7, #120	@ 0x78
 8006efa:	4691      	mov	r9, r2
 8006efc:	4680      	mov	r8, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	469a      	mov	sl, r3
 8006f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f06:	d807      	bhi.n	8006f18 <_printf_i+0x28>
 8006f08:	2f62      	cmp	r7, #98	@ 0x62
 8006f0a:	d80a      	bhi.n	8006f22 <_printf_i+0x32>
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	f000 80d2 	beq.w	80070b6 <_printf_i+0x1c6>
 8006f12:	2f58      	cmp	r7, #88	@ 0x58
 8006f14:	f000 80b9 	beq.w	800708a <_printf_i+0x19a>
 8006f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f20:	e03a      	b.n	8006f98 <_printf_i+0xa8>
 8006f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f26:	2b15      	cmp	r3, #21
 8006f28:	d8f6      	bhi.n	8006f18 <_printf_i+0x28>
 8006f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f30 <_printf_i+0x40>)
 8006f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f30:	08006f89 	.word	0x08006f89
 8006f34:	08006f9d 	.word	0x08006f9d
 8006f38:	08006f19 	.word	0x08006f19
 8006f3c:	08006f19 	.word	0x08006f19
 8006f40:	08006f19 	.word	0x08006f19
 8006f44:	08006f19 	.word	0x08006f19
 8006f48:	08006f9d 	.word	0x08006f9d
 8006f4c:	08006f19 	.word	0x08006f19
 8006f50:	08006f19 	.word	0x08006f19
 8006f54:	08006f19 	.word	0x08006f19
 8006f58:	08006f19 	.word	0x08006f19
 8006f5c:	0800709d 	.word	0x0800709d
 8006f60:	08006fc7 	.word	0x08006fc7
 8006f64:	08007057 	.word	0x08007057
 8006f68:	08006f19 	.word	0x08006f19
 8006f6c:	08006f19 	.word	0x08006f19
 8006f70:	080070bf 	.word	0x080070bf
 8006f74:	08006f19 	.word	0x08006f19
 8006f78:	08006fc7 	.word	0x08006fc7
 8006f7c:	08006f19 	.word	0x08006f19
 8006f80:	08006f19 	.word	0x08006f19
 8006f84:	0800705f 	.word	0x0800705f
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6032      	str	r2, [r6, #0]
 8006f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e09d      	b.n	80070d8 <_printf_i+0x1e8>
 8006f9c:	6833      	ldr	r3, [r6, #0]
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	1d19      	adds	r1, r3, #4
 8006fa2:	6031      	str	r1, [r6, #0]
 8006fa4:	0606      	lsls	r6, r0, #24
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0xbc>
 8006fa8:	681d      	ldr	r5, [r3, #0]
 8006faa:	e003      	b.n	8006fb4 <_printf_i+0xc4>
 8006fac:	0645      	lsls	r5, r0, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0xb8>
 8006fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fb4:	2d00      	cmp	r5, #0
 8006fb6:	da03      	bge.n	8006fc0 <_printf_i+0xd0>
 8006fb8:	232d      	movs	r3, #45	@ 0x2d
 8006fba:	426d      	negs	r5, r5
 8006fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc0:	4859      	ldr	r0, [pc, #356]	@ (8007128 <_printf_i+0x238>)
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	e011      	b.n	8006fea <_printf_i+0xfa>
 8006fc6:	6821      	ldr	r1, [r4, #0]
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	0608      	lsls	r0, r1, #24
 8006fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fd0:	d402      	bmi.n	8006fd8 <_printf_i+0xe8>
 8006fd2:	0649      	lsls	r1, r1, #25
 8006fd4:	bf48      	it	mi
 8006fd6:	b2ad      	uxthmi	r5, r5
 8006fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fda:	4853      	ldr	r0, [pc, #332]	@ (8007128 <_printf_i+0x238>)
 8006fdc:	6033      	str	r3, [r6, #0]
 8006fde:	bf14      	ite	ne
 8006fe0:	230a      	movne	r3, #10
 8006fe2:	2308      	moveq	r3, #8
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fea:	6866      	ldr	r6, [r4, #4]
 8006fec:	60a6      	str	r6, [r4, #8]
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	bfa2      	ittt	ge
 8006ff2:	6821      	ldrge	r1, [r4, #0]
 8006ff4:	f021 0104 	bicge.w	r1, r1, #4
 8006ff8:	6021      	strge	r1, [r4, #0]
 8006ffa:	b90d      	cbnz	r5, 8007000 <_printf_i+0x110>
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	d04b      	beq.n	8007098 <_printf_i+0x1a8>
 8007000:	4616      	mov	r6, r2
 8007002:	fbb5 f1f3 	udiv	r1, r5, r3
 8007006:	fb03 5711 	mls	r7, r3, r1, r5
 800700a:	5dc7      	ldrb	r7, [r0, r7]
 800700c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007010:	462f      	mov	r7, r5
 8007012:	42bb      	cmp	r3, r7
 8007014:	460d      	mov	r5, r1
 8007016:	d9f4      	bls.n	8007002 <_printf_i+0x112>
 8007018:	2b08      	cmp	r3, #8
 800701a:	d10b      	bne.n	8007034 <_printf_i+0x144>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07df      	lsls	r7, r3, #31
 8007020:	d508      	bpl.n	8007034 <_printf_i+0x144>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4299      	cmp	r1, r3
 8007028:	bfde      	ittt	le
 800702a:	2330      	movle	r3, #48	@ 0x30
 800702c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007030:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007034:	1b92      	subs	r2, r2, r6
 8007036:	6122      	str	r2, [r4, #16]
 8007038:	f8cd a000 	str.w	sl, [sp]
 800703c:	464b      	mov	r3, r9
 800703e:	aa03      	add	r2, sp, #12
 8007040:	4621      	mov	r1, r4
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff fee6 	bl	8006e14 <_printf_common>
 8007048:	3001      	adds	r0, #1
 800704a:	d14a      	bne.n	80070e2 <_printf_i+0x1f2>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	b004      	add	sp, #16
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f043 0320 	orr.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	4833      	ldr	r0, [pc, #204]	@ (800712c <_printf_i+0x23c>)
 8007060:	2778      	movs	r7, #120	@ 0x78
 8007062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6831      	ldr	r1, [r6, #0]
 800706a:	061f      	lsls	r7, r3, #24
 800706c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007070:	d402      	bmi.n	8007078 <_printf_i+0x188>
 8007072:	065f      	lsls	r7, r3, #25
 8007074:	bf48      	it	mi
 8007076:	b2ad      	uxthmi	r5, r5
 8007078:	6031      	str	r1, [r6, #0]
 800707a:	07d9      	lsls	r1, r3, #31
 800707c:	bf44      	itt	mi
 800707e:	f043 0320 	orrmi.w	r3, r3, #32
 8007082:	6023      	strmi	r3, [r4, #0]
 8007084:	b11d      	cbz	r5, 800708e <_printf_i+0x19e>
 8007086:	2310      	movs	r3, #16
 8007088:	e7ac      	b.n	8006fe4 <_printf_i+0xf4>
 800708a:	4827      	ldr	r0, [pc, #156]	@ (8007128 <_printf_i+0x238>)
 800708c:	e7e9      	b.n	8007062 <_printf_i+0x172>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	f023 0320 	bic.w	r3, r3, #32
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	e7f6      	b.n	8007086 <_printf_i+0x196>
 8007098:	4616      	mov	r6, r2
 800709a:	e7bd      	b.n	8007018 <_printf_i+0x128>
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	6961      	ldr	r1, [r4, #20]
 80070a2:	1d18      	adds	r0, r3, #4
 80070a4:	6030      	str	r0, [r6, #0]
 80070a6:	062e      	lsls	r6, r5, #24
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	d501      	bpl.n	80070b0 <_printf_i+0x1c0>
 80070ac:	6019      	str	r1, [r3, #0]
 80070ae:	e002      	b.n	80070b6 <_printf_i+0x1c6>
 80070b0:	0668      	lsls	r0, r5, #25
 80070b2:	d5fb      	bpl.n	80070ac <_printf_i+0x1bc>
 80070b4:	8019      	strh	r1, [r3, #0]
 80070b6:	2300      	movs	r3, #0
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	4616      	mov	r6, r2
 80070bc:	e7bc      	b.n	8007038 <_printf_i+0x148>
 80070be:	6833      	ldr	r3, [r6, #0]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	6032      	str	r2, [r6, #0]
 80070c4:	681e      	ldr	r6, [r3, #0]
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	2100      	movs	r1, #0
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7f9 f8b8 	bl	8000240 <memchr>
 80070d0:	b108      	cbz	r0, 80070d6 <_printf_i+0x1e6>
 80070d2:	1b80      	subs	r0, r0, r6
 80070d4:	6060      	str	r0, [r4, #4]
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	2300      	movs	r3, #0
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070e0:	e7aa      	b.n	8007038 <_printf_i+0x148>
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	4632      	mov	r2, r6
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d0ad      	beq.n	800704c <_printf_i+0x15c>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	d413      	bmi.n	800711e <_printf_i+0x22e>
 80070f6:	68e0      	ldr	r0, [r4, #12]
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	4298      	cmp	r0, r3
 80070fc:	bfb8      	it	lt
 80070fe:	4618      	movlt	r0, r3
 8007100:	e7a6      	b.n	8007050 <_printf_i+0x160>
 8007102:	2301      	movs	r3, #1
 8007104:	4632      	mov	r2, r6
 8007106:	4649      	mov	r1, r9
 8007108:	4640      	mov	r0, r8
 800710a:	47d0      	blx	sl
 800710c:	3001      	adds	r0, #1
 800710e:	d09d      	beq.n	800704c <_printf_i+0x15c>
 8007110:	3501      	adds	r5, #1
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	9903      	ldr	r1, [sp, #12]
 8007116:	1a5b      	subs	r3, r3, r1
 8007118:	42ab      	cmp	r3, r5
 800711a:	dcf2      	bgt.n	8007102 <_printf_i+0x212>
 800711c:	e7eb      	b.n	80070f6 <_printf_i+0x206>
 800711e:	2500      	movs	r5, #0
 8007120:	f104 0619 	add.w	r6, r4, #25
 8007124:	e7f5      	b.n	8007112 <_printf_i+0x222>
 8007126:	bf00      	nop
 8007128:	08009802 	.word	0x08009802
 800712c:	08009813 	.word	0x08009813

08007130 <std>:
 8007130:	2300      	movs	r3, #0
 8007132:	b510      	push	{r4, lr}
 8007134:	4604      	mov	r4, r0
 8007136:	e9c0 3300 	strd	r3, r3, [r0]
 800713a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800713e:	6083      	str	r3, [r0, #8]
 8007140:	8181      	strh	r1, [r0, #12]
 8007142:	6643      	str	r3, [r0, #100]	@ 0x64
 8007144:	81c2      	strh	r2, [r0, #14]
 8007146:	6183      	str	r3, [r0, #24]
 8007148:	4619      	mov	r1, r3
 800714a:	2208      	movs	r2, #8
 800714c:	305c      	adds	r0, #92	@ 0x5c
 800714e:	f000 f9f9 	bl	8007544 <memset>
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <std+0x58>)
 8007154:	6263      	str	r3, [r4, #36]	@ 0x24
 8007156:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <std+0x5c>)
 8007158:	62a3      	str	r3, [r4, #40]	@ 0x28
 800715a:	4b0d      	ldr	r3, [pc, #52]	@ (8007190 <std+0x60>)
 800715c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800715e:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <std+0x64>)
 8007160:	6323      	str	r3, [r4, #48]	@ 0x30
 8007162:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <std+0x68>)
 8007164:	6224      	str	r4, [r4, #32]
 8007166:	429c      	cmp	r4, r3
 8007168:	d006      	beq.n	8007178 <std+0x48>
 800716a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800716e:	4294      	cmp	r4, r2
 8007170:	d002      	beq.n	8007178 <std+0x48>
 8007172:	33d0      	adds	r3, #208	@ 0xd0
 8007174:	429c      	cmp	r4, r3
 8007176:	d105      	bne.n	8007184 <std+0x54>
 8007178:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	f000 ba6c 	b.w	800765c <__retarget_lock_init_recursive>
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop
 8007188:	08007395 	.word	0x08007395
 800718c:	080073b7 	.word	0x080073b7
 8007190:	080073ef 	.word	0x080073ef
 8007194:	08007413 	.word	0x08007413
 8007198:	200002dc 	.word	0x200002dc

0800719c <stdio_exit_handler>:
 800719c:	4a02      	ldr	r2, [pc, #8]	@ (80071a8 <stdio_exit_handler+0xc>)
 800719e:	4903      	ldr	r1, [pc, #12]	@ (80071ac <stdio_exit_handler+0x10>)
 80071a0:	4803      	ldr	r0, [pc, #12]	@ (80071b0 <stdio_exit_handler+0x14>)
 80071a2:	f000 b869 	b.w	8007278 <_fwalk_sglue>
 80071a6:	bf00      	nop
 80071a8:	20000020 	.word	0x20000020
 80071ac:	08008e3d 	.word	0x08008e3d
 80071b0:	20000030 	.word	0x20000030

080071b4 <cleanup_stdio>:
 80071b4:	6841      	ldr	r1, [r0, #4]
 80071b6:	4b0c      	ldr	r3, [pc, #48]	@ (80071e8 <cleanup_stdio+0x34>)
 80071b8:	4299      	cmp	r1, r3
 80071ba:	b510      	push	{r4, lr}
 80071bc:	4604      	mov	r4, r0
 80071be:	d001      	beq.n	80071c4 <cleanup_stdio+0x10>
 80071c0:	f001 fe3c 	bl	8008e3c <_fflush_r>
 80071c4:	68a1      	ldr	r1, [r4, #8]
 80071c6:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <cleanup_stdio+0x38>)
 80071c8:	4299      	cmp	r1, r3
 80071ca:	d002      	beq.n	80071d2 <cleanup_stdio+0x1e>
 80071cc:	4620      	mov	r0, r4
 80071ce:	f001 fe35 	bl	8008e3c <_fflush_r>
 80071d2:	68e1      	ldr	r1, [r4, #12]
 80071d4:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <cleanup_stdio+0x3c>)
 80071d6:	4299      	cmp	r1, r3
 80071d8:	d004      	beq.n	80071e4 <cleanup_stdio+0x30>
 80071da:	4620      	mov	r0, r4
 80071dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e0:	f001 be2c 	b.w	8008e3c <_fflush_r>
 80071e4:	bd10      	pop	{r4, pc}
 80071e6:	bf00      	nop
 80071e8:	200002dc 	.word	0x200002dc
 80071ec:	20000344 	.word	0x20000344
 80071f0:	200003ac 	.word	0x200003ac

080071f4 <global_stdio_init.part.0>:
 80071f4:	b510      	push	{r4, lr}
 80071f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007224 <global_stdio_init.part.0+0x30>)
 80071f8:	4c0b      	ldr	r4, [pc, #44]	@ (8007228 <global_stdio_init.part.0+0x34>)
 80071fa:	4a0c      	ldr	r2, [pc, #48]	@ (800722c <global_stdio_init.part.0+0x38>)
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	4620      	mov	r0, r4
 8007200:	2200      	movs	r2, #0
 8007202:	2104      	movs	r1, #4
 8007204:	f7ff ff94 	bl	8007130 <std>
 8007208:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800720c:	2201      	movs	r2, #1
 800720e:	2109      	movs	r1, #9
 8007210:	f7ff ff8e 	bl	8007130 <std>
 8007214:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007218:	2202      	movs	r2, #2
 800721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721e:	2112      	movs	r1, #18
 8007220:	f7ff bf86 	b.w	8007130 <std>
 8007224:	20000414 	.word	0x20000414
 8007228:	200002dc 	.word	0x200002dc
 800722c:	0800719d 	.word	0x0800719d

08007230 <__sfp_lock_acquire>:
 8007230:	4801      	ldr	r0, [pc, #4]	@ (8007238 <__sfp_lock_acquire+0x8>)
 8007232:	f000 ba14 	b.w	800765e <__retarget_lock_acquire_recursive>
 8007236:	bf00      	nop
 8007238:	2000041d 	.word	0x2000041d

0800723c <__sfp_lock_release>:
 800723c:	4801      	ldr	r0, [pc, #4]	@ (8007244 <__sfp_lock_release+0x8>)
 800723e:	f000 ba0f 	b.w	8007660 <__retarget_lock_release_recursive>
 8007242:	bf00      	nop
 8007244:	2000041d 	.word	0x2000041d

08007248 <__sinit>:
 8007248:	b510      	push	{r4, lr}
 800724a:	4604      	mov	r4, r0
 800724c:	f7ff fff0 	bl	8007230 <__sfp_lock_acquire>
 8007250:	6a23      	ldr	r3, [r4, #32]
 8007252:	b11b      	cbz	r3, 800725c <__sinit+0x14>
 8007254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007258:	f7ff bff0 	b.w	800723c <__sfp_lock_release>
 800725c:	4b04      	ldr	r3, [pc, #16]	@ (8007270 <__sinit+0x28>)
 800725e:	6223      	str	r3, [r4, #32]
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <__sinit+0x2c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1f5      	bne.n	8007254 <__sinit+0xc>
 8007268:	f7ff ffc4 	bl	80071f4 <global_stdio_init.part.0>
 800726c:	e7f2      	b.n	8007254 <__sinit+0xc>
 800726e:	bf00      	nop
 8007270:	080071b5 	.word	0x080071b5
 8007274:	20000414 	.word	0x20000414

08007278 <_fwalk_sglue>:
 8007278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800727c:	4607      	mov	r7, r0
 800727e:	4688      	mov	r8, r1
 8007280:	4614      	mov	r4, r2
 8007282:	2600      	movs	r6, #0
 8007284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007288:	f1b9 0901 	subs.w	r9, r9, #1
 800728c:	d505      	bpl.n	800729a <_fwalk_sglue+0x22>
 800728e:	6824      	ldr	r4, [r4, #0]
 8007290:	2c00      	cmp	r4, #0
 8007292:	d1f7      	bne.n	8007284 <_fwalk_sglue+0xc>
 8007294:	4630      	mov	r0, r6
 8007296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d907      	bls.n	80072b0 <_fwalk_sglue+0x38>
 80072a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072a4:	3301      	adds	r3, #1
 80072a6:	d003      	beq.n	80072b0 <_fwalk_sglue+0x38>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4638      	mov	r0, r7
 80072ac:	47c0      	blx	r8
 80072ae:	4306      	orrs	r6, r0
 80072b0:	3568      	adds	r5, #104	@ 0x68
 80072b2:	e7e9      	b.n	8007288 <_fwalk_sglue+0x10>

080072b4 <iprintf>:
 80072b4:	b40f      	push	{r0, r1, r2, r3}
 80072b6:	b507      	push	{r0, r1, r2, lr}
 80072b8:	4906      	ldr	r1, [pc, #24]	@ (80072d4 <iprintf+0x20>)
 80072ba:	ab04      	add	r3, sp, #16
 80072bc:	6808      	ldr	r0, [r1, #0]
 80072be:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c2:	6881      	ldr	r1, [r0, #8]
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	f001 fc1d 	bl	8008b04 <_vfiprintf_r>
 80072ca:	b003      	add	sp, #12
 80072cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr
 80072d4:	2000002c 	.word	0x2000002c

080072d8 <_puts_r>:
 80072d8:	6a03      	ldr	r3, [r0, #32]
 80072da:	b570      	push	{r4, r5, r6, lr}
 80072dc:	6884      	ldr	r4, [r0, #8]
 80072de:	4605      	mov	r5, r0
 80072e0:	460e      	mov	r6, r1
 80072e2:	b90b      	cbnz	r3, 80072e8 <_puts_r+0x10>
 80072e4:	f7ff ffb0 	bl	8007248 <__sinit>
 80072e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	d405      	bmi.n	80072fa <_puts_r+0x22>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	0598      	lsls	r0, r3, #22
 80072f2:	d402      	bmi.n	80072fa <_puts_r+0x22>
 80072f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072f6:	f000 f9b2 	bl	800765e <__retarget_lock_acquire_recursive>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	0719      	lsls	r1, r3, #28
 80072fe:	d502      	bpl.n	8007306 <_puts_r+0x2e>
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d135      	bne.n	8007372 <_puts_r+0x9a>
 8007306:	4621      	mov	r1, r4
 8007308:	4628      	mov	r0, r5
 800730a:	f000 f8c5 	bl	8007498 <__swsetup_r>
 800730e:	b380      	cbz	r0, 8007372 <_puts_r+0x9a>
 8007310:	f04f 35ff 	mov.w	r5, #4294967295
 8007314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007316:	07da      	lsls	r2, r3, #31
 8007318:	d405      	bmi.n	8007326 <_puts_r+0x4e>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	059b      	lsls	r3, r3, #22
 800731e:	d402      	bmi.n	8007326 <_puts_r+0x4e>
 8007320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007322:	f000 f99d 	bl	8007660 <__retarget_lock_release_recursive>
 8007326:	4628      	mov	r0, r5
 8007328:	bd70      	pop	{r4, r5, r6, pc}
 800732a:	2b00      	cmp	r3, #0
 800732c:	da04      	bge.n	8007338 <_puts_r+0x60>
 800732e:	69a2      	ldr	r2, [r4, #24]
 8007330:	429a      	cmp	r2, r3
 8007332:	dc17      	bgt.n	8007364 <_puts_r+0x8c>
 8007334:	290a      	cmp	r1, #10
 8007336:	d015      	beq.n	8007364 <_puts_r+0x8c>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	7019      	strb	r1, [r3, #0]
 8007340:	68a3      	ldr	r3, [r4, #8]
 8007342:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007346:	3b01      	subs	r3, #1
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	2900      	cmp	r1, #0
 800734c:	d1ed      	bne.n	800732a <_puts_r+0x52>
 800734e:	2b00      	cmp	r3, #0
 8007350:	da11      	bge.n	8007376 <_puts_r+0x9e>
 8007352:	4622      	mov	r2, r4
 8007354:	210a      	movs	r1, #10
 8007356:	4628      	mov	r0, r5
 8007358:	f000 f85f 	bl	800741a <__swbuf_r>
 800735c:	3001      	adds	r0, #1
 800735e:	d0d7      	beq.n	8007310 <_puts_r+0x38>
 8007360:	250a      	movs	r5, #10
 8007362:	e7d7      	b.n	8007314 <_puts_r+0x3c>
 8007364:	4622      	mov	r2, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f857 	bl	800741a <__swbuf_r>
 800736c:	3001      	adds	r0, #1
 800736e:	d1e7      	bne.n	8007340 <_puts_r+0x68>
 8007370:	e7ce      	b.n	8007310 <_puts_r+0x38>
 8007372:	3e01      	subs	r6, #1
 8007374:	e7e4      	b.n	8007340 <_puts_r+0x68>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	6022      	str	r2, [r4, #0]
 800737c:	220a      	movs	r2, #10
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e7ee      	b.n	8007360 <_puts_r+0x88>
	...

08007384 <puts>:
 8007384:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <puts+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f7ff bfa5 	b.w	80072d8 <_puts_r>
 800738e:	bf00      	nop
 8007390:	2000002c 	.word	0x2000002c

08007394 <__sread>:
 8007394:	b510      	push	{r4, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739c:	f000 f900 	bl	80075a0 <_read_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	bfab      	itete	ge
 80073a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073a6:	89a3      	ldrhlt	r3, [r4, #12]
 80073a8:	181b      	addge	r3, r3, r0
 80073aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073ae:	bfac      	ite	ge
 80073b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073b2:	81a3      	strhlt	r3, [r4, #12]
 80073b4:	bd10      	pop	{r4, pc}

080073b6 <__swrite>:
 80073b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ba:	461f      	mov	r7, r3
 80073bc:	898b      	ldrh	r3, [r1, #12]
 80073be:	05db      	lsls	r3, r3, #23
 80073c0:	4605      	mov	r5, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	4616      	mov	r6, r2
 80073c6:	d505      	bpl.n	80073d4 <__swrite+0x1e>
 80073c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073cc:	2302      	movs	r3, #2
 80073ce:	2200      	movs	r2, #0
 80073d0:	f000 f8d4 	bl	800757c <_lseek_r>
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073de:	81a3      	strh	r3, [r4, #12]
 80073e0:	4632      	mov	r2, r6
 80073e2:	463b      	mov	r3, r7
 80073e4:	4628      	mov	r0, r5
 80073e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ea:	f000 b8fb 	b.w	80075e4 <_write_r>

080073ee <__sseek>:
 80073ee:	b510      	push	{r4, lr}
 80073f0:	460c      	mov	r4, r1
 80073f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f6:	f000 f8c1 	bl	800757c <_lseek_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	bf15      	itete	ne
 8007400:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800740a:	81a3      	strheq	r3, [r4, #12]
 800740c:	bf18      	it	ne
 800740e:	81a3      	strhne	r3, [r4, #12]
 8007410:	bd10      	pop	{r4, pc}

08007412 <__sclose>:
 8007412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007416:	f000 b8a1 	b.w	800755c <_close_r>

0800741a <__swbuf_r>:
 800741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741c:	460e      	mov	r6, r1
 800741e:	4614      	mov	r4, r2
 8007420:	4605      	mov	r5, r0
 8007422:	b118      	cbz	r0, 800742c <__swbuf_r+0x12>
 8007424:	6a03      	ldr	r3, [r0, #32]
 8007426:	b90b      	cbnz	r3, 800742c <__swbuf_r+0x12>
 8007428:	f7ff ff0e 	bl	8007248 <__sinit>
 800742c:	69a3      	ldr	r3, [r4, #24]
 800742e:	60a3      	str	r3, [r4, #8]
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	071a      	lsls	r2, r3, #28
 8007434:	d501      	bpl.n	800743a <__swbuf_r+0x20>
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	b943      	cbnz	r3, 800744c <__swbuf_r+0x32>
 800743a:	4621      	mov	r1, r4
 800743c:	4628      	mov	r0, r5
 800743e:	f000 f82b 	bl	8007498 <__swsetup_r>
 8007442:	b118      	cbz	r0, 800744c <__swbuf_r+0x32>
 8007444:	f04f 37ff 	mov.w	r7, #4294967295
 8007448:	4638      	mov	r0, r7
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	6922      	ldr	r2, [r4, #16]
 8007450:	1a98      	subs	r0, r3, r2
 8007452:	6963      	ldr	r3, [r4, #20]
 8007454:	b2f6      	uxtb	r6, r6
 8007456:	4283      	cmp	r3, r0
 8007458:	4637      	mov	r7, r6
 800745a:	dc05      	bgt.n	8007468 <__swbuf_r+0x4e>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f001 fcec 	bl	8008e3c <_fflush_r>
 8007464:	2800      	cmp	r0, #0
 8007466:	d1ed      	bne.n	8007444 <__swbuf_r+0x2a>
 8007468:	68a3      	ldr	r3, [r4, #8]
 800746a:	3b01      	subs	r3, #1
 800746c:	60a3      	str	r3, [r4, #8]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	6022      	str	r2, [r4, #0]
 8007474:	701e      	strb	r6, [r3, #0]
 8007476:	6962      	ldr	r2, [r4, #20]
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	429a      	cmp	r2, r3
 800747c:	d004      	beq.n	8007488 <__swbuf_r+0x6e>
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	07db      	lsls	r3, r3, #31
 8007482:	d5e1      	bpl.n	8007448 <__swbuf_r+0x2e>
 8007484:	2e0a      	cmp	r6, #10
 8007486:	d1df      	bne.n	8007448 <__swbuf_r+0x2e>
 8007488:	4621      	mov	r1, r4
 800748a:	4628      	mov	r0, r5
 800748c:	f001 fcd6 	bl	8008e3c <_fflush_r>
 8007490:	2800      	cmp	r0, #0
 8007492:	d0d9      	beq.n	8007448 <__swbuf_r+0x2e>
 8007494:	e7d6      	b.n	8007444 <__swbuf_r+0x2a>
	...

08007498 <__swsetup_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4b29      	ldr	r3, [pc, #164]	@ (8007540 <__swsetup_r+0xa8>)
 800749c:	4605      	mov	r5, r0
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	460c      	mov	r4, r1
 80074a2:	b118      	cbz	r0, 80074ac <__swsetup_r+0x14>
 80074a4:	6a03      	ldr	r3, [r0, #32]
 80074a6:	b90b      	cbnz	r3, 80074ac <__swsetup_r+0x14>
 80074a8:	f7ff fece 	bl	8007248 <__sinit>
 80074ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b0:	0719      	lsls	r1, r3, #28
 80074b2:	d422      	bmi.n	80074fa <__swsetup_r+0x62>
 80074b4:	06da      	lsls	r2, r3, #27
 80074b6:	d407      	bmi.n	80074c8 <__swsetup_r+0x30>
 80074b8:	2209      	movs	r2, #9
 80074ba:	602a      	str	r2, [r5, #0]
 80074bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	e033      	b.n	8007530 <__swsetup_r+0x98>
 80074c8:	0758      	lsls	r0, r3, #29
 80074ca:	d512      	bpl.n	80074f2 <__swsetup_r+0x5a>
 80074cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ce:	b141      	cbz	r1, 80074e2 <__swsetup_r+0x4a>
 80074d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074d4:	4299      	cmp	r1, r3
 80074d6:	d002      	beq.n	80074de <__swsetup_r+0x46>
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 ff1d 	bl	8008318 <_free_r>
 80074de:	2300      	movs	r3, #0
 80074e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	2300      	movs	r3, #0
 80074ec:	6063      	str	r3, [r4, #4]
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f043 0308 	orr.w	r3, r3, #8
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	6923      	ldr	r3, [r4, #16]
 80074fc:	b94b      	cbnz	r3, 8007512 <__swsetup_r+0x7a>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007508:	d003      	beq.n	8007512 <__swsetup_r+0x7a>
 800750a:	4621      	mov	r1, r4
 800750c:	4628      	mov	r0, r5
 800750e:	f001 fce3 	bl	8008ed8 <__smakebuf_r>
 8007512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007516:	f013 0201 	ands.w	r2, r3, #1
 800751a:	d00a      	beq.n	8007532 <__swsetup_r+0x9a>
 800751c:	2200      	movs	r2, #0
 800751e:	60a2      	str	r2, [r4, #8]
 8007520:	6962      	ldr	r2, [r4, #20]
 8007522:	4252      	negs	r2, r2
 8007524:	61a2      	str	r2, [r4, #24]
 8007526:	6922      	ldr	r2, [r4, #16]
 8007528:	b942      	cbnz	r2, 800753c <__swsetup_r+0xa4>
 800752a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800752e:	d1c5      	bne.n	80074bc <__swsetup_r+0x24>
 8007530:	bd38      	pop	{r3, r4, r5, pc}
 8007532:	0799      	lsls	r1, r3, #30
 8007534:	bf58      	it	pl
 8007536:	6962      	ldrpl	r2, [r4, #20]
 8007538:	60a2      	str	r2, [r4, #8]
 800753a:	e7f4      	b.n	8007526 <__swsetup_r+0x8e>
 800753c:	2000      	movs	r0, #0
 800753e:	e7f7      	b.n	8007530 <__swsetup_r+0x98>
 8007540:	2000002c 	.word	0x2000002c

08007544 <memset>:
 8007544:	4402      	add	r2, r0
 8007546:	4603      	mov	r3, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <memset+0xa>
 800754c:	4770      	bx	lr
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <memset+0x4>

08007554 <_localeconv_r>:
 8007554:	4800      	ldr	r0, [pc, #0]	@ (8007558 <_localeconv_r+0x4>)
 8007556:	4770      	bx	lr
 8007558:	2000016c 	.word	0x2000016c

0800755c <_close_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d06      	ldr	r5, [pc, #24]	@ (8007578 <_close_r+0x1c>)
 8007560:	2300      	movs	r3, #0
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7fa f8ac 	bl	80016c4 <_close>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_close_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_close_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000418 	.word	0x20000418

0800757c <_lseek_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	@ (800759c <_lseek_r+0x20>)
 8007580:	4604      	mov	r4, r0
 8007582:	4608      	mov	r0, r1
 8007584:	4611      	mov	r1, r2
 8007586:	2200      	movs	r2, #0
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7fa f8c1 	bl	8001712 <_lseek>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_lseek_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_lseek_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20000418 	.word	0x20000418

080075a0 <_read_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	@ (80075c0 <_read_r+0x20>)
 80075a4:	4604      	mov	r4, r0
 80075a6:	4608      	mov	r0, r1
 80075a8:	4611      	mov	r1, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7fa f84f 	bl	8001652 <_read>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_read_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_read_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000418 	.word	0x20000418

080075c4 <_sbrk_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d06      	ldr	r5, [pc, #24]	@ (80075e0 <_sbrk_r+0x1c>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	f7fa f8ac 	bl	800172c <_sbrk>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_sbrk_r+0x1a>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_sbrk_r+0x1a>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000418 	.word	0x20000418

080075e4 <_write_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	@ (8007604 <_write_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7fa f84a 	bl	800168c <_write>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_write_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_write_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000418 	.word	0x20000418

08007608 <__errno>:
 8007608:	4b01      	ldr	r3, [pc, #4]	@ (8007610 <__errno+0x8>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	2000002c 	.word	0x2000002c

08007614 <__libc_init_array>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4d0d      	ldr	r5, [pc, #52]	@ (800764c <__libc_init_array+0x38>)
 8007618:	4c0d      	ldr	r4, [pc, #52]	@ (8007650 <__libc_init_array+0x3c>)
 800761a:	1b64      	subs	r4, r4, r5
 800761c:	10a4      	asrs	r4, r4, #2
 800761e:	2600      	movs	r6, #0
 8007620:	42a6      	cmp	r6, r4
 8007622:	d109      	bne.n	8007638 <__libc_init_array+0x24>
 8007624:	4d0b      	ldr	r5, [pc, #44]	@ (8007654 <__libc_init_array+0x40>)
 8007626:	4c0c      	ldr	r4, [pc, #48]	@ (8007658 <__libc_init_array+0x44>)
 8007628:	f001 fd64 	bl	80090f4 <_init>
 800762c:	1b64      	subs	r4, r4, r5
 800762e:	10a4      	asrs	r4, r4, #2
 8007630:	2600      	movs	r6, #0
 8007632:	42a6      	cmp	r6, r4
 8007634:	d105      	bne.n	8007642 <__libc_init_array+0x2e>
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	f855 3b04 	ldr.w	r3, [r5], #4
 800763c:	4798      	blx	r3
 800763e:	3601      	adds	r6, #1
 8007640:	e7ee      	b.n	8007620 <__libc_init_array+0xc>
 8007642:	f855 3b04 	ldr.w	r3, [r5], #4
 8007646:	4798      	blx	r3
 8007648:	3601      	adds	r6, #1
 800764a:	e7f2      	b.n	8007632 <__libc_init_array+0x1e>
 800764c:	08009b68 	.word	0x08009b68
 8007650:	08009b68 	.word	0x08009b68
 8007654:	08009b68 	.word	0x08009b68
 8007658:	08009b6c 	.word	0x08009b6c

0800765c <__retarget_lock_init_recursive>:
 800765c:	4770      	bx	lr

0800765e <__retarget_lock_acquire_recursive>:
 800765e:	4770      	bx	lr

08007660 <__retarget_lock_release_recursive>:
 8007660:	4770      	bx	lr

08007662 <memcpy>:
 8007662:	440a      	add	r2, r1
 8007664:	4291      	cmp	r1, r2
 8007666:	f100 33ff 	add.w	r3, r0, #4294967295
 800766a:	d100      	bne.n	800766e <memcpy+0xc>
 800766c:	4770      	bx	lr
 800766e:	b510      	push	{r4, lr}
 8007670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007678:	4291      	cmp	r1, r2
 800767a:	d1f9      	bne.n	8007670 <memcpy+0xe>
 800767c:	bd10      	pop	{r4, pc}

0800767e <quorem>:
 800767e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007682:	6903      	ldr	r3, [r0, #16]
 8007684:	690c      	ldr	r4, [r1, #16]
 8007686:	42a3      	cmp	r3, r4
 8007688:	4607      	mov	r7, r0
 800768a:	db7e      	blt.n	800778a <quorem+0x10c>
 800768c:	3c01      	subs	r4, #1
 800768e:	f101 0814 	add.w	r8, r1, #20
 8007692:	00a3      	lsls	r3, r4, #2
 8007694:	f100 0514 	add.w	r5, r0, #20
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076a8:	3301      	adds	r3, #1
 80076aa:	429a      	cmp	r2, r3
 80076ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80076b4:	d32e      	bcc.n	8007714 <quorem+0x96>
 80076b6:	f04f 0a00 	mov.w	sl, #0
 80076ba:	46c4      	mov	ip, r8
 80076bc:	46ae      	mov	lr, r5
 80076be:	46d3      	mov	fp, sl
 80076c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076c4:	b298      	uxth	r0, r3
 80076c6:	fb06 a000 	mla	r0, r6, r0, sl
 80076ca:	0c02      	lsrs	r2, r0, #16
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	fb06 2303 	mla	r3, r6, r3, r2
 80076d2:	f8de 2000 	ldr.w	r2, [lr]
 80076d6:	b280      	uxth	r0, r0
 80076d8:	b292      	uxth	r2, r2
 80076da:	1a12      	subs	r2, r2, r0
 80076dc:	445a      	add	r2, fp
 80076de:	f8de 0000 	ldr.w	r0, [lr]
 80076e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076f0:	b292      	uxth	r2, r2
 80076f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076f6:	45e1      	cmp	r9, ip
 80076f8:	f84e 2b04 	str.w	r2, [lr], #4
 80076fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007700:	d2de      	bcs.n	80076c0 <quorem+0x42>
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	58eb      	ldr	r3, [r5, r3]
 8007706:	b92b      	cbnz	r3, 8007714 <quorem+0x96>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	3b04      	subs	r3, #4
 800770c:	429d      	cmp	r5, r3
 800770e:	461a      	mov	r2, r3
 8007710:	d32f      	bcc.n	8007772 <quorem+0xf4>
 8007712:	613c      	str	r4, [r7, #16]
 8007714:	4638      	mov	r0, r7
 8007716:	f001 f8c3 	bl	80088a0 <__mcmp>
 800771a:	2800      	cmp	r0, #0
 800771c:	db25      	blt.n	800776a <quorem+0xec>
 800771e:	4629      	mov	r1, r5
 8007720:	2000      	movs	r0, #0
 8007722:	f858 2b04 	ldr.w	r2, [r8], #4
 8007726:	f8d1 c000 	ldr.w	ip, [r1]
 800772a:	fa1f fe82 	uxth.w	lr, r2
 800772e:	fa1f f38c 	uxth.w	r3, ip
 8007732:	eba3 030e 	sub.w	r3, r3, lr
 8007736:	4403      	add	r3, r0
 8007738:	0c12      	lsrs	r2, r2, #16
 800773a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800773e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007742:	b29b      	uxth	r3, r3
 8007744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007748:	45c1      	cmp	r9, r8
 800774a:	f841 3b04 	str.w	r3, [r1], #4
 800774e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007752:	d2e6      	bcs.n	8007722 <quorem+0xa4>
 8007754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800775c:	b922      	cbnz	r2, 8007768 <quorem+0xea>
 800775e:	3b04      	subs	r3, #4
 8007760:	429d      	cmp	r5, r3
 8007762:	461a      	mov	r2, r3
 8007764:	d30b      	bcc.n	800777e <quorem+0x100>
 8007766:	613c      	str	r4, [r7, #16]
 8007768:	3601      	adds	r6, #1
 800776a:	4630      	mov	r0, r6
 800776c:	b003      	add	sp, #12
 800776e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	3b04      	subs	r3, #4
 8007776:	2a00      	cmp	r2, #0
 8007778:	d1cb      	bne.n	8007712 <quorem+0x94>
 800777a:	3c01      	subs	r4, #1
 800777c:	e7c6      	b.n	800770c <quorem+0x8e>
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	3b04      	subs	r3, #4
 8007782:	2a00      	cmp	r2, #0
 8007784:	d1ef      	bne.n	8007766 <quorem+0xe8>
 8007786:	3c01      	subs	r4, #1
 8007788:	e7ea      	b.n	8007760 <quorem+0xe2>
 800778a:	2000      	movs	r0, #0
 800778c:	e7ee      	b.n	800776c <quorem+0xee>
	...

08007790 <_dtoa_r>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	69c7      	ldr	r7, [r0, #28]
 8007796:	b099      	sub	sp, #100	@ 0x64
 8007798:	ed8d 0b02 	vstr	d0, [sp, #8]
 800779c:	ec55 4b10 	vmov	r4, r5, d0
 80077a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80077a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80077a4:	4683      	mov	fp, r0
 80077a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80077a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077aa:	b97f      	cbnz	r7, 80077cc <_dtoa_r+0x3c>
 80077ac:	2010      	movs	r0, #16
 80077ae:	f7fe ffa9 	bl	8006704 <malloc>
 80077b2:	4602      	mov	r2, r0
 80077b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80077b8:	b920      	cbnz	r0, 80077c4 <_dtoa_r+0x34>
 80077ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007a58 <_dtoa_r+0x2c8>)
 80077bc:	21ef      	movs	r1, #239	@ 0xef
 80077be:	48a7      	ldr	r0, [pc, #668]	@ (8007a5c <_dtoa_r+0x2cc>)
 80077c0:	f001 fbe8 	bl	8008f94 <__assert_func>
 80077c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077c8:	6007      	str	r7, [r0, #0]
 80077ca:	60c7      	str	r7, [r0, #12]
 80077cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077d0:	6819      	ldr	r1, [r3, #0]
 80077d2:	b159      	cbz	r1, 80077ec <_dtoa_r+0x5c>
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	604a      	str	r2, [r1, #4]
 80077d8:	2301      	movs	r3, #1
 80077da:	4093      	lsls	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
 80077de:	4658      	mov	r0, fp
 80077e0:	f000 fe24 	bl	800842c <_Bfree>
 80077e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	1e2b      	subs	r3, r5, #0
 80077ee:	bfb9      	ittee	lt
 80077f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077f4:	9303      	strlt	r3, [sp, #12]
 80077f6:	2300      	movge	r3, #0
 80077f8:	6033      	strge	r3, [r6, #0]
 80077fa:	9f03      	ldr	r7, [sp, #12]
 80077fc:	4b98      	ldr	r3, [pc, #608]	@ (8007a60 <_dtoa_r+0x2d0>)
 80077fe:	bfbc      	itt	lt
 8007800:	2201      	movlt	r2, #1
 8007802:	6032      	strlt	r2, [r6, #0]
 8007804:	43bb      	bics	r3, r7
 8007806:	d112      	bne.n	800782e <_dtoa_r+0x9e>
 8007808:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800780a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007814:	4323      	orrs	r3, r4
 8007816:	f000 854d 	beq.w	80082b4 <_dtoa_r+0xb24>
 800781a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800781c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a74 <_dtoa_r+0x2e4>
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 854f 	beq.w	80082c4 <_dtoa_r+0xb34>
 8007826:	f10a 0303 	add.w	r3, sl, #3
 800782a:	f000 bd49 	b.w	80082c0 <_dtoa_r+0xb30>
 800782e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007832:	2200      	movs	r2, #0
 8007834:	ec51 0b17 	vmov	r0, r1, d7
 8007838:	2300      	movs	r3, #0
 800783a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800783e:	f7f9 f97b 	bl	8000b38 <__aeabi_dcmpeq>
 8007842:	4680      	mov	r8, r0
 8007844:	b158      	cbz	r0, 800785e <_dtoa_r+0xce>
 8007846:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007848:	2301      	movs	r3, #1
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800784e:	b113      	cbz	r3, 8007856 <_dtoa_r+0xc6>
 8007850:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007852:	4b84      	ldr	r3, [pc, #528]	@ (8007a64 <_dtoa_r+0x2d4>)
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a78 <_dtoa_r+0x2e8>
 800785a:	f000 bd33 	b.w	80082c4 <_dtoa_r+0xb34>
 800785e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007862:	aa16      	add	r2, sp, #88	@ 0x58
 8007864:	a917      	add	r1, sp, #92	@ 0x5c
 8007866:	4658      	mov	r0, fp
 8007868:	f001 f8ca 	bl	8008a00 <__d2b>
 800786c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007870:	4681      	mov	r9, r0
 8007872:	2e00      	cmp	r6, #0
 8007874:	d077      	beq.n	8007966 <_dtoa_r+0x1d6>
 8007876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007878:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800787c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007884:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007888:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800788c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007890:	4619      	mov	r1, r3
 8007892:	2200      	movs	r2, #0
 8007894:	4b74      	ldr	r3, [pc, #464]	@ (8007a68 <_dtoa_r+0x2d8>)
 8007896:	f7f8 fd2f 	bl	80002f8 <__aeabi_dsub>
 800789a:	a369      	add	r3, pc, #420	@ (adr r3, 8007a40 <_dtoa_r+0x2b0>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fee2 	bl	8000668 <__aeabi_dmul>
 80078a4:	a368      	add	r3, pc, #416	@ (adr r3, 8007a48 <_dtoa_r+0x2b8>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fd27 	bl	80002fc <__adddf3>
 80078ae:	4604      	mov	r4, r0
 80078b0:	4630      	mov	r0, r6
 80078b2:	460d      	mov	r5, r1
 80078b4:	f7f8 fe6e 	bl	8000594 <__aeabi_i2d>
 80078b8:	a365      	add	r3, pc, #404	@ (adr r3, 8007a50 <_dtoa_r+0x2c0>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fed3 	bl	8000668 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fd17 	bl	80002fc <__adddf3>
 80078ce:	4604      	mov	r4, r0
 80078d0:	460d      	mov	r5, r1
 80078d2:	f7f9 f979 	bl	8000bc8 <__aeabi_d2iz>
 80078d6:	2200      	movs	r2, #0
 80078d8:	4607      	mov	r7, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	4620      	mov	r0, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	f7f9 f934 	bl	8000b4c <__aeabi_dcmplt>
 80078e4:	b140      	cbz	r0, 80078f8 <_dtoa_r+0x168>
 80078e6:	4638      	mov	r0, r7
 80078e8:	f7f8 fe54 	bl	8000594 <__aeabi_i2d>
 80078ec:	4622      	mov	r2, r4
 80078ee:	462b      	mov	r3, r5
 80078f0:	f7f9 f922 	bl	8000b38 <__aeabi_dcmpeq>
 80078f4:	b900      	cbnz	r0, 80078f8 <_dtoa_r+0x168>
 80078f6:	3f01      	subs	r7, #1
 80078f8:	2f16      	cmp	r7, #22
 80078fa:	d851      	bhi.n	80079a0 <_dtoa_r+0x210>
 80078fc:	4b5b      	ldr	r3, [pc, #364]	@ (8007a6c <_dtoa_r+0x2dc>)
 80078fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800790a:	f7f9 f91f 	bl	8000b4c <__aeabi_dcmplt>
 800790e:	2800      	cmp	r0, #0
 8007910:	d048      	beq.n	80079a4 <_dtoa_r+0x214>
 8007912:	3f01      	subs	r7, #1
 8007914:	2300      	movs	r3, #0
 8007916:	9312      	str	r3, [sp, #72]	@ 0x48
 8007918:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800791a:	1b9b      	subs	r3, r3, r6
 800791c:	1e5a      	subs	r2, r3, #1
 800791e:	bf44      	itt	mi
 8007920:	f1c3 0801 	rsbmi	r8, r3, #1
 8007924:	2300      	movmi	r3, #0
 8007926:	9208      	str	r2, [sp, #32]
 8007928:	bf54      	ite	pl
 800792a:	f04f 0800 	movpl.w	r8, #0
 800792e:	9308      	strmi	r3, [sp, #32]
 8007930:	2f00      	cmp	r7, #0
 8007932:	db39      	blt.n	80079a8 <_dtoa_r+0x218>
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007938:	443b      	add	r3, r7
 800793a:	9308      	str	r3, [sp, #32]
 800793c:	2300      	movs	r3, #0
 800793e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007942:	2b09      	cmp	r3, #9
 8007944:	d864      	bhi.n	8007a10 <_dtoa_r+0x280>
 8007946:	2b05      	cmp	r3, #5
 8007948:	bfc4      	itt	gt
 800794a:	3b04      	subgt	r3, #4
 800794c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800794e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007950:	f1a3 0302 	sub.w	r3, r3, #2
 8007954:	bfcc      	ite	gt
 8007956:	2400      	movgt	r4, #0
 8007958:	2401      	movle	r4, #1
 800795a:	2b03      	cmp	r3, #3
 800795c:	d863      	bhi.n	8007a26 <_dtoa_r+0x296>
 800795e:	e8df f003 	tbb	[pc, r3]
 8007962:	372a      	.short	0x372a
 8007964:	5535      	.short	0x5535
 8007966:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800796a:	441e      	add	r6, r3
 800796c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007970:	2b20      	cmp	r3, #32
 8007972:	bfc1      	itttt	gt
 8007974:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007978:	409f      	lslgt	r7, r3
 800797a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800797e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007982:	bfd6      	itet	le
 8007984:	f1c3 0320 	rsble	r3, r3, #32
 8007988:	ea47 0003 	orrgt.w	r0, r7, r3
 800798c:	fa04 f003 	lslle.w	r0, r4, r3
 8007990:	f7f8 fdf0 	bl	8000574 <__aeabi_ui2d>
 8007994:	2201      	movs	r2, #1
 8007996:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800799a:	3e01      	subs	r6, #1
 800799c:	9214      	str	r2, [sp, #80]	@ 0x50
 800799e:	e777      	b.n	8007890 <_dtoa_r+0x100>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e7b8      	b.n	8007916 <_dtoa_r+0x186>
 80079a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80079a6:	e7b7      	b.n	8007918 <_dtoa_r+0x188>
 80079a8:	427b      	negs	r3, r7
 80079aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ac:	2300      	movs	r3, #0
 80079ae:	eba8 0807 	sub.w	r8, r8, r7
 80079b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079b4:	e7c4      	b.n	8007940 <_dtoa_r+0x1b0>
 80079b6:	2300      	movs	r3, #0
 80079b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dc35      	bgt.n	8007a2c <_dtoa_r+0x29c>
 80079c0:	2301      	movs	r3, #1
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	9307      	str	r3, [sp, #28]
 80079c6:	461a      	mov	r2, r3
 80079c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80079ca:	e00b      	b.n	80079e4 <_dtoa_r+0x254>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e7f3      	b.n	80079b8 <_dtoa_r+0x228>
 80079d0:	2300      	movs	r3, #0
 80079d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079d6:	18fb      	adds	r3, r7, r3
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	2b01      	cmp	r3, #1
 80079de:	9307      	str	r3, [sp, #28]
 80079e0:	bfb8      	it	lt
 80079e2:	2301      	movlt	r3, #1
 80079e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079e8:	2100      	movs	r1, #0
 80079ea:	2204      	movs	r2, #4
 80079ec:	f102 0514 	add.w	r5, r2, #20
 80079f0:	429d      	cmp	r5, r3
 80079f2:	d91f      	bls.n	8007a34 <_dtoa_r+0x2a4>
 80079f4:	6041      	str	r1, [r0, #4]
 80079f6:	4658      	mov	r0, fp
 80079f8:	f000 fcd8 	bl	80083ac <_Balloc>
 80079fc:	4682      	mov	sl, r0
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d13c      	bne.n	8007a7c <_dtoa_r+0x2ec>
 8007a02:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <_dtoa_r+0x2e0>)
 8007a04:	4602      	mov	r2, r0
 8007a06:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a0a:	e6d8      	b.n	80077be <_dtoa_r+0x2e>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e7e0      	b.n	80079d2 <_dtoa_r+0x242>
 8007a10:	2401      	movs	r4, #1
 8007a12:	2300      	movs	r3, #0
 8007a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a18:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2312      	movs	r3, #18
 8007a24:	e7d0      	b.n	80079c8 <_dtoa_r+0x238>
 8007a26:	2301      	movs	r3, #1
 8007a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a2a:	e7f5      	b.n	8007a18 <_dtoa_r+0x288>
 8007a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	9307      	str	r3, [sp, #28]
 8007a32:	e7d7      	b.n	80079e4 <_dtoa_r+0x254>
 8007a34:	3101      	adds	r1, #1
 8007a36:	0052      	lsls	r2, r2, #1
 8007a38:	e7d8      	b.n	80079ec <_dtoa_r+0x25c>
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w
 8007a40:	636f4361 	.word	0x636f4361
 8007a44:	3fd287a7 	.word	0x3fd287a7
 8007a48:	8b60c8b3 	.word	0x8b60c8b3
 8007a4c:	3fc68a28 	.word	0x3fc68a28
 8007a50:	509f79fb 	.word	0x509f79fb
 8007a54:	3fd34413 	.word	0x3fd34413
 8007a58:	08009831 	.word	0x08009831
 8007a5c:	08009848 	.word	0x08009848
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	08009801 	.word	0x08009801
 8007a68:	3ff80000 	.word	0x3ff80000
 8007a6c:	08009940 	.word	0x08009940
 8007a70:	080098a0 	.word	0x080098a0
 8007a74:	0800982d 	.word	0x0800982d
 8007a78:	08009800 	.word	0x08009800
 8007a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a80:	6018      	str	r0, [r3, #0]
 8007a82:	9b07      	ldr	r3, [sp, #28]
 8007a84:	2b0e      	cmp	r3, #14
 8007a86:	f200 80a4 	bhi.w	8007bd2 <_dtoa_r+0x442>
 8007a8a:	2c00      	cmp	r4, #0
 8007a8c:	f000 80a1 	beq.w	8007bd2 <_dtoa_r+0x442>
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	dd33      	ble.n	8007afc <_dtoa_r+0x36c>
 8007a94:	4bad      	ldr	r3, [pc, #692]	@ (8007d4c <_dtoa_r+0x5bc>)
 8007a96:	f007 020f 	and.w	r2, r7, #15
 8007a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a9e:	ed93 7b00 	vldr	d7, [r3]
 8007aa2:	05f8      	lsls	r0, r7, #23
 8007aa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007aa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007aac:	d516      	bpl.n	8007adc <_dtoa_r+0x34c>
 8007aae:	4ba8      	ldr	r3, [pc, #672]	@ (8007d50 <_dtoa_r+0x5c0>)
 8007ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab8:	f7f8 ff00 	bl	80008bc <__aeabi_ddiv>
 8007abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac0:	f004 040f 	and.w	r4, r4, #15
 8007ac4:	2603      	movs	r6, #3
 8007ac6:	4da2      	ldr	r5, [pc, #648]	@ (8007d50 <_dtoa_r+0x5c0>)
 8007ac8:	b954      	cbnz	r4, 8007ae0 <_dtoa_r+0x350>
 8007aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad2:	f7f8 fef3 	bl	80008bc <__aeabi_ddiv>
 8007ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ada:	e028      	b.n	8007b2e <_dtoa_r+0x39e>
 8007adc:	2602      	movs	r6, #2
 8007ade:	e7f2      	b.n	8007ac6 <_dtoa_r+0x336>
 8007ae0:	07e1      	lsls	r1, r4, #31
 8007ae2:	d508      	bpl.n	8007af6 <_dtoa_r+0x366>
 8007ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aec:	f7f8 fdbc 	bl	8000668 <__aeabi_dmul>
 8007af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007af4:	3601      	adds	r6, #1
 8007af6:	1064      	asrs	r4, r4, #1
 8007af8:	3508      	adds	r5, #8
 8007afa:	e7e5      	b.n	8007ac8 <_dtoa_r+0x338>
 8007afc:	f000 80d2 	beq.w	8007ca4 <_dtoa_r+0x514>
 8007b00:	427c      	negs	r4, r7
 8007b02:	4b92      	ldr	r3, [pc, #584]	@ (8007d4c <_dtoa_r+0x5bc>)
 8007b04:	4d92      	ldr	r5, [pc, #584]	@ (8007d50 <_dtoa_r+0x5c0>)
 8007b06:	f004 020f 	and.w	r2, r4, #15
 8007b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b16:	f7f8 fda7 	bl	8000668 <__aeabi_dmul>
 8007b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b1e:	1124      	asrs	r4, r4, #4
 8007b20:	2300      	movs	r3, #0
 8007b22:	2602      	movs	r6, #2
 8007b24:	2c00      	cmp	r4, #0
 8007b26:	f040 80b2 	bne.w	8007c8e <_dtoa_r+0x4fe>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1d3      	bne.n	8007ad6 <_dtoa_r+0x346>
 8007b2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80b7 	beq.w	8007ca8 <_dtoa_r+0x518>
 8007b3a:	4b86      	ldr	r3, [pc, #536]	@ (8007d54 <_dtoa_r+0x5c4>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f9 f803 	bl	8000b4c <__aeabi_dcmplt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f000 80ae 	beq.w	8007ca8 <_dtoa_r+0x518>
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80aa 	beq.w	8007ca8 <_dtoa_r+0x518>
 8007b54:	9b00      	ldr	r3, [sp, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd37      	ble.n	8007bca <_dtoa_r+0x43a>
 8007b5a:	1e7b      	subs	r3, r7, #1
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4b7d      	ldr	r3, [pc, #500]	@ (8007d58 <_dtoa_r+0x5c8>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7f8 fd7f 	bl	8000668 <__aeabi_dmul>
 8007b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6e:	9c00      	ldr	r4, [sp, #0]
 8007b70:	3601      	adds	r6, #1
 8007b72:	4630      	mov	r0, r6
 8007b74:	f7f8 fd0e 	bl	8000594 <__aeabi_i2d>
 8007b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b7c:	f7f8 fd74 	bl	8000668 <__aeabi_dmul>
 8007b80:	4b76      	ldr	r3, [pc, #472]	@ (8007d5c <_dtoa_r+0x5cc>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fbba 	bl	80002fc <__adddf3>
 8007b88:	4605      	mov	r5, r0
 8007b8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	f040 808d 	bne.w	8007cae <_dtoa_r+0x51e>
 8007b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b98:	4b71      	ldr	r3, [pc, #452]	@ (8007d60 <_dtoa_r+0x5d0>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f7f8 fbac 	bl	80002f8 <__aeabi_dsub>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4633      	mov	r3, r6
 8007bac:	f7f8 ffec 	bl	8000b88 <__aeabi_dcmpgt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f040 828b 	bne.w	80080cc <_dtoa_r+0x93c>
 8007bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bba:	462a      	mov	r2, r5
 8007bbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bc0:	f7f8 ffc4 	bl	8000b4c <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 8128 	bne.w	8007e1a <_dtoa_r+0x68a>
 8007bca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007bd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f2c0 815a 	blt.w	8007e8e <_dtoa_r+0x6fe>
 8007bda:	2f0e      	cmp	r7, #14
 8007bdc:	f300 8157 	bgt.w	8007e8e <_dtoa_r+0x6fe>
 8007be0:	4b5a      	ldr	r3, [pc, #360]	@ (8007d4c <_dtoa_r+0x5bc>)
 8007be2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007be6:	ed93 7b00 	vldr	d7, [r3]
 8007bea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	ed8d 7b00 	vstr	d7, [sp]
 8007bf2:	da03      	bge.n	8007bfc <_dtoa_r+0x46c>
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f340 8101 	ble.w	8007dfe <_dtoa_r+0x66e>
 8007bfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c00:	4656      	mov	r6, sl
 8007c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fe57 	bl	80008bc <__aeabi_ddiv>
 8007c0e:	f7f8 ffdb 	bl	8000bc8 <__aeabi_d2iz>
 8007c12:	4680      	mov	r8, r0
 8007c14:	f7f8 fcbe 	bl	8000594 <__aeabi_i2d>
 8007c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c1c:	f7f8 fd24 	bl	8000668 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c2c:	f7f8 fb64 	bl	80002f8 <__aeabi_dsub>
 8007c30:	f806 4b01 	strb.w	r4, [r6], #1
 8007c34:	9d07      	ldr	r5, [sp, #28]
 8007c36:	eba6 040a 	sub.w	r4, r6, sl
 8007c3a:	42a5      	cmp	r5, r4
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	f040 8117 	bne.w	8007e72 <_dtoa_r+0x6e2>
 8007c44:	f7f8 fb5a 	bl	80002fc <__adddf3>
 8007c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	f7f8 ff9a 	bl	8000b88 <__aeabi_dcmpgt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f040 80f9 	bne.w	8007e4c <_dtoa_r+0x6bc>
 8007c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 ff69 	bl	8000b38 <__aeabi_dcmpeq>
 8007c66:	b118      	cbz	r0, 8007c70 <_dtoa_r+0x4e0>
 8007c68:	f018 0f01 	tst.w	r8, #1
 8007c6c:	f040 80ee 	bne.w	8007e4c <_dtoa_r+0x6bc>
 8007c70:	4649      	mov	r1, r9
 8007c72:	4658      	mov	r0, fp
 8007c74:	f000 fbda 	bl	800842c <_Bfree>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	7033      	strb	r3, [r6, #0]
 8007c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c7e:	3701      	adds	r7, #1
 8007c80:	601f      	str	r7, [r3, #0]
 8007c82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 831d 	beq.w	80082c4 <_dtoa_r+0xb34>
 8007c8a:	601e      	str	r6, [r3, #0]
 8007c8c:	e31a      	b.n	80082c4 <_dtoa_r+0xb34>
 8007c8e:	07e2      	lsls	r2, r4, #31
 8007c90:	d505      	bpl.n	8007c9e <_dtoa_r+0x50e>
 8007c92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c96:	f7f8 fce7 	bl	8000668 <__aeabi_dmul>
 8007c9a:	3601      	adds	r6, #1
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	1064      	asrs	r4, r4, #1
 8007ca0:	3508      	adds	r5, #8
 8007ca2:	e73f      	b.n	8007b24 <_dtoa_r+0x394>
 8007ca4:	2602      	movs	r6, #2
 8007ca6:	e742      	b.n	8007b2e <_dtoa_r+0x39e>
 8007ca8:	9c07      	ldr	r4, [sp, #28]
 8007caa:	9704      	str	r7, [sp, #16]
 8007cac:	e761      	b.n	8007b72 <_dtoa_r+0x3e2>
 8007cae:	4b27      	ldr	r3, [pc, #156]	@ (8007d4c <_dtoa_r+0x5bc>)
 8007cb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cba:	4454      	add	r4, sl
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d053      	beq.n	8007d68 <_dtoa_r+0x5d8>
 8007cc0:	4928      	ldr	r1, [pc, #160]	@ (8007d64 <_dtoa_r+0x5d4>)
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	f7f8 fdfa 	bl	80008bc <__aeabi_ddiv>
 8007cc8:	4633      	mov	r3, r6
 8007cca:	462a      	mov	r2, r5
 8007ccc:	f7f8 fb14 	bl	80002f8 <__aeabi_dsub>
 8007cd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cd4:	4656      	mov	r6, sl
 8007cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cda:	f7f8 ff75 	bl	8000bc8 <__aeabi_d2iz>
 8007cde:	4605      	mov	r5, r0
 8007ce0:	f7f8 fc58 	bl	8000594 <__aeabi_i2d>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cec:	f7f8 fb04 	bl	80002f8 <__aeabi_dsub>
 8007cf0:	3530      	adds	r5, #48	@ 0x30
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cfa:	f806 5b01 	strb.w	r5, [r6], #1
 8007cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d02:	f7f8 ff23 	bl	8000b4c <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d171      	bne.n	8007dee <_dtoa_r+0x65e>
 8007d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d0e:	4911      	ldr	r1, [pc, #68]	@ (8007d54 <_dtoa_r+0x5c4>)
 8007d10:	2000      	movs	r0, #0
 8007d12:	f7f8 faf1 	bl	80002f8 <__aeabi_dsub>
 8007d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d1a:	f7f8 ff17 	bl	8000b4c <__aeabi_dcmplt>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f040 8095 	bne.w	8007e4e <_dtoa_r+0x6be>
 8007d24:	42a6      	cmp	r6, r4
 8007d26:	f43f af50 	beq.w	8007bca <_dtoa_r+0x43a>
 8007d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <_dtoa_r+0x5c8>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	f7f8 fc99 	bl	8000668 <__aeabi_dmul>
 8007d36:	4b08      	ldr	r3, [pc, #32]	@ (8007d58 <_dtoa_r+0x5c8>)
 8007d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d42:	f7f8 fc91 	bl	8000668 <__aeabi_dmul>
 8007d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d4a:	e7c4      	b.n	8007cd6 <_dtoa_r+0x546>
 8007d4c:	08009940 	.word	0x08009940
 8007d50:	08009918 	.word	0x08009918
 8007d54:	3ff00000 	.word	0x3ff00000
 8007d58:	40240000 	.word	0x40240000
 8007d5c:	401c0000 	.word	0x401c0000
 8007d60:	40140000 	.word	0x40140000
 8007d64:	3fe00000 	.word	0x3fe00000
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7f8 fc7c 	bl	8000668 <__aeabi_dmul>
 8007d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d74:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d76:	4656      	mov	r6, sl
 8007d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d7c:	f7f8 ff24 	bl	8000bc8 <__aeabi_d2iz>
 8007d80:	4605      	mov	r5, r0
 8007d82:	f7f8 fc07 	bl	8000594 <__aeabi_i2d>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8e:	f7f8 fab3 	bl	80002f8 <__aeabi_dsub>
 8007d92:	3530      	adds	r5, #48	@ 0x30
 8007d94:	f806 5b01 	strb.w	r5, [r6], #1
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	42a6      	cmp	r6, r4
 8007d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	d124      	bne.n	8007df2 <_dtoa_r+0x662>
 8007da8:	4bac      	ldr	r3, [pc, #688]	@ (800805c <_dtoa_r+0x8cc>)
 8007daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dae:	f7f8 faa5 	bl	80002fc <__adddf3>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dba:	f7f8 fee5 	bl	8000b88 <__aeabi_dcmpgt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d145      	bne.n	8007e4e <_dtoa_r+0x6be>
 8007dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dc6:	49a5      	ldr	r1, [pc, #660]	@ (800805c <_dtoa_r+0x8cc>)
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f7f8 fa95 	bl	80002f8 <__aeabi_dsub>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd6:	f7f8 feb9 	bl	8000b4c <__aeabi_dcmplt>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f43f aef5 	beq.w	8007bca <_dtoa_r+0x43a>
 8007de0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007de2:	1e73      	subs	r3, r6, #1
 8007de4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007de6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dea:	2b30      	cmp	r3, #48	@ 0x30
 8007dec:	d0f8      	beq.n	8007de0 <_dtoa_r+0x650>
 8007dee:	9f04      	ldr	r7, [sp, #16]
 8007df0:	e73e      	b.n	8007c70 <_dtoa_r+0x4e0>
 8007df2:	4b9b      	ldr	r3, [pc, #620]	@ (8008060 <_dtoa_r+0x8d0>)
 8007df4:	f7f8 fc38 	bl	8000668 <__aeabi_dmul>
 8007df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dfc:	e7bc      	b.n	8007d78 <_dtoa_r+0x5e8>
 8007dfe:	d10c      	bne.n	8007e1a <_dtoa_r+0x68a>
 8007e00:	4b98      	ldr	r3, [pc, #608]	@ (8008064 <_dtoa_r+0x8d4>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e08:	f7f8 fc2e 	bl	8000668 <__aeabi_dmul>
 8007e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e10:	f7f8 feb0 	bl	8000b74 <__aeabi_dcmpge>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f000 8157 	beq.w	80080c8 <_dtoa_r+0x938>
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	4625      	mov	r5, r4
 8007e1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e20:	43db      	mvns	r3, r3
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	4656      	mov	r6, sl
 8007e26:	2700      	movs	r7, #0
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 fafe 	bl	800842c <_Bfree>
 8007e30:	2d00      	cmp	r5, #0
 8007e32:	d0dc      	beq.n	8007dee <_dtoa_r+0x65e>
 8007e34:	b12f      	cbz	r7, 8007e42 <_dtoa_r+0x6b2>
 8007e36:	42af      	cmp	r7, r5
 8007e38:	d003      	beq.n	8007e42 <_dtoa_r+0x6b2>
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	4658      	mov	r0, fp
 8007e3e:	f000 faf5 	bl	800842c <_Bfree>
 8007e42:	4629      	mov	r1, r5
 8007e44:	4658      	mov	r0, fp
 8007e46:	f000 faf1 	bl	800842c <_Bfree>
 8007e4a:	e7d0      	b.n	8007dee <_dtoa_r+0x65e>
 8007e4c:	9704      	str	r7, [sp, #16]
 8007e4e:	4633      	mov	r3, r6
 8007e50:	461e      	mov	r6, r3
 8007e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e56:	2a39      	cmp	r2, #57	@ 0x39
 8007e58:	d107      	bne.n	8007e6a <_dtoa_r+0x6da>
 8007e5a:	459a      	cmp	sl, r3
 8007e5c:	d1f8      	bne.n	8007e50 <_dtoa_r+0x6c0>
 8007e5e:	9a04      	ldr	r2, [sp, #16]
 8007e60:	3201      	adds	r2, #1
 8007e62:	9204      	str	r2, [sp, #16]
 8007e64:	2230      	movs	r2, #48	@ 0x30
 8007e66:	f88a 2000 	strb.w	r2, [sl]
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	3201      	adds	r2, #1
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e7bd      	b.n	8007dee <_dtoa_r+0x65e>
 8007e72:	4b7b      	ldr	r3, [pc, #492]	@ (8008060 <_dtoa_r+0x8d0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	f7f8 fbf7 	bl	8000668 <__aeabi_dmul>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	460d      	mov	r5, r1
 8007e82:	f7f8 fe59 	bl	8000b38 <__aeabi_dcmpeq>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f aebb 	beq.w	8007c02 <_dtoa_r+0x472>
 8007e8c:	e6f0      	b.n	8007c70 <_dtoa_r+0x4e0>
 8007e8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	f000 80db 	beq.w	800804c <_dtoa_r+0x8bc>
 8007e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e98:	2a01      	cmp	r2, #1
 8007e9a:	f300 80bf 	bgt.w	800801c <_dtoa_r+0x88c>
 8007e9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	f000 80b7 	beq.w	8008014 <_dtoa_r+0x884>
 8007ea6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007eaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007eac:	4646      	mov	r6, r8
 8007eae:	9a08      	ldr	r2, [sp, #32]
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	441a      	add	r2, r3
 8007eb4:	4658      	mov	r0, fp
 8007eb6:	4498      	add	r8, r3
 8007eb8:	9208      	str	r2, [sp, #32]
 8007eba:	f000 fb6b 	bl	8008594 <__i2b>
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	b15e      	cbz	r6, 8007eda <_dtoa_r+0x74a>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dd08      	ble.n	8007eda <_dtoa_r+0x74a>
 8007ec8:	42b3      	cmp	r3, r6
 8007eca:	9a08      	ldr	r2, [sp, #32]
 8007ecc:	bfa8      	it	ge
 8007ece:	4633      	movge	r3, r6
 8007ed0:	eba8 0803 	sub.w	r8, r8, r3
 8007ed4:	1af6      	subs	r6, r6, r3
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	9308      	str	r3, [sp, #32]
 8007eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007edc:	b1f3      	cbz	r3, 8007f1c <_dtoa_r+0x78c>
 8007ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80b7 	beq.w	8008054 <_dtoa_r+0x8c4>
 8007ee6:	b18c      	cbz	r4, 8007f0c <_dtoa_r+0x77c>
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4622      	mov	r2, r4
 8007eec:	4658      	mov	r0, fp
 8007eee:	f000 fc11 	bl	8008714 <__pow5mult>
 8007ef2:	464a      	mov	r2, r9
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	4658      	mov	r0, fp
 8007efa:	f000 fb61 	bl	80085c0 <__multiply>
 8007efe:	4649      	mov	r1, r9
 8007f00:	9004      	str	r0, [sp, #16]
 8007f02:	4658      	mov	r0, fp
 8007f04:	f000 fa92 	bl	800842c <_Bfree>
 8007f08:	9b04      	ldr	r3, [sp, #16]
 8007f0a:	4699      	mov	r9, r3
 8007f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f0e:	1b1a      	subs	r2, r3, r4
 8007f10:	d004      	beq.n	8007f1c <_dtoa_r+0x78c>
 8007f12:	4649      	mov	r1, r9
 8007f14:	4658      	mov	r0, fp
 8007f16:	f000 fbfd 	bl	8008714 <__pow5mult>
 8007f1a:	4681      	mov	r9, r0
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4658      	mov	r0, fp
 8007f20:	f000 fb38 	bl	8008594 <__i2b>
 8007f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f26:	4604      	mov	r4, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 81cf 	beq.w	80082cc <_dtoa_r+0xb3c>
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4601      	mov	r1, r0
 8007f32:	4658      	mov	r0, fp
 8007f34:	f000 fbee 	bl	8008714 <__pow5mult>
 8007f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	f300 8095 	bgt.w	800806c <_dtoa_r+0x8dc>
 8007f42:	9b02      	ldr	r3, [sp, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 8087 	bne.w	8008058 <_dtoa_r+0x8c8>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 8089 	bne.w	8008068 <_dtoa_r+0x8d8>
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f5c:	0d1b      	lsrs	r3, r3, #20
 8007f5e:	051b      	lsls	r3, r3, #20
 8007f60:	b12b      	cbz	r3, 8007f6e <_dtoa_r+0x7de>
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	3301      	adds	r3, #1
 8007f66:	9308      	str	r3, [sp, #32]
 8007f68:	f108 0801 	add.w	r8, r8, #1
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 81b0 	beq.w	80082d8 <_dtoa_r+0xb48>
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f7e:	6918      	ldr	r0, [r3, #16]
 8007f80:	f000 fabc 	bl	80084fc <__hi0bits>
 8007f84:	f1c0 0020 	rsb	r0, r0, #32
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	4418      	add	r0, r3
 8007f8c:	f010 001f 	ands.w	r0, r0, #31
 8007f90:	d077      	beq.n	8008082 <_dtoa_r+0x8f2>
 8007f92:	f1c0 0320 	rsb	r3, r0, #32
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	dd6b      	ble.n	8008072 <_dtoa_r+0x8e2>
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	f1c0 001c 	rsb	r0, r0, #28
 8007fa0:	4403      	add	r3, r0
 8007fa2:	4480      	add	r8, r0
 8007fa4:	4406      	add	r6, r0
 8007fa6:	9308      	str	r3, [sp, #32]
 8007fa8:	f1b8 0f00 	cmp.w	r8, #0
 8007fac:	dd05      	ble.n	8007fba <_dtoa_r+0x82a>
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	4658      	mov	r0, fp
 8007fb4:	f000 fc08 	bl	80087c8 <__lshift>
 8007fb8:	4681      	mov	r9, r0
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd05      	ble.n	8007fcc <_dtoa_r+0x83c>
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	4658      	mov	r0, fp
 8007fc6:	f000 fbff 	bl	80087c8 <__lshift>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d059      	beq.n	8008086 <_dtoa_r+0x8f6>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4648      	mov	r0, r9
 8007fd6:	f000 fc63 	bl	80088a0 <__mcmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	da53      	bge.n	8008086 <_dtoa_r+0x8f6>
 8007fde:	1e7b      	subs	r3, r7, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	4658      	mov	r0, fp
 8007fea:	f000 fa41 	bl	8008470 <__multadd>
 8007fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff0:	4681      	mov	r9, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8172 	beq.w	80082dc <_dtoa_r+0xb4c>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	220a      	movs	r2, #10
 8007ffe:	4658      	mov	r0, fp
 8008000:	f000 fa36 	bl	8008470 <__multadd>
 8008004:	9b00      	ldr	r3, [sp, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	4605      	mov	r5, r0
 800800a:	dc67      	bgt.n	80080dc <_dtoa_r+0x94c>
 800800c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800e:	2b02      	cmp	r3, #2
 8008010:	dc41      	bgt.n	8008096 <_dtoa_r+0x906>
 8008012:	e063      	b.n	80080dc <_dtoa_r+0x94c>
 8008014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008016:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800801a:	e746      	b.n	8007eaa <_dtoa_r+0x71a>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	1e5c      	subs	r4, r3, #1
 8008020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008022:	42a3      	cmp	r3, r4
 8008024:	bfbf      	itttt	lt
 8008026:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008028:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800802a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800802c:	1ae3      	sublt	r3, r4, r3
 800802e:	bfb4      	ite	lt
 8008030:	18d2      	addlt	r2, r2, r3
 8008032:	1b1c      	subge	r4, r3, r4
 8008034:	9b07      	ldr	r3, [sp, #28]
 8008036:	bfbc      	itt	lt
 8008038:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800803a:	2400      	movlt	r4, #0
 800803c:	2b00      	cmp	r3, #0
 800803e:	bfb5      	itete	lt
 8008040:	eba8 0603 	sublt.w	r6, r8, r3
 8008044:	9b07      	ldrge	r3, [sp, #28]
 8008046:	2300      	movlt	r3, #0
 8008048:	4646      	movge	r6, r8
 800804a:	e730      	b.n	8007eae <_dtoa_r+0x71e>
 800804c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800804e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008050:	4646      	mov	r6, r8
 8008052:	e735      	b.n	8007ec0 <_dtoa_r+0x730>
 8008054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008056:	e75c      	b.n	8007f12 <_dtoa_r+0x782>
 8008058:	2300      	movs	r3, #0
 800805a:	e788      	b.n	8007f6e <_dtoa_r+0x7de>
 800805c:	3fe00000 	.word	0x3fe00000
 8008060:	40240000 	.word	0x40240000
 8008064:	40140000 	.word	0x40140000
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	e780      	b.n	8007f6e <_dtoa_r+0x7de>
 800806c:	2300      	movs	r3, #0
 800806e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008070:	e782      	b.n	8007f78 <_dtoa_r+0x7e8>
 8008072:	d099      	beq.n	8007fa8 <_dtoa_r+0x818>
 8008074:	9a08      	ldr	r2, [sp, #32]
 8008076:	331c      	adds	r3, #28
 8008078:	441a      	add	r2, r3
 800807a:	4498      	add	r8, r3
 800807c:	441e      	add	r6, r3
 800807e:	9208      	str	r2, [sp, #32]
 8008080:	e792      	b.n	8007fa8 <_dtoa_r+0x818>
 8008082:	4603      	mov	r3, r0
 8008084:	e7f6      	b.n	8008074 <_dtoa_r+0x8e4>
 8008086:	9b07      	ldr	r3, [sp, #28]
 8008088:	9704      	str	r7, [sp, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	dc20      	bgt.n	80080d0 <_dtoa_r+0x940>
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008092:	2b02      	cmp	r3, #2
 8008094:	dd1e      	ble.n	80080d4 <_dtoa_r+0x944>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f47f aec0 	bne.w	8007e1e <_dtoa_r+0x68e>
 800809e:	4621      	mov	r1, r4
 80080a0:	2205      	movs	r2, #5
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 f9e4 	bl	8008470 <__multadd>
 80080a8:	4601      	mov	r1, r0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4648      	mov	r0, r9
 80080ae:	f000 fbf7 	bl	80088a0 <__mcmp>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f77f aeb3 	ble.w	8007e1e <_dtoa_r+0x68e>
 80080b8:	4656      	mov	r6, sl
 80080ba:	2331      	movs	r3, #49	@ 0x31
 80080bc:	f806 3b01 	strb.w	r3, [r6], #1
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	3301      	adds	r3, #1
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	e6ae      	b.n	8007e26 <_dtoa_r+0x696>
 80080c8:	9c07      	ldr	r4, [sp, #28]
 80080ca:	9704      	str	r7, [sp, #16]
 80080cc:	4625      	mov	r5, r4
 80080ce:	e7f3      	b.n	80080b8 <_dtoa_r+0x928>
 80080d0:	9b07      	ldr	r3, [sp, #28]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8104 	beq.w	80082e4 <_dtoa_r+0xb54>
 80080dc:	2e00      	cmp	r6, #0
 80080de:	dd05      	ble.n	80080ec <_dtoa_r+0x95c>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4632      	mov	r2, r6
 80080e4:	4658      	mov	r0, fp
 80080e6:	f000 fb6f 	bl	80087c8 <__lshift>
 80080ea:	4605      	mov	r5, r0
 80080ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d05a      	beq.n	80081a8 <_dtoa_r+0xa18>
 80080f2:	6869      	ldr	r1, [r5, #4]
 80080f4:	4658      	mov	r0, fp
 80080f6:	f000 f959 	bl	80083ac <_Balloc>
 80080fa:	4606      	mov	r6, r0
 80080fc:	b928      	cbnz	r0, 800810a <_dtoa_r+0x97a>
 80080fe:	4b84      	ldr	r3, [pc, #528]	@ (8008310 <_dtoa_r+0xb80>)
 8008100:	4602      	mov	r2, r0
 8008102:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008106:	f7ff bb5a 	b.w	80077be <_dtoa_r+0x2e>
 800810a:	692a      	ldr	r2, [r5, #16]
 800810c:	3202      	adds	r2, #2
 800810e:	0092      	lsls	r2, r2, #2
 8008110:	f105 010c 	add.w	r1, r5, #12
 8008114:	300c      	adds	r0, #12
 8008116:	f7ff faa4 	bl	8007662 <memcpy>
 800811a:	2201      	movs	r2, #1
 800811c:	4631      	mov	r1, r6
 800811e:	4658      	mov	r0, fp
 8008120:	f000 fb52 	bl	80087c8 <__lshift>
 8008124:	f10a 0301 	add.w	r3, sl, #1
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	4453      	add	r3, sl
 800812e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	462f      	mov	r7, r5
 8008138:	930a      	str	r3, [sp, #40]	@ 0x28
 800813a:	4605      	mov	r5, r0
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	4621      	mov	r1, r4
 8008140:	3b01      	subs	r3, #1
 8008142:	4648      	mov	r0, r9
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	f7ff fa9a 	bl	800767e <quorem>
 800814a:	4639      	mov	r1, r7
 800814c:	9002      	str	r0, [sp, #8]
 800814e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008152:	4648      	mov	r0, r9
 8008154:	f000 fba4 	bl	80088a0 <__mcmp>
 8008158:	462a      	mov	r2, r5
 800815a:	9008      	str	r0, [sp, #32]
 800815c:	4621      	mov	r1, r4
 800815e:	4658      	mov	r0, fp
 8008160:	f000 fbba 	bl	80088d8 <__mdiff>
 8008164:	68c2      	ldr	r2, [r0, #12]
 8008166:	4606      	mov	r6, r0
 8008168:	bb02      	cbnz	r2, 80081ac <_dtoa_r+0xa1c>
 800816a:	4601      	mov	r1, r0
 800816c:	4648      	mov	r0, r9
 800816e:	f000 fb97 	bl	80088a0 <__mcmp>
 8008172:	4602      	mov	r2, r0
 8008174:	4631      	mov	r1, r6
 8008176:	4658      	mov	r0, fp
 8008178:	920e      	str	r2, [sp, #56]	@ 0x38
 800817a:	f000 f957 	bl	800842c <_Bfree>
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008182:	9e07      	ldr	r6, [sp, #28]
 8008184:	ea43 0102 	orr.w	r1, r3, r2
 8008188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818a:	4319      	orrs	r1, r3
 800818c:	d110      	bne.n	80081b0 <_dtoa_r+0xa20>
 800818e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008192:	d029      	beq.n	80081e8 <_dtoa_r+0xa58>
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd02      	ble.n	80081a0 <_dtoa_r+0xa10>
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081a0:	9b00      	ldr	r3, [sp, #0]
 80081a2:	f883 8000 	strb.w	r8, [r3]
 80081a6:	e63f      	b.n	8007e28 <_dtoa_r+0x698>
 80081a8:	4628      	mov	r0, r5
 80081aa:	e7bb      	b.n	8008124 <_dtoa_r+0x994>
 80081ac:	2201      	movs	r2, #1
 80081ae:	e7e1      	b.n	8008174 <_dtoa_r+0x9e4>
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	db04      	blt.n	80081c0 <_dtoa_r+0xa30>
 80081b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081b8:	430b      	orrs	r3, r1
 80081ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081bc:	430b      	orrs	r3, r1
 80081be:	d120      	bne.n	8008202 <_dtoa_r+0xa72>
 80081c0:	2a00      	cmp	r2, #0
 80081c2:	dded      	ble.n	80081a0 <_dtoa_r+0xa10>
 80081c4:	4649      	mov	r1, r9
 80081c6:	2201      	movs	r2, #1
 80081c8:	4658      	mov	r0, fp
 80081ca:	f000 fafd 	bl	80087c8 <__lshift>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4681      	mov	r9, r0
 80081d2:	f000 fb65 	bl	80088a0 <__mcmp>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	dc03      	bgt.n	80081e2 <_dtoa_r+0xa52>
 80081da:	d1e1      	bne.n	80081a0 <_dtoa_r+0xa10>
 80081dc:	f018 0f01 	tst.w	r8, #1
 80081e0:	d0de      	beq.n	80081a0 <_dtoa_r+0xa10>
 80081e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081e6:	d1d8      	bne.n	800819a <_dtoa_r+0xa0a>
 80081e8:	9a00      	ldr	r2, [sp, #0]
 80081ea:	2339      	movs	r3, #57	@ 0x39
 80081ec:	7013      	strb	r3, [r2, #0]
 80081ee:	4633      	mov	r3, r6
 80081f0:	461e      	mov	r6, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081f8:	2a39      	cmp	r2, #57	@ 0x39
 80081fa:	d052      	beq.n	80082a2 <_dtoa_r+0xb12>
 80081fc:	3201      	adds	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
 8008200:	e612      	b.n	8007e28 <_dtoa_r+0x698>
 8008202:	2a00      	cmp	r2, #0
 8008204:	dd07      	ble.n	8008216 <_dtoa_r+0xa86>
 8008206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800820a:	d0ed      	beq.n	80081e8 <_dtoa_r+0xa58>
 800820c:	9a00      	ldr	r2, [sp, #0]
 800820e:	f108 0301 	add.w	r3, r8, #1
 8008212:	7013      	strb	r3, [r2, #0]
 8008214:	e608      	b.n	8007e28 <_dtoa_r+0x698>
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	9a07      	ldr	r2, [sp, #28]
 800821a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800821e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008220:	4293      	cmp	r3, r2
 8008222:	d028      	beq.n	8008276 <_dtoa_r+0xae6>
 8008224:	4649      	mov	r1, r9
 8008226:	2300      	movs	r3, #0
 8008228:	220a      	movs	r2, #10
 800822a:	4658      	mov	r0, fp
 800822c:	f000 f920 	bl	8008470 <__multadd>
 8008230:	42af      	cmp	r7, r5
 8008232:	4681      	mov	r9, r0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	f04f 020a 	mov.w	r2, #10
 800823c:	4639      	mov	r1, r7
 800823e:	4658      	mov	r0, fp
 8008240:	d107      	bne.n	8008252 <_dtoa_r+0xac2>
 8008242:	f000 f915 	bl	8008470 <__multadd>
 8008246:	4607      	mov	r7, r0
 8008248:	4605      	mov	r5, r0
 800824a:	9b07      	ldr	r3, [sp, #28]
 800824c:	3301      	adds	r3, #1
 800824e:	9307      	str	r3, [sp, #28]
 8008250:	e774      	b.n	800813c <_dtoa_r+0x9ac>
 8008252:	f000 f90d 	bl	8008470 <__multadd>
 8008256:	4629      	mov	r1, r5
 8008258:	4607      	mov	r7, r0
 800825a:	2300      	movs	r3, #0
 800825c:	220a      	movs	r2, #10
 800825e:	4658      	mov	r0, fp
 8008260:	f000 f906 	bl	8008470 <__multadd>
 8008264:	4605      	mov	r5, r0
 8008266:	e7f0      	b.n	800824a <_dtoa_r+0xaba>
 8008268:	9b00      	ldr	r3, [sp, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfcc      	ite	gt
 800826e:	461e      	movgt	r6, r3
 8008270:	2601      	movle	r6, #1
 8008272:	4456      	add	r6, sl
 8008274:	2700      	movs	r7, #0
 8008276:	4649      	mov	r1, r9
 8008278:	2201      	movs	r2, #1
 800827a:	4658      	mov	r0, fp
 800827c:	f000 faa4 	bl	80087c8 <__lshift>
 8008280:	4621      	mov	r1, r4
 8008282:	4681      	mov	r9, r0
 8008284:	f000 fb0c 	bl	80088a0 <__mcmp>
 8008288:	2800      	cmp	r0, #0
 800828a:	dcb0      	bgt.n	80081ee <_dtoa_r+0xa5e>
 800828c:	d102      	bne.n	8008294 <_dtoa_r+0xb04>
 800828e:	f018 0f01 	tst.w	r8, #1
 8008292:	d1ac      	bne.n	80081ee <_dtoa_r+0xa5e>
 8008294:	4633      	mov	r3, r6
 8008296:	461e      	mov	r6, r3
 8008298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800829c:	2a30      	cmp	r2, #48	@ 0x30
 800829e:	d0fa      	beq.n	8008296 <_dtoa_r+0xb06>
 80082a0:	e5c2      	b.n	8007e28 <_dtoa_r+0x698>
 80082a2:	459a      	cmp	sl, r3
 80082a4:	d1a4      	bne.n	80081f0 <_dtoa_r+0xa60>
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	3301      	adds	r3, #1
 80082aa:	9304      	str	r3, [sp, #16]
 80082ac:	2331      	movs	r3, #49	@ 0x31
 80082ae:	f88a 3000 	strb.w	r3, [sl]
 80082b2:	e5b9      	b.n	8007e28 <_dtoa_r+0x698>
 80082b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008314 <_dtoa_r+0xb84>
 80082ba:	b11b      	cbz	r3, 80082c4 <_dtoa_r+0xb34>
 80082bc:	f10a 0308 	add.w	r3, sl, #8
 80082c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	4650      	mov	r0, sl
 80082c6:	b019      	add	sp, #100	@ 0x64
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	f77f ae37 	ble.w	8007f42 <_dtoa_r+0x7b2>
 80082d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d8:	2001      	movs	r0, #1
 80082da:	e655      	b.n	8007f88 <_dtoa_r+0x7f8>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f77f aed6 	ble.w	8008090 <_dtoa_r+0x900>
 80082e4:	4656      	mov	r6, sl
 80082e6:	4621      	mov	r1, r4
 80082e8:	4648      	mov	r0, r9
 80082ea:	f7ff f9c8 	bl	800767e <quorem>
 80082ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082f2:	f806 8b01 	strb.w	r8, [r6], #1
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	eba6 020a 	sub.w	r2, r6, sl
 80082fc:	4293      	cmp	r3, r2
 80082fe:	ddb3      	ble.n	8008268 <_dtoa_r+0xad8>
 8008300:	4649      	mov	r1, r9
 8008302:	2300      	movs	r3, #0
 8008304:	220a      	movs	r2, #10
 8008306:	4658      	mov	r0, fp
 8008308:	f000 f8b2 	bl	8008470 <__multadd>
 800830c:	4681      	mov	r9, r0
 800830e:	e7ea      	b.n	80082e6 <_dtoa_r+0xb56>
 8008310:	080098a0 	.word	0x080098a0
 8008314:	08009824 	.word	0x08009824

08008318 <_free_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4605      	mov	r5, r0
 800831c:	2900      	cmp	r1, #0
 800831e:	d041      	beq.n	80083a4 <_free_r+0x8c>
 8008320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008324:	1f0c      	subs	r4, r1, #4
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfb8      	it	lt
 800832a:	18e4      	addlt	r4, r4, r3
 800832c:	f7fe fa9c 	bl	8006868 <__malloc_lock>
 8008330:	4a1d      	ldr	r2, [pc, #116]	@ (80083a8 <_free_r+0x90>)
 8008332:	6813      	ldr	r3, [r2, #0]
 8008334:	b933      	cbnz	r3, 8008344 <_free_r+0x2c>
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	6014      	str	r4, [r2, #0]
 800833a:	4628      	mov	r0, r5
 800833c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008340:	f7fe ba98 	b.w	8006874 <__malloc_unlock>
 8008344:	42a3      	cmp	r3, r4
 8008346:	d908      	bls.n	800835a <_free_r+0x42>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	1821      	adds	r1, r4, r0
 800834c:	428b      	cmp	r3, r1
 800834e:	bf01      	itttt	eq
 8008350:	6819      	ldreq	r1, [r3, #0]
 8008352:	685b      	ldreq	r3, [r3, #4]
 8008354:	1809      	addeq	r1, r1, r0
 8008356:	6021      	streq	r1, [r4, #0]
 8008358:	e7ed      	b.n	8008336 <_free_r+0x1e>
 800835a:	461a      	mov	r2, r3
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	b10b      	cbz	r3, 8008364 <_free_r+0x4c>
 8008360:	42a3      	cmp	r3, r4
 8008362:	d9fa      	bls.n	800835a <_free_r+0x42>
 8008364:	6811      	ldr	r1, [r2, #0]
 8008366:	1850      	adds	r0, r2, r1
 8008368:	42a0      	cmp	r0, r4
 800836a:	d10b      	bne.n	8008384 <_free_r+0x6c>
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	4401      	add	r1, r0
 8008370:	1850      	adds	r0, r2, r1
 8008372:	4283      	cmp	r3, r0
 8008374:	6011      	str	r1, [r2, #0]
 8008376:	d1e0      	bne.n	800833a <_free_r+0x22>
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	6053      	str	r3, [r2, #4]
 800837e:	4408      	add	r0, r1
 8008380:	6010      	str	r0, [r2, #0]
 8008382:	e7da      	b.n	800833a <_free_r+0x22>
 8008384:	d902      	bls.n	800838c <_free_r+0x74>
 8008386:	230c      	movs	r3, #12
 8008388:	602b      	str	r3, [r5, #0]
 800838a:	e7d6      	b.n	800833a <_free_r+0x22>
 800838c:	6820      	ldr	r0, [r4, #0]
 800838e:	1821      	adds	r1, r4, r0
 8008390:	428b      	cmp	r3, r1
 8008392:	bf04      	itt	eq
 8008394:	6819      	ldreq	r1, [r3, #0]
 8008396:	685b      	ldreq	r3, [r3, #4]
 8008398:	6063      	str	r3, [r4, #4]
 800839a:	bf04      	itt	eq
 800839c:	1809      	addeq	r1, r1, r0
 800839e:	6021      	streq	r1, [r4, #0]
 80083a0:	6054      	str	r4, [r2, #4]
 80083a2:	e7ca      	b.n	800833a <_free_r+0x22>
 80083a4:	bd38      	pop	{r3, r4, r5, pc}
 80083a6:	bf00      	nop
 80083a8:	200002d8 	.word	0x200002d8

080083ac <_Balloc>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	69c6      	ldr	r6, [r0, #28]
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	b976      	cbnz	r6, 80083d4 <_Balloc+0x28>
 80083b6:	2010      	movs	r0, #16
 80083b8:	f7fe f9a4 	bl	8006704 <malloc>
 80083bc:	4602      	mov	r2, r0
 80083be:	61e0      	str	r0, [r4, #28]
 80083c0:	b920      	cbnz	r0, 80083cc <_Balloc+0x20>
 80083c2:	4b18      	ldr	r3, [pc, #96]	@ (8008424 <_Balloc+0x78>)
 80083c4:	4818      	ldr	r0, [pc, #96]	@ (8008428 <_Balloc+0x7c>)
 80083c6:	216b      	movs	r1, #107	@ 0x6b
 80083c8:	f000 fde4 	bl	8008f94 <__assert_func>
 80083cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d0:	6006      	str	r6, [r0, #0]
 80083d2:	60c6      	str	r6, [r0, #12]
 80083d4:	69e6      	ldr	r6, [r4, #28]
 80083d6:	68f3      	ldr	r3, [r6, #12]
 80083d8:	b183      	cbz	r3, 80083fc <_Balloc+0x50>
 80083da:	69e3      	ldr	r3, [r4, #28]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083e2:	b9b8      	cbnz	r0, 8008414 <_Balloc+0x68>
 80083e4:	2101      	movs	r1, #1
 80083e6:	fa01 f605 	lsl.w	r6, r1, r5
 80083ea:	1d72      	adds	r2, r6, #5
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 fdee 	bl	8008fd0 <_calloc_r>
 80083f4:	b160      	cbz	r0, 8008410 <_Balloc+0x64>
 80083f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083fa:	e00e      	b.n	800841a <_Balloc+0x6e>
 80083fc:	2221      	movs	r2, #33	@ 0x21
 80083fe:	2104      	movs	r1, #4
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fde5 	bl	8008fd0 <_calloc_r>
 8008406:	69e3      	ldr	r3, [r4, #28]
 8008408:	60f0      	str	r0, [r6, #12]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e4      	bne.n	80083da <_Balloc+0x2e>
 8008410:	2000      	movs	r0, #0
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	6802      	ldr	r2, [r0, #0]
 8008416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800841a:	2300      	movs	r3, #0
 800841c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008420:	e7f7      	b.n	8008412 <_Balloc+0x66>
 8008422:	bf00      	nop
 8008424:	08009831 	.word	0x08009831
 8008428:	080098b1 	.word	0x080098b1

0800842c <_Bfree>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	69c6      	ldr	r6, [r0, #28]
 8008430:	4605      	mov	r5, r0
 8008432:	460c      	mov	r4, r1
 8008434:	b976      	cbnz	r6, 8008454 <_Bfree+0x28>
 8008436:	2010      	movs	r0, #16
 8008438:	f7fe f964 	bl	8006704 <malloc>
 800843c:	4602      	mov	r2, r0
 800843e:	61e8      	str	r0, [r5, #28]
 8008440:	b920      	cbnz	r0, 800844c <_Bfree+0x20>
 8008442:	4b09      	ldr	r3, [pc, #36]	@ (8008468 <_Bfree+0x3c>)
 8008444:	4809      	ldr	r0, [pc, #36]	@ (800846c <_Bfree+0x40>)
 8008446:	218f      	movs	r1, #143	@ 0x8f
 8008448:	f000 fda4 	bl	8008f94 <__assert_func>
 800844c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008450:	6006      	str	r6, [r0, #0]
 8008452:	60c6      	str	r6, [r0, #12]
 8008454:	b13c      	cbz	r4, 8008466 <_Bfree+0x3a>
 8008456:	69eb      	ldr	r3, [r5, #28]
 8008458:	6862      	ldr	r2, [r4, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008460:	6021      	str	r1, [r4, #0]
 8008462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	08009831 	.word	0x08009831
 800846c:	080098b1 	.word	0x080098b1

08008470 <__multadd>:
 8008470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008474:	690d      	ldr	r5, [r1, #16]
 8008476:	4607      	mov	r7, r0
 8008478:	460c      	mov	r4, r1
 800847a:	461e      	mov	r6, r3
 800847c:	f101 0c14 	add.w	ip, r1, #20
 8008480:	2000      	movs	r0, #0
 8008482:	f8dc 3000 	ldr.w	r3, [ip]
 8008486:	b299      	uxth	r1, r3
 8008488:	fb02 6101 	mla	r1, r2, r1, r6
 800848c:	0c1e      	lsrs	r6, r3, #16
 800848e:	0c0b      	lsrs	r3, r1, #16
 8008490:	fb02 3306 	mla	r3, r2, r6, r3
 8008494:	b289      	uxth	r1, r1
 8008496:	3001      	adds	r0, #1
 8008498:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800849c:	4285      	cmp	r5, r0
 800849e:	f84c 1b04 	str.w	r1, [ip], #4
 80084a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084a6:	dcec      	bgt.n	8008482 <__multadd+0x12>
 80084a8:	b30e      	cbz	r6, 80084ee <__multadd+0x7e>
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dc19      	bgt.n	80084e4 <__multadd+0x74>
 80084b0:	6861      	ldr	r1, [r4, #4]
 80084b2:	4638      	mov	r0, r7
 80084b4:	3101      	adds	r1, #1
 80084b6:	f7ff ff79 	bl	80083ac <_Balloc>
 80084ba:	4680      	mov	r8, r0
 80084bc:	b928      	cbnz	r0, 80084ca <__multadd+0x5a>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b0c      	ldr	r3, [pc, #48]	@ (80084f4 <__multadd+0x84>)
 80084c2:	480d      	ldr	r0, [pc, #52]	@ (80084f8 <__multadd+0x88>)
 80084c4:	21ba      	movs	r1, #186	@ 0xba
 80084c6:	f000 fd65 	bl	8008f94 <__assert_func>
 80084ca:	6922      	ldr	r2, [r4, #16]
 80084cc:	3202      	adds	r2, #2
 80084ce:	f104 010c 	add.w	r1, r4, #12
 80084d2:	0092      	lsls	r2, r2, #2
 80084d4:	300c      	adds	r0, #12
 80084d6:	f7ff f8c4 	bl	8007662 <memcpy>
 80084da:	4621      	mov	r1, r4
 80084dc:	4638      	mov	r0, r7
 80084de:	f7ff ffa5 	bl	800842c <_Bfree>
 80084e2:	4644      	mov	r4, r8
 80084e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084e8:	3501      	adds	r5, #1
 80084ea:	615e      	str	r6, [r3, #20]
 80084ec:	6125      	str	r5, [r4, #16]
 80084ee:	4620      	mov	r0, r4
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f4:	080098a0 	.word	0x080098a0
 80084f8:	080098b1 	.word	0x080098b1

080084fc <__hi0bits>:
 80084fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008500:	4603      	mov	r3, r0
 8008502:	bf36      	itet	cc
 8008504:	0403      	lslcc	r3, r0, #16
 8008506:	2000      	movcs	r0, #0
 8008508:	2010      	movcc	r0, #16
 800850a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800850e:	bf3c      	itt	cc
 8008510:	021b      	lslcc	r3, r3, #8
 8008512:	3008      	addcc	r0, #8
 8008514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008518:	bf3c      	itt	cc
 800851a:	011b      	lslcc	r3, r3, #4
 800851c:	3004      	addcc	r0, #4
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008522:	bf3c      	itt	cc
 8008524:	009b      	lslcc	r3, r3, #2
 8008526:	3002      	addcc	r0, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	db05      	blt.n	8008538 <__hi0bits+0x3c>
 800852c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008530:	f100 0001 	add.w	r0, r0, #1
 8008534:	bf08      	it	eq
 8008536:	2020      	moveq	r0, #32
 8008538:	4770      	bx	lr

0800853a <__lo0bits>:
 800853a:	6803      	ldr	r3, [r0, #0]
 800853c:	4602      	mov	r2, r0
 800853e:	f013 0007 	ands.w	r0, r3, #7
 8008542:	d00b      	beq.n	800855c <__lo0bits+0x22>
 8008544:	07d9      	lsls	r1, r3, #31
 8008546:	d421      	bmi.n	800858c <__lo0bits+0x52>
 8008548:	0798      	lsls	r0, r3, #30
 800854a:	bf49      	itett	mi
 800854c:	085b      	lsrmi	r3, r3, #1
 800854e:	089b      	lsrpl	r3, r3, #2
 8008550:	2001      	movmi	r0, #1
 8008552:	6013      	strmi	r3, [r2, #0]
 8008554:	bf5c      	itt	pl
 8008556:	6013      	strpl	r3, [r2, #0]
 8008558:	2002      	movpl	r0, #2
 800855a:	4770      	bx	lr
 800855c:	b299      	uxth	r1, r3
 800855e:	b909      	cbnz	r1, 8008564 <__lo0bits+0x2a>
 8008560:	0c1b      	lsrs	r3, r3, #16
 8008562:	2010      	movs	r0, #16
 8008564:	b2d9      	uxtb	r1, r3
 8008566:	b909      	cbnz	r1, 800856c <__lo0bits+0x32>
 8008568:	3008      	adds	r0, #8
 800856a:	0a1b      	lsrs	r3, r3, #8
 800856c:	0719      	lsls	r1, r3, #28
 800856e:	bf04      	itt	eq
 8008570:	091b      	lsreq	r3, r3, #4
 8008572:	3004      	addeq	r0, #4
 8008574:	0799      	lsls	r1, r3, #30
 8008576:	bf04      	itt	eq
 8008578:	089b      	lsreq	r3, r3, #2
 800857a:	3002      	addeq	r0, #2
 800857c:	07d9      	lsls	r1, r3, #31
 800857e:	d403      	bmi.n	8008588 <__lo0bits+0x4e>
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	f100 0001 	add.w	r0, r0, #1
 8008586:	d003      	beq.n	8008590 <__lo0bits+0x56>
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	4770      	bx	lr
 800858c:	2000      	movs	r0, #0
 800858e:	4770      	bx	lr
 8008590:	2020      	movs	r0, #32
 8008592:	4770      	bx	lr

08008594 <__i2b>:
 8008594:	b510      	push	{r4, lr}
 8008596:	460c      	mov	r4, r1
 8008598:	2101      	movs	r1, #1
 800859a:	f7ff ff07 	bl	80083ac <_Balloc>
 800859e:	4602      	mov	r2, r0
 80085a0:	b928      	cbnz	r0, 80085ae <__i2b+0x1a>
 80085a2:	4b05      	ldr	r3, [pc, #20]	@ (80085b8 <__i2b+0x24>)
 80085a4:	4805      	ldr	r0, [pc, #20]	@ (80085bc <__i2b+0x28>)
 80085a6:	f240 1145 	movw	r1, #325	@ 0x145
 80085aa:	f000 fcf3 	bl	8008f94 <__assert_func>
 80085ae:	2301      	movs	r3, #1
 80085b0:	6144      	str	r4, [r0, #20]
 80085b2:	6103      	str	r3, [r0, #16]
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	bf00      	nop
 80085b8:	080098a0 	.word	0x080098a0
 80085bc:	080098b1 	.word	0x080098b1

080085c0 <__multiply>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	4614      	mov	r4, r2
 80085c6:	690a      	ldr	r2, [r1, #16]
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	bfa8      	it	ge
 80085ce:	4623      	movge	r3, r4
 80085d0:	460f      	mov	r7, r1
 80085d2:	bfa4      	itt	ge
 80085d4:	460c      	movge	r4, r1
 80085d6:	461f      	movge	r7, r3
 80085d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085e0:	68a3      	ldr	r3, [r4, #8]
 80085e2:	6861      	ldr	r1, [r4, #4]
 80085e4:	eb0a 0609 	add.w	r6, sl, r9
 80085e8:	42b3      	cmp	r3, r6
 80085ea:	b085      	sub	sp, #20
 80085ec:	bfb8      	it	lt
 80085ee:	3101      	addlt	r1, #1
 80085f0:	f7ff fedc 	bl	80083ac <_Balloc>
 80085f4:	b930      	cbnz	r0, 8008604 <__multiply+0x44>
 80085f6:	4602      	mov	r2, r0
 80085f8:	4b44      	ldr	r3, [pc, #272]	@ (800870c <__multiply+0x14c>)
 80085fa:	4845      	ldr	r0, [pc, #276]	@ (8008710 <__multiply+0x150>)
 80085fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008600:	f000 fcc8 	bl	8008f94 <__assert_func>
 8008604:	f100 0514 	add.w	r5, r0, #20
 8008608:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800860c:	462b      	mov	r3, r5
 800860e:	2200      	movs	r2, #0
 8008610:	4543      	cmp	r3, r8
 8008612:	d321      	bcc.n	8008658 <__multiply+0x98>
 8008614:	f107 0114 	add.w	r1, r7, #20
 8008618:	f104 0214 	add.w	r2, r4, #20
 800861c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008620:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	1b13      	subs	r3, r2, r4
 8008628:	3b15      	subs	r3, #21
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	3304      	adds	r3, #4
 8008630:	f104 0715 	add.w	r7, r4, #21
 8008634:	42ba      	cmp	r2, r7
 8008636:	bf38      	it	cc
 8008638:	2304      	movcc	r3, #4
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	9b02      	ldr	r3, [sp, #8]
 800863e:	9103      	str	r1, [sp, #12]
 8008640:	428b      	cmp	r3, r1
 8008642:	d80c      	bhi.n	800865e <__multiply+0x9e>
 8008644:	2e00      	cmp	r6, #0
 8008646:	dd03      	ble.n	8008650 <__multiply+0x90>
 8008648:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800864c:	2b00      	cmp	r3, #0
 800864e:	d05b      	beq.n	8008708 <__multiply+0x148>
 8008650:	6106      	str	r6, [r0, #16]
 8008652:	b005      	add	sp, #20
 8008654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008658:	f843 2b04 	str.w	r2, [r3], #4
 800865c:	e7d8      	b.n	8008610 <__multiply+0x50>
 800865e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008662:	f1ba 0f00 	cmp.w	sl, #0
 8008666:	d024      	beq.n	80086b2 <__multiply+0xf2>
 8008668:	f104 0e14 	add.w	lr, r4, #20
 800866c:	46a9      	mov	r9, r5
 800866e:	f04f 0c00 	mov.w	ip, #0
 8008672:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008676:	f8d9 3000 	ldr.w	r3, [r9]
 800867a:	fa1f fb87 	uxth.w	fp, r7
 800867e:	b29b      	uxth	r3, r3
 8008680:	fb0a 330b 	mla	r3, sl, fp, r3
 8008684:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008688:	f8d9 7000 	ldr.w	r7, [r9]
 800868c:	4463      	add	r3, ip
 800868e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008692:	fb0a c70b 	mla	r7, sl, fp, ip
 8008696:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800869a:	b29b      	uxth	r3, r3
 800869c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086a0:	4572      	cmp	r2, lr
 80086a2:	f849 3b04 	str.w	r3, [r9], #4
 80086a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086aa:	d8e2      	bhi.n	8008672 <__multiply+0xb2>
 80086ac:	9b01      	ldr	r3, [sp, #4]
 80086ae:	f845 c003 	str.w	ip, [r5, r3]
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086b8:	3104      	adds	r1, #4
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	d021      	beq.n	8008704 <__multiply+0x144>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	f104 0c14 	add.w	ip, r4, #20
 80086c6:	46ae      	mov	lr, r5
 80086c8:	f04f 0a00 	mov.w	sl, #0
 80086cc:	f8bc b000 	ldrh.w	fp, [ip]
 80086d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086d4:	fb09 770b 	mla	r7, r9, fp, r7
 80086d8:	4457      	add	r7, sl
 80086da:	b29b      	uxth	r3, r3
 80086dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086e0:	f84e 3b04 	str.w	r3, [lr], #4
 80086e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086ec:	f8be 3000 	ldrh.w	r3, [lr]
 80086f0:	fb09 330a 	mla	r3, r9, sl, r3
 80086f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80086f8:	4562      	cmp	r2, ip
 80086fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086fe:	d8e5      	bhi.n	80086cc <__multiply+0x10c>
 8008700:	9f01      	ldr	r7, [sp, #4]
 8008702:	51eb      	str	r3, [r5, r7]
 8008704:	3504      	adds	r5, #4
 8008706:	e799      	b.n	800863c <__multiply+0x7c>
 8008708:	3e01      	subs	r6, #1
 800870a:	e79b      	b.n	8008644 <__multiply+0x84>
 800870c:	080098a0 	.word	0x080098a0
 8008710:	080098b1 	.word	0x080098b1

08008714 <__pow5mult>:
 8008714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008718:	4615      	mov	r5, r2
 800871a:	f012 0203 	ands.w	r2, r2, #3
 800871e:	4607      	mov	r7, r0
 8008720:	460e      	mov	r6, r1
 8008722:	d007      	beq.n	8008734 <__pow5mult+0x20>
 8008724:	4c25      	ldr	r4, [pc, #148]	@ (80087bc <__pow5mult+0xa8>)
 8008726:	3a01      	subs	r2, #1
 8008728:	2300      	movs	r3, #0
 800872a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800872e:	f7ff fe9f 	bl	8008470 <__multadd>
 8008732:	4606      	mov	r6, r0
 8008734:	10ad      	asrs	r5, r5, #2
 8008736:	d03d      	beq.n	80087b4 <__pow5mult+0xa0>
 8008738:	69fc      	ldr	r4, [r7, #28]
 800873a:	b97c      	cbnz	r4, 800875c <__pow5mult+0x48>
 800873c:	2010      	movs	r0, #16
 800873e:	f7fd ffe1 	bl	8006704 <malloc>
 8008742:	4602      	mov	r2, r0
 8008744:	61f8      	str	r0, [r7, #28]
 8008746:	b928      	cbnz	r0, 8008754 <__pow5mult+0x40>
 8008748:	4b1d      	ldr	r3, [pc, #116]	@ (80087c0 <__pow5mult+0xac>)
 800874a:	481e      	ldr	r0, [pc, #120]	@ (80087c4 <__pow5mult+0xb0>)
 800874c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008750:	f000 fc20 	bl	8008f94 <__assert_func>
 8008754:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008758:	6004      	str	r4, [r0, #0]
 800875a:	60c4      	str	r4, [r0, #12]
 800875c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008760:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008764:	b94c      	cbnz	r4, 800877a <__pow5mult+0x66>
 8008766:	f240 2171 	movw	r1, #625	@ 0x271
 800876a:	4638      	mov	r0, r7
 800876c:	f7ff ff12 	bl	8008594 <__i2b>
 8008770:	2300      	movs	r3, #0
 8008772:	f8c8 0008 	str.w	r0, [r8, #8]
 8008776:	4604      	mov	r4, r0
 8008778:	6003      	str	r3, [r0, #0]
 800877a:	f04f 0900 	mov.w	r9, #0
 800877e:	07eb      	lsls	r3, r5, #31
 8008780:	d50a      	bpl.n	8008798 <__pow5mult+0x84>
 8008782:	4631      	mov	r1, r6
 8008784:	4622      	mov	r2, r4
 8008786:	4638      	mov	r0, r7
 8008788:	f7ff ff1a 	bl	80085c0 <__multiply>
 800878c:	4631      	mov	r1, r6
 800878e:	4680      	mov	r8, r0
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff fe4b 	bl	800842c <_Bfree>
 8008796:	4646      	mov	r6, r8
 8008798:	106d      	asrs	r5, r5, #1
 800879a:	d00b      	beq.n	80087b4 <__pow5mult+0xa0>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	b938      	cbnz	r0, 80087b0 <__pow5mult+0x9c>
 80087a0:	4622      	mov	r2, r4
 80087a2:	4621      	mov	r1, r4
 80087a4:	4638      	mov	r0, r7
 80087a6:	f7ff ff0b 	bl	80085c0 <__multiply>
 80087aa:	6020      	str	r0, [r4, #0]
 80087ac:	f8c0 9000 	str.w	r9, [r0]
 80087b0:	4604      	mov	r4, r0
 80087b2:	e7e4      	b.n	800877e <__pow5mult+0x6a>
 80087b4:	4630      	mov	r0, r6
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	bf00      	nop
 80087bc:	0800990c 	.word	0x0800990c
 80087c0:	08009831 	.word	0x08009831
 80087c4:	080098b1 	.word	0x080098b1

080087c8 <__lshift>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	460c      	mov	r4, r1
 80087ce:	6849      	ldr	r1, [r1, #4]
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087d6:	68a3      	ldr	r3, [r4, #8]
 80087d8:	4607      	mov	r7, r0
 80087da:	4691      	mov	r9, r2
 80087dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087e0:	f108 0601 	add.w	r6, r8, #1
 80087e4:	42b3      	cmp	r3, r6
 80087e6:	db0b      	blt.n	8008800 <__lshift+0x38>
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff fddf 	bl	80083ac <_Balloc>
 80087ee:	4605      	mov	r5, r0
 80087f0:	b948      	cbnz	r0, 8008806 <__lshift+0x3e>
 80087f2:	4602      	mov	r2, r0
 80087f4:	4b28      	ldr	r3, [pc, #160]	@ (8008898 <__lshift+0xd0>)
 80087f6:	4829      	ldr	r0, [pc, #164]	@ (800889c <__lshift+0xd4>)
 80087f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087fc:	f000 fbca 	bl	8008f94 <__assert_func>
 8008800:	3101      	adds	r1, #1
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	e7ee      	b.n	80087e4 <__lshift+0x1c>
 8008806:	2300      	movs	r3, #0
 8008808:	f100 0114 	add.w	r1, r0, #20
 800880c:	f100 0210 	add.w	r2, r0, #16
 8008810:	4618      	mov	r0, r3
 8008812:	4553      	cmp	r3, sl
 8008814:	db33      	blt.n	800887e <__lshift+0xb6>
 8008816:	6920      	ldr	r0, [r4, #16]
 8008818:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800881c:	f104 0314 	add.w	r3, r4, #20
 8008820:	f019 091f 	ands.w	r9, r9, #31
 8008824:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008828:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800882c:	d02b      	beq.n	8008886 <__lshift+0xbe>
 800882e:	f1c9 0e20 	rsb	lr, r9, #32
 8008832:	468a      	mov	sl, r1
 8008834:	2200      	movs	r2, #0
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	fa00 f009 	lsl.w	r0, r0, r9
 800883c:	4310      	orrs	r0, r2
 800883e:	f84a 0b04 	str.w	r0, [sl], #4
 8008842:	f853 2b04 	ldr.w	r2, [r3], #4
 8008846:	459c      	cmp	ip, r3
 8008848:	fa22 f20e 	lsr.w	r2, r2, lr
 800884c:	d8f3      	bhi.n	8008836 <__lshift+0x6e>
 800884e:	ebac 0304 	sub.w	r3, ip, r4
 8008852:	3b15      	subs	r3, #21
 8008854:	f023 0303 	bic.w	r3, r3, #3
 8008858:	3304      	adds	r3, #4
 800885a:	f104 0015 	add.w	r0, r4, #21
 800885e:	4584      	cmp	ip, r0
 8008860:	bf38      	it	cc
 8008862:	2304      	movcc	r3, #4
 8008864:	50ca      	str	r2, [r1, r3]
 8008866:	b10a      	cbz	r2, 800886c <__lshift+0xa4>
 8008868:	f108 0602 	add.w	r6, r8, #2
 800886c:	3e01      	subs	r6, #1
 800886e:	4638      	mov	r0, r7
 8008870:	612e      	str	r6, [r5, #16]
 8008872:	4621      	mov	r1, r4
 8008874:	f7ff fdda 	bl	800842c <_Bfree>
 8008878:	4628      	mov	r0, r5
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008882:	3301      	adds	r3, #1
 8008884:	e7c5      	b.n	8008812 <__lshift+0x4a>
 8008886:	3904      	subs	r1, #4
 8008888:	f853 2b04 	ldr.w	r2, [r3], #4
 800888c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008890:	459c      	cmp	ip, r3
 8008892:	d8f9      	bhi.n	8008888 <__lshift+0xc0>
 8008894:	e7ea      	b.n	800886c <__lshift+0xa4>
 8008896:	bf00      	nop
 8008898:	080098a0 	.word	0x080098a0
 800889c:	080098b1 	.word	0x080098b1

080088a0 <__mcmp>:
 80088a0:	690a      	ldr	r2, [r1, #16]
 80088a2:	4603      	mov	r3, r0
 80088a4:	6900      	ldr	r0, [r0, #16]
 80088a6:	1a80      	subs	r0, r0, r2
 80088a8:	b530      	push	{r4, r5, lr}
 80088aa:	d10e      	bne.n	80088ca <__mcmp+0x2a>
 80088ac:	3314      	adds	r3, #20
 80088ae:	3114      	adds	r1, #20
 80088b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088c0:	4295      	cmp	r5, r2
 80088c2:	d003      	beq.n	80088cc <__mcmp+0x2c>
 80088c4:	d205      	bcs.n	80088d2 <__mcmp+0x32>
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	bd30      	pop	{r4, r5, pc}
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d3f3      	bcc.n	80088b8 <__mcmp+0x18>
 80088d0:	e7fb      	b.n	80088ca <__mcmp+0x2a>
 80088d2:	2001      	movs	r0, #1
 80088d4:	e7f9      	b.n	80088ca <__mcmp+0x2a>
	...

080088d8 <__mdiff>:
 80088d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	4689      	mov	r9, r1
 80088de:	4606      	mov	r6, r0
 80088e0:	4611      	mov	r1, r2
 80088e2:	4648      	mov	r0, r9
 80088e4:	4614      	mov	r4, r2
 80088e6:	f7ff ffdb 	bl	80088a0 <__mcmp>
 80088ea:	1e05      	subs	r5, r0, #0
 80088ec:	d112      	bne.n	8008914 <__mdiff+0x3c>
 80088ee:	4629      	mov	r1, r5
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff fd5b 	bl	80083ac <_Balloc>
 80088f6:	4602      	mov	r2, r0
 80088f8:	b928      	cbnz	r0, 8008906 <__mdiff+0x2e>
 80088fa:	4b3f      	ldr	r3, [pc, #252]	@ (80089f8 <__mdiff+0x120>)
 80088fc:	f240 2137 	movw	r1, #567	@ 0x237
 8008900:	483e      	ldr	r0, [pc, #248]	@ (80089fc <__mdiff+0x124>)
 8008902:	f000 fb47 	bl	8008f94 <__assert_func>
 8008906:	2301      	movs	r3, #1
 8008908:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800890c:	4610      	mov	r0, r2
 800890e:	b003      	add	sp, #12
 8008910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008914:	bfbc      	itt	lt
 8008916:	464b      	movlt	r3, r9
 8008918:	46a1      	movlt	r9, r4
 800891a:	4630      	mov	r0, r6
 800891c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008920:	bfba      	itte	lt
 8008922:	461c      	movlt	r4, r3
 8008924:	2501      	movlt	r5, #1
 8008926:	2500      	movge	r5, #0
 8008928:	f7ff fd40 	bl	80083ac <_Balloc>
 800892c:	4602      	mov	r2, r0
 800892e:	b918      	cbnz	r0, 8008938 <__mdiff+0x60>
 8008930:	4b31      	ldr	r3, [pc, #196]	@ (80089f8 <__mdiff+0x120>)
 8008932:	f240 2145 	movw	r1, #581	@ 0x245
 8008936:	e7e3      	b.n	8008900 <__mdiff+0x28>
 8008938:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800893c:	6926      	ldr	r6, [r4, #16]
 800893e:	60c5      	str	r5, [r0, #12]
 8008940:	f109 0310 	add.w	r3, r9, #16
 8008944:	f109 0514 	add.w	r5, r9, #20
 8008948:	f104 0e14 	add.w	lr, r4, #20
 800894c:	f100 0b14 	add.w	fp, r0, #20
 8008950:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008954:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	46d9      	mov	r9, fp
 800895c:	f04f 0c00 	mov.w	ip, #0
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008966:	f853 af04 	ldr.w	sl, [r3, #4]!
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	fa1f f38a 	uxth.w	r3, sl
 8008970:	4619      	mov	r1, r3
 8008972:	b283      	uxth	r3, r0
 8008974:	1acb      	subs	r3, r1, r3
 8008976:	0c00      	lsrs	r0, r0, #16
 8008978:	4463      	add	r3, ip
 800897a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800897e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008982:	b29b      	uxth	r3, r3
 8008984:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008988:	4576      	cmp	r6, lr
 800898a:	f849 3b04 	str.w	r3, [r9], #4
 800898e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008992:	d8e5      	bhi.n	8008960 <__mdiff+0x88>
 8008994:	1b33      	subs	r3, r6, r4
 8008996:	3b15      	subs	r3, #21
 8008998:	f023 0303 	bic.w	r3, r3, #3
 800899c:	3415      	adds	r4, #21
 800899e:	3304      	adds	r3, #4
 80089a0:	42a6      	cmp	r6, r4
 80089a2:	bf38      	it	cc
 80089a4:	2304      	movcc	r3, #4
 80089a6:	441d      	add	r5, r3
 80089a8:	445b      	add	r3, fp
 80089aa:	461e      	mov	r6, r3
 80089ac:	462c      	mov	r4, r5
 80089ae:	4544      	cmp	r4, r8
 80089b0:	d30e      	bcc.n	80089d0 <__mdiff+0xf8>
 80089b2:	f108 0103 	add.w	r1, r8, #3
 80089b6:	1b49      	subs	r1, r1, r5
 80089b8:	f021 0103 	bic.w	r1, r1, #3
 80089bc:	3d03      	subs	r5, #3
 80089be:	45a8      	cmp	r8, r5
 80089c0:	bf38      	it	cc
 80089c2:	2100      	movcc	r1, #0
 80089c4:	440b      	add	r3, r1
 80089c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089ca:	b191      	cbz	r1, 80089f2 <__mdiff+0x11a>
 80089cc:	6117      	str	r7, [r2, #16]
 80089ce:	e79d      	b.n	800890c <__mdiff+0x34>
 80089d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80089d4:	46e6      	mov	lr, ip
 80089d6:	0c08      	lsrs	r0, r1, #16
 80089d8:	fa1c fc81 	uxtah	ip, ip, r1
 80089dc:	4471      	add	r1, lr
 80089de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089e2:	b289      	uxth	r1, r1
 80089e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089e8:	f846 1b04 	str.w	r1, [r6], #4
 80089ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089f0:	e7dd      	b.n	80089ae <__mdiff+0xd6>
 80089f2:	3f01      	subs	r7, #1
 80089f4:	e7e7      	b.n	80089c6 <__mdiff+0xee>
 80089f6:	bf00      	nop
 80089f8:	080098a0 	.word	0x080098a0
 80089fc:	080098b1 	.word	0x080098b1

08008a00 <__d2b>:
 8008a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	460f      	mov	r7, r1
 8008a06:	2101      	movs	r1, #1
 8008a08:	ec59 8b10 	vmov	r8, r9, d0
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	f7ff fccd 	bl	80083ac <_Balloc>
 8008a12:	4604      	mov	r4, r0
 8008a14:	b930      	cbnz	r0, 8008a24 <__d2b+0x24>
 8008a16:	4602      	mov	r2, r0
 8008a18:	4b23      	ldr	r3, [pc, #140]	@ (8008aa8 <__d2b+0xa8>)
 8008a1a:	4824      	ldr	r0, [pc, #144]	@ (8008aac <__d2b+0xac>)
 8008a1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a20:	f000 fab8 	bl	8008f94 <__assert_func>
 8008a24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a2c:	b10d      	cbz	r5, 8008a32 <__d2b+0x32>
 8008a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f1b8 0300 	subs.w	r3, r8, #0
 8008a38:	d023      	beq.n	8008a82 <__d2b+0x82>
 8008a3a:	4668      	mov	r0, sp
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	f7ff fd7c 	bl	800853a <__lo0bits>
 8008a42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a46:	b1d0      	cbz	r0, 8008a7e <__d2b+0x7e>
 8008a48:	f1c0 0320 	rsb	r3, r0, #32
 8008a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a50:	430b      	orrs	r3, r1
 8008a52:	40c2      	lsrs	r2, r0
 8008a54:	6163      	str	r3, [r4, #20]
 8008a56:	9201      	str	r2, [sp, #4]
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	61a3      	str	r3, [r4, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bf0c      	ite	eq
 8008a60:	2201      	moveq	r2, #1
 8008a62:	2202      	movne	r2, #2
 8008a64:	6122      	str	r2, [r4, #16]
 8008a66:	b1a5      	cbz	r5, 8008a92 <__d2b+0x92>
 8008a68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a6c:	4405      	add	r5, r0
 8008a6e:	603d      	str	r5, [r7, #0]
 8008a70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a74:	6030      	str	r0, [r6, #0]
 8008a76:	4620      	mov	r0, r4
 8008a78:	b003      	add	sp, #12
 8008a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a7e:	6161      	str	r1, [r4, #20]
 8008a80:	e7ea      	b.n	8008a58 <__d2b+0x58>
 8008a82:	a801      	add	r0, sp, #4
 8008a84:	f7ff fd59 	bl	800853a <__lo0bits>
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	6163      	str	r3, [r4, #20]
 8008a8c:	3020      	adds	r0, #32
 8008a8e:	2201      	movs	r2, #1
 8008a90:	e7e8      	b.n	8008a64 <__d2b+0x64>
 8008a92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a9a:	6038      	str	r0, [r7, #0]
 8008a9c:	6918      	ldr	r0, [r3, #16]
 8008a9e:	f7ff fd2d 	bl	80084fc <__hi0bits>
 8008aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008aa6:	e7e5      	b.n	8008a74 <__d2b+0x74>
 8008aa8:	080098a0 	.word	0x080098a0
 8008aac:	080098b1 	.word	0x080098b1

08008ab0 <__sfputc_r>:
 8008ab0:	6893      	ldr	r3, [r2, #8]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	b410      	push	{r4}
 8008ab8:	6093      	str	r3, [r2, #8]
 8008aba:	da08      	bge.n	8008ace <__sfputc_r+0x1e>
 8008abc:	6994      	ldr	r4, [r2, #24]
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	db01      	blt.n	8008ac6 <__sfputc_r+0x16>
 8008ac2:	290a      	cmp	r1, #10
 8008ac4:	d103      	bne.n	8008ace <__sfputc_r+0x1e>
 8008ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aca:	f7fe bca6 	b.w	800741a <__swbuf_r>
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	1c58      	adds	r0, r3, #1
 8008ad2:	6010      	str	r0, [r2, #0]
 8008ad4:	7019      	strb	r1, [r3, #0]
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <__sfputs_r>:
 8008ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	460f      	mov	r7, r1
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	18d5      	adds	r5, r2, r3
 8008ae8:	42ac      	cmp	r4, r5
 8008aea:	d101      	bne.n	8008af0 <__sfputs_r+0x12>
 8008aec:	2000      	movs	r0, #0
 8008aee:	e007      	b.n	8008b00 <__sfputs_r+0x22>
 8008af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af4:	463a      	mov	r2, r7
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7ff ffda 	bl	8008ab0 <__sfputc_r>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d1f3      	bne.n	8008ae8 <__sfputs_r+0xa>
 8008b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b04 <_vfiprintf_r>:
 8008b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	460d      	mov	r5, r1
 8008b0a:	b09d      	sub	sp, #116	@ 0x74
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	4698      	mov	r8, r3
 8008b10:	4606      	mov	r6, r0
 8008b12:	b118      	cbz	r0, 8008b1c <_vfiprintf_r+0x18>
 8008b14:	6a03      	ldr	r3, [r0, #32]
 8008b16:	b90b      	cbnz	r3, 8008b1c <_vfiprintf_r+0x18>
 8008b18:	f7fe fb96 	bl	8007248 <__sinit>
 8008b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1e:	07d9      	lsls	r1, r3, #31
 8008b20:	d405      	bmi.n	8008b2e <_vfiprintf_r+0x2a>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_vfiprintf_r+0x2a>
 8008b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b2a:	f7fe fd98 	bl	800765e <__retarget_lock_acquire_recursive>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	071b      	lsls	r3, r3, #28
 8008b32:	d501      	bpl.n	8008b38 <_vfiprintf_r+0x34>
 8008b34:	692b      	ldr	r3, [r5, #16]
 8008b36:	b99b      	cbnz	r3, 8008b60 <_vfiprintf_r+0x5c>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7fe fcac 	bl	8007498 <__swsetup_r>
 8008b40:	b170      	cbz	r0, 8008b60 <_vfiprintf_r+0x5c>
 8008b42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b44:	07dc      	lsls	r4, r3, #31
 8008b46:	d504      	bpl.n	8008b52 <_vfiprintf_r+0x4e>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	b01d      	add	sp, #116	@ 0x74
 8008b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	0598      	lsls	r0, r3, #22
 8008b56:	d4f7      	bmi.n	8008b48 <_vfiprintf_r+0x44>
 8008b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b5a:	f7fe fd81 	bl	8007660 <__retarget_lock_release_recursive>
 8008b5e:	e7f3      	b.n	8008b48 <_vfiprintf_r+0x44>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b64:	2320      	movs	r3, #32
 8008b66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b6e:	2330      	movs	r3, #48	@ 0x30
 8008b70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d20 <_vfiprintf_r+0x21c>
 8008b74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b78:	f04f 0901 	mov.w	r9, #1
 8008b7c:	4623      	mov	r3, r4
 8008b7e:	469a      	mov	sl, r3
 8008b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b84:	b10a      	cbz	r2, 8008b8a <_vfiprintf_r+0x86>
 8008b86:	2a25      	cmp	r2, #37	@ 0x25
 8008b88:	d1f9      	bne.n	8008b7e <_vfiprintf_r+0x7a>
 8008b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b8e:	d00b      	beq.n	8008ba8 <_vfiprintf_r+0xa4>
 8008b90:	465b      	mov	r3, fp
 8008b92:	4622      	mov	r2, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ffa1 	bl	8008ade <__sfputs_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f000 80a7 	beq.w	8008cf0 <_vfiprintf_r+0x1ec>
 8008ba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba4:	445a      	add	r2, fp
 8008ba6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 809f 	beq.w	8008cf0 <_vfiprintf_r+0x1ec>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bbc:	f10a 0a01 	add.w	sl, sl, #1
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bca:	4654      	mov	r4, sl
 8008bcc:	2205      	movs	r2, #5
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	4853      	ldr	r0, [pc, #332]	@ (8008d20 <_vfiprintf_r+0x21c>)
 8008bd4:	f7f7 fb34 	bl	8000240 <memchr>
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	b9d8      	cbnz	r0, 8008c14 <_vfiprintf_r+0x110>
 8008bdc:	06d1      	lsls	r1, r2, #27
 8008bde:	bf44      	itt	mi
 8008be0:	2320      	movmi	r3, #32
 8008be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008be6:	0713      	lsls	r3, r2, #28
 8008be8:	bf44      	itt	mi
 8008bea:	232b      	movmi	r3, #43	@ 0x2b
 8008bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bf6:	d015      	beq.n	8008c24 <_vfiprintf_r+0x120>
 8008bf8:	9a07      	ldr	r2, [sp, #28]
 8008bfa:	4654      	mov	r4, sl
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f04f 0c0a 	mov.w	ip, #10
 8008c02:	4621      	mov	r1, r4
 8008c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c08:	3b30      	subs	r3, #48	@ 0x30
 8008c0a:	2b09      	cmp	r3, #9
 8008c0c:	d94b      	bls.n	8008ca6 <_vfiprintf_r+0x1a2>
 8008c0e:	b1b0      	cbz	r0, 8008c3e <_vfiprintf_r+0x13a>
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	e014      	b.n	8008c3e <_vfiprintf_r+0x13a>
 8008c14:	eba0 0308 	sub.w	r3, r0, r8
 8008c18:	fa09 f303 	lsl.w	r3, r9, r3
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	46a2      	mov	sl, r4
 8008c22:	e7d2      	b.n	8008bca <_vfiprintf_r+0xc6>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1d19      	adds	r1, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9103      	str	r1, [sp, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfbb      	ittet	lt
 8008c30:	425b      	neglt	r3, r3
 8008c32:	f042 0202 	orrlt.w	r2, r2, #2
 8008c36:	9307      	strge	r3, [sp, #28]
 8008c38:	9307      	strlt	r3, [sp, #28]
 8008c3a:	bfb8      	it	lt
 8008c3c:	9204      	strlt	r2, [sp, #16]
 8008c3e:	7823      	ldrb	r3, [r4, #0]
 8008c40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c42:	d10a      	bne.n	8008c5a <_vfiprintf_r+0x156>
 8008c44:	7863      	ldrb	r3, [r4, #1]
 8008c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c48:	d132      	bne.n	8008cb0 <_vfiprintf_r+0x1ac>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	9203      	str	r2, [sp, #12]
 8008c52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c56:	3402      	adds	r4, #2
 8008c58:	9305      	str	r3, [sp, #20]
 8008c5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d30 <_vfiprintf_r+0x22c>
 8008c5e:	7821      	ldrb	r1, [r4, #0]
 8008c60:	2203      	movs	r2, #3
 8008c62:	4650      	mov	r0, sl
 8008c64:	f7f7 faec 	bl	8000240 <memchr>
 8008c68:	b138      	cbz	r0, 8008c7a <_vfiprintf_r+0x176>
 8008c6a:	9b04      	ldr	r3, [sp, #16]
 8008c6c:	eba0 000a 	sub.w	r0, r0, sl
 8008c70:	2240      	movs	r2, #64	@ 0x40
 8008c72:	4082      	lsls	r2, r0
 8008c74:	4313      	orrs	r3, r2
 8008c76:	3401      	adds	r4, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7e:	4829      	ldr	r0, [pc, #164]	@ (8008d24 <_vfiprintf_r+0x220>)
 8008c80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c84:	2206      	movs	r2, #6
 8008c86:	f7f7 fadb 	bl	8000240 <memchr>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d03f      	beq.n	8008d0e <_vfiprintf_r+0x20a>
 8008c8e:	4b26      	ldr	r3, [pc, #152]	@ (8008d28 <_vfiprintf_r+0x224>)
 8008c90:	bb1b      	cbnz	r3, 8008cda <_vfiprintf_r+0x1d6>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	3307      	adds	r3, #7
 8008c96:	f023 0307 	bic.w	r3, r3, #7
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca0:	443b      	add	r3, r7
 8008ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca4:	e76a      	b.n	8008b7c <_vfiprintf_r+0x78>
 8008ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008caa:	460c      	mov	r4, r1
 8008cac:	2001      	movs	r0, #1
 8008cae:	e7a8      	b.n	8008c02 <_vfiprintf_r+0xfe>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	3401      	adds	r4, #1
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	f04f 0c0a 	mov.w	ip, #10
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc2:	3a30      	subs	r2, #48	@ 0x30
 8008cc4:	2a09      	cmp	r2, #9
 8008cc6:	d903      	bls.n	8008cd0 <_vfiprintf_r+0x1cc>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0c6      	beq.n	8008c5a <_vfiprintf_r+0x156>
 8008ccc:	9105      	str	r1, [sp, #20]
 8008cce:	e7c4      	b.n	8008c5a <_vfiprintf_r+0x156>
 8008cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e7f0      	b.n	8008cbc <_vfiprintf_r+0x1b8>
 8008cda:	ab03      	add	r3, sp, #12
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	462a      	mov	r2, r5
 8008ce0:	4b12      	ldr	r3, [pc, #72]	@ (8008d2c <_vfiprintf_r+0x228>)
 8008ce2:	a904      	add	r1, sp, #16
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7fd fe6b 	bl	80069c0 <_printf_float>
 8008cea:	4607      	mov	r7, r0
 8008cec:	1c78      	adds	r0, r7, #1
 8008cee:	d1d6      	bne.n	8008c9e <_vfiprintf_r+0x19a>
 8008cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	d405      	bmi.n	8008d02 <_vfiprintf_r+0x1fe>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	059a      	lsls	r2, r3, #22
 8008cfa:	d402      	bmi.n	8008d02 <_vfiprintf_r+0x1fe>
 8008cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cfe:	f7fe fcaf 	bl	8007660 <__retarget_lock_release_recursive>
 8008d02:	89ab      	ldrh	r3, [r5, #12]
 8008d04:	065b      	lsls	r3, r3, #25
 8008d06:	f53f af1f 	bmi.w	8008b48 <_vfiprintf_r+0x44>
 8008d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d0c:	e71e      	b.n	8008b4c <_vfiprintf_r+0x48>
 8008d0e:	ab03      	add	r3, sp, #12
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	462a      	mov	r2, r5
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <_vfiprintf_r+0x228>)
 8008d16:	a904      	add	r1, sp, #16
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7fe f8e9 	bl	8006ef0 <_printf_i>
 8008d1e:	e7e4      	b.n	8008cea <_vfiprintf_r+0x1e6>
 8008d20:	08009a08 	.word	0x08009a08
 8008d24:	08009a12 	.word	0x08009a12
 8008d28:	080069c1 	.word	0x080069c1
 8008d2c:	08008adf 	.word	0x08008adf
 8008d30:	08009a0e 	.word	0x08009a0e

08008d34 <__sflush_r>:
 8008d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3c:	0716      	lsls	r6, r2, #28
 8008d3e:	4605      	mov	r5, r0
 8008d40:	460c      	mov	r4, r1
 8008d42:	d454      	bmi.n	8008dee <__sflush_r+0xba>
 8008d44:	684b      	ldr	r3, [r1, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dc02      	bgt.n	8008d50 <__sflush_r+0x1c>
 8008d4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dd48      	ble.n	8008de2 <__sflush_r+0xae>
 8008d50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d045      	beq.n	8008de2 <__sflush_r+0xae>
 8008d56:	2300      	movs	r3, #0
 8008d58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d5c:	682f      	ldr	r7, [r5, #0]
 8008d5e:	6a21      	ldr	r1, [r4, #32]
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	d030      	beq.n	8008dc6 <__sflush_r+0x92>
 8008d64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	0759      	lsls	r1, r3, #29
 8008d6a:	d505      	bpl.n	8008d78 <__sflush_r+0x44>
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d72:	b10b      	cbz	r3, 8008d78 <__sflush_r+0x44>
 8008d74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d7c:	6a21      	ldr	r1, [r4, #32]
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b0      	blx	r6
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	d106      	bne.n	8008d96 <__sflush_r+0x62>
 8008d88:	6829      	ldr	r1, [r5, #0]
 8008d8a:	291d      	cmp	r1, #29
 8008d8c:	d82b      	bhi.n	8008de6 <__sflush_r+0xb2>
 8008d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e38 <__sflush_r+0x104>)
 8008d90:	410a      	asrs	r2, r1
 8008d92:	07d6      	lsls	r6, r2, #31
 8008d94:	d427      	bmi.n	8008de6 <__sflush_r+0xb2>
 8008d96:	2200      	movs	r2, #0
 8008d98:	6062      	str	r2, [r4, #4]
 8008d9a:	04d9      	lsls	r1, r3, #19
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	d504      	bpl.n	8008dac <__sflush_r+0x78>
 8008da2:	1c42      	adds	r2, r0, #1
 8008da4:	d101      	bne.n	8008daa <__sflush_r+0x76>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	b903      	cbnz	r3, 8008dac <__sflush_r+0x78>
 8008daa:	6560      	str	r0, [r4, #84]	@ 0x54
 8008dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dae:	602f      	str	r7, [r5, #0]
 8008db0:	b1b9      	cbz	r1, 8008de2 <__sflush_r+0xae>
 8008db2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008db6:	4299      	cmp	r1, r3
 8008db8:	d002      	beq.n	8008dc0 <__sflush_r+0x8c>
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f7ff faac 	bl	8008318 <_free_r>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dc4:	e00d      	b.n	8008de2 <__sflush_r+0xae>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b0      	blx	r6
 8008dcc:	4602      	mov	r2, r0
 8008dce:	1c50      	adds	r0, r2, #1
 8008dd0:	d1c9      	bne.n	8008d66 <__sflush_r+0x32>
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d0c6      	beq.n	8008d66 <__sflush_r+0x32>
 8008dd8:	2b1d      	cmp	r3, #29
 8008dda:	d001      	beq.n	8008de0 <__sflush_r+0xac>
 8008ddc:	2b16      	cmp	r3, #22
 8008dde:	d11e      	bne.n	8008e1e <__sflush_r+0xea>
 8008de0:	602f      	str	r7, [r5, #0]
 8008de2:	2000      	movs	r0, #0
 8008de4:	e022      	b.n	8008e2c <__sflush_r+0xf8>
 8008de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dea:	b21b      	sxth	r3, r3
 8008dec:	e01b      	b.n	8008e26 <__sflush_r+0xf2>
 8008dee:	690f      	ldr	r7, [r1, #16]
 8008df0:	2f00      	cmp	r7, #0
 8008df2:	d0f6      	beq.n	8008de2 <__sflush_r+0xae>
 8008df4:	0793      	lsls	r3, r2, #30
 8008df6:	680e      	ldr	r6, [r1, #0]
 8008df8:	bf08      	it	eq
 8008dfa:	694b      	ldreq	r3, [r1, #20]
 8008dfc:	600f      	str	r7, [r1, #0]
 8008dfe:	bf18      	it	ne
 8008e00:	2300      	movne	r3, #0
 8008e02:	eba6 0807 	sub.w	r8, r6, r7
 8008e06:	608b      	str	r3, [r1, #8]
 8008e08:	f1b8 0f00 	cmp.w	r8, #0
 8008e0c:	dde9      	ble.n	8008de2 <__sflush_r+0xae>
 8008e0e:	6a21      	ldr	r1, [r4, #32]
 8008e10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e12:	4643      	mov	r3, r8
 8008e14:	463a      	mov	r2, r7
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b0      	blx	r6
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	dc08      	bgt.n	8008e30 <__sflush_r+0xfc>
 8008e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e26:	81a3      	strh	r3, [r4, #12]
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e30:	4407      	add	r7, r0
 8008e32:	eba8 0800 	sub.w	r8, r8, r0
 8008e36:	e7e7      	b.n	8008e08 <__sflush_r+0xd4>
 8008e38:	dfbffffe 	.word	0xdfbffffe

08008e3c <_fflush_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	4605      	mov	r5, r0
 8008e42:	460c      	mov	r4, r1
 8008e44:	b913      	cbnz	r3, 8008e4c <_fflush_r+0x10>
 8008e46:	2500      	movs	r5, #0
 8008e48:	4628      	mov	r0, r5
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	b118      	cbz	r0, 8008e56 <_fflush_r+0x1a>
 8008e4e:	6a03      	ldr	r3, [r0, #32]
 8008e50:	b90b      	cbnz	r3, 8008e56 <_fflush_r+0x1a>
 8008e52:	f7fe f9f9 	bl	8007248 <__sinit>
 8008e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0f3      	beq.n	8008e46 <_fflush_r+0xa>
 8008e5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e60:	07d0      	lsls	r0, r2, #31
 8008e62:	d404      	bmi.n	8008e6e <_fflush_r+0x32>
 8008e64:	0599      	lsls	r1, r3, #22
 8008e66:	d402      	bmi.n	8008e6e <_fflush_r+0x32>
 8008e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e6a:	f7fe fbf8 	bl	800765e <__retarget_lock_acquire_recursive>
 8008e6e:	4628      	mov	r0, r5
 8008e70:	4621      	mov	r1, r4
 8008e72:	f7ff ff5f 	bl	8008d34 <__sflush_r>
 8008e76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e78:	07da      	lsls	r2, r3, #31
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	d4e4      	bmi.n	8008e48 <_fflush_r+0xc>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	059b      	lsls	r3, r3, #22
 8008e82:	d4e1      	bmi.n	8008e48 <_fflush_r+0xc>
 8008e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e86:	f7fe fbeb 	bl	8007660 <__retarget_lock_release_recursive>
 8008e8a:	e7dd      	b.n	8008e48 <_fflush_r+0xc>

08008e8c <__swhatbuf_r>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	460c      	mov	r4, r1
 8008e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e94:	2900      	cmp	r1, #0
 8008e96:	b096      	sub	sp, #88	@ 0x58
 8008e98:	4615      	mov	r5, r2
 8008e9a:	461e      	mov	r6, r3
 8008e9c:	da0d      	bge.n	8008eba <__swhatbuf_r+0x2e>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ea4:	f04f 0100 	mov.w	r1, #0
 8008ea8:	bf14      	ite	ne
 8008eaa:	2340      	movne	r3, #64	@ 0x40
 8008eac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	6031      	str	r1, [r6, #0]
 8008eb4:	602b      	str	r3, [r5, #0]
 8008eb6:	b016      	add	sp, #88	@ 0x58
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	466a      	mov	r2, sp
 8008ebc:	f000 f848 	bl	8008f50 <_fstat_r>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	dbec      	blt.n	8008e9e <__swhatbuf_r+0x12>
 8008ec4:	9901      	ldr	r1, [sp, #4]
 8008ec6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008eca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ece:	4259      	negs	r1, r3
 8008ed0:	4159      	adcs	r1, r3
 8008ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ed6:	e7eb      	b.n	8008eb0 <__swhatbuf_r+0x24>

08008ed8 <__smakebuf_r>:
 8008ed8:	898b      	ldrh	r3, [r1, #12]
 8008eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008edc:	079d      	lsls	r5, r3, #30
 8008ede:	4606      	mov	r6, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	d507      	bpl.n	8008ef4 <__smakebuf_r+0x1c>
 8008ee4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	2301      	movs	r3, #1
 8008eee:	6163      	str	r3, [r4, #20]
 8008ef0:	b003      	add	sp, #12
 8008ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef4:	ab01      	add	r3, sp, #4
 8008ef6:	466a      	mov	r2, sp
 8008ef8:	f7ff ffc8 	bl	8008e8c <__swhatbuf_r>
 8008efc:	9f00      	ldr	r7, [sp, #0]
 8008efe:	4605      	mov	r5, r0
 8008f00:	4639      	mov	r1, r7
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7fd fc30 	bl	8006768 <_malloc_r>
 8008f08:	b948      	cbnz	r0, 8008f1e <__smakebuf_r+0x46>
 8008f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f0e:	059a      	lsls	r2, r3, #22
 8008f10:	d4ee      	bmi.n	8008ef0 <__smakebuf_r+0x18>
 8008f12:	f023 0303 	bic.w	r3, r3, #3
 8008f16:	f043 0302 	orr.w	r3, r3, #2
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	e7e2      	b.n	8008ee4 <__smakebuf_r+0xc>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	6020      	str	r0, [r4, #0]
 8008f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f26:	81a3      	strh	r3, [r4, #12]
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f2e:	b15b      	cbz	r3, 8008f48 <__smakebuf_r+0x70>
 8008f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f34:	4630      	mov	r0, r6
 8008f36:	f000 f81d 	bl	8008f74 <_isatty_r>
 8008f3a:	b128      	cbz	r0, 8008f48 <__smakebuf_r+0x70>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	f043 0301 	orr.w	r3, r3, #1
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	431d      	orrs	r5, r3
 8008f4c:	81a5      	strh	r5, [r4, #12]
 8008f4e:	e7cf      	b.n	8008ef0 <__smakebuf_r+0x18>

08008f50 <_fstat_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d07      	ldr	r5, [pc, #28]	@ (8008f70 <_fstat_r+0x20>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	602b      	str	r3, [r5, #0]
 8008f5e:	f7f8 fbbd 	bl	80016dc <_fstat>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d102      	bne.n	8008f6c <_fstat_r+0x1c>
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	b103      	cbz	r3, 8008f6c <_fstat_r+0x1c>
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	bd38      	pop	{r3, r4, r5, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000418 	.word	0x20000418

08008f74 <_isatty_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4d06      	ldr	r5, [pc, #24]	@ (8008f90 <_isatty_r+0x1c>)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	f7f8 fbbc 	bl	80016fc <_isatty>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_isatty_r+0x1a>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_isatty_r+0x1a>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	20000418 	.word	0x20000418

08008f94 <__assert_func>:
 8008f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f96:	4614      	mov	r4, r2
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4b09      	ldr	r3, [pc, #36]	@ (8008fc0 <__assert_func+0x2c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	68d8      	ldr	r0, [r3, #12]
 8008fa2:	b954      	cbnz	r4, 8008fba <__assert_func+0x26>
 8008fa4:	4b07      	ldr	r3, [pc, #28]	@ (8008fc4 <__assert_func+0x30>)
 8008fa6:	461c      	mov	r4, r3
 8008fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fac:	9100      	str	r1, [sp, #0]
 8008fae:	462b      	mov	r3, r5
 8008fb0:	4905      	ldr	r1, [pc, #20]	@ (8008fc8 <__assert_func+0x34>)
 8008fb2:	f000 f841 	bl	8009038 <fiprintf>
 8008fb6:	f000 f851 	bl	800905c <abort>
 8008fba:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <__assert_func+0x38>)
 8008fbc:	e7f4      	b.n	8008fa8 <__assert_func+0x14>
 8008fbe:	bf00      	nop
 8008fc0:	2000002c 	.word	0x2000002c
 8008fc4:	08009a5e 	.word	0x08009a5e
 8008fc8:	08009a30 	.word	0x08009a30
 8008fcc:	08009a23 	.word	0x08009a23

08008fd0 <_calloc_r>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	fba1 5402 	umull	r5, r4, r1, r2
 8008fd6:	b93c      	cbnz	r4, 8008fe8 <_calloc_r+0x18>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7fd fbc5 	bl	8006768 <_malloc_r>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	b928      	cbnz	r0, 8008fee <_calloc_r+0x1e>
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	220c      	movs	r2, #12
 8008fea:	6002      	str	r2, [r0, #0]
 8008fec:	e7f9      	b.n	8008fe2 <_calloc_r+0x12>
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	f7fe faa7 	bl	8007544 <memset>
 8008ff6:	e7f5      	b.n	8008fe4 <_calloc_r+0x14>

08008ff8 <__ascii_mbtowc>:
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	b901      	cbnz	r1, 8008ffe <__ascii_mbtowc+0x6>
 8008ffc:	a901      	add	r1, sp, #4
 8008ffe:	b142      	cbz	r2, 8009012 <__ascii_mbtowc+0x1a>
 8009000:	b14b      	cbz	r3, 8009016 <__ascii_mbtowc+0x1e>
 8009002:	7813      	ldrb	r3, [r2, #0]
 8009004:	600b      	str	r3, [r1, #0]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	1e10      	subs	r0, r2, #0
 800900a:	bf18      	it	ne
 800900c:	2001      	movne	r0, #1
 800900e:	b002      	add	sp, #8
 8009010:	4770      	bx	lr
 8009012:	4610      	mov	r0, r2
 8009014:	e7fb      	b.n	800900e <__ascii_mbtowc+0x16>
 8009016:	f06f 0001 	mvn.w	r0, #1
 800901a:	e7f8      	b.n	800900e <__ascii_mbtowc+0x16>

0800901c <__ascii_wctomb>:
 800901c:	4603      	mov	r3, r0
 800901e:	4608      	mov	r0, r1
 8009020:	b141      	cbz	r1, 8009034 <__ascii_wctomb+0x18>
 8009022:	2aff      	cmp	r2, #255	@ 0xff
 8009024:	d904      	bls.n	8009030 <__ascii_wctomb+0x14>
 8009026:	228a      	movs	r2, #138	@ 0x8a
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	f04f 30ff 	mov.w	r0, #4294967295
 800902e:	4770      	bx	lr
 8009030:	700a      	strb	r2, [r1, #0]
 8009032:	2001      	movs	r0, #1
 8009034:	4770      	bx	lr
	...

08009038 <fiprintf>:
 8009038:	b40e      	push	{r1, r2, r3}
 800903a:	b503      	push	{r0, r1, lr}
 800903c:	4601      	mov	r1, r0
 800903e:	ab03      	add	r3, sp, #12
 8009040:	4805      	ldr	r0, [pc, #20]	@ (8009058 <fiprintf+0x20>)
 8009042:	f853 2b04 	ldr.w	r2, [r3], #4
 8009046:	6800      	ldr	r0, [r0, #0]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	f7ff fd5b 	bl	8008b04 <_vfiprintf_r>
 800904e:	b002      	add	sp, #8
 8009050:	f85d eb04 	ldr.w	lr, [sp], #4
 8009054:	b003      	add	sp, #12
 8009056:	4770      	bx	lr
 8009058:	2000002c 	.word	0x2000002c

0800905c <abort>:
 800905c:	b508      	push	{r3, lr}
 800905e:	2006      	movs	r0, #6
 8009060:	f000 f82c 	bl	80090bc <raise>
 8009064:	2001      	movs	r0, #1
 8009066:	f7f8 fae9 	bl	800163c <_exit>

0800906a <_raise_r>:
 800906a:	291f      	cmp	r1, #31
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4605      	mov	r5, r0
 8009070:	460c      	mov	r4, r1
 8009072:	d904      	bls.n	800907e <_raise_r+0x14>
 8009074:	2316      	movs	r3, #22
 8009076:	6003      	str	r3, [r0, #0]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009080:	b112      	cbz	r2, 8009088 <_raise_r+0x1e>
 8009082:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009086:	b94b      	cbnz	r3, 800909c <_raise_r+0x32>
 8009088:	4628      	mov	r0, r5
 800908a:	f000 f831 	bl	80090f0 <_getpid_r>
 800908e:	4622      	mov	r2, r4
 8009090:	4601      	mov	r1, r0
 8009092:	4628      	mov	r0, r5
 8009094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009098:	f000 b818 	b.w	80090cc <_kill_r>
 800909c:	2b01      	cmp	r3, #1
 800909e:	d00a      	beq.n	80090b6 <_raise_r+0x4c>
 80090a0:	1c59      	adds	r1, r3, #1
 80090a2:	d103      	bne.n	80090ac <_raise_r+0x42>
 80090a4:	2316      	movs	r3, #22
 80090a6:	6003      	str	r3, [r0, #0]
 80090a8:	2001      	movs	r0, #1
 80090aa:	e7e7      	b.n	800907c <_raise_r+0x12>
 80090ac:	2100      	movs	r1, #0
 80090ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090b2:	4620      	mov	r0, r4
 80090b4:	4798      	blx	r3
 80090b6:	2000      	movs	r0, #0
 80090b8:	e7e0      	b.n	800907c <_raise_r+0x12>
	...

080090bc <raise>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	@ (80090c8 <raise+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f7ff bfd2 	b.w	800906a <_raise_r>
 80090c6:	bf00      	nop
 80090c8:	2000002c 	.word	0x2000002c

080090cc <_kill_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d07      	ldr	r5, [pc, #28]	@ (80090ec <_kill_r+0x20>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	4611      	mov	r1, r2
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	f7f8 fa9f 	bl	800161c <_kill>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	d102      	bne.n	80090e8 <_kill_r+0x1c>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	b103      	cbz	r3, 80090e8 <_kill_r+0x1c>
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	bd38      	pop	{r3, r4, r5, pc}
 80090ea:	bf00      	nop
 80090ec:	20000418 	.word	0x20000418

080090f0 <_getpid_r>:
 80090f0:	f7f8 ba8c 	b.w	800160c <_getpid>

080090f4 <_init>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	bf00      	nop
 80090f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fa:	bc08      	pop	{r3}
 80090fc:	469e      	mov	lr, r3
 80090fe:	4770      	bx	lr

08009100 <_fini>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr
