
IM1281_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08008344  08008344  00009344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008988  08008988  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008988  08008988  00009988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008990  08008990  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008998  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08008a00  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08008a00  0000a36c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dce  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003697  00000000  00000000  00021e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00025500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc7  00000000  00000000  00026978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296c2  00000000  00000000  0002793f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a794  00000000  00000000  00051001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073a2  00000000  00000000  0006b795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172b37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b3c  00000000  00000000  00172b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001786b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800832c 	.word	0x0800832c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800832c 	.word	0x0800832c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_COMP1_Init+0x44>)
 800050e:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <MX_COMP1_Init+0x48>)
 8000510:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_COMP1_Init+0x44>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_COMP1_Init+0x44>)
 800051a:	2250      	movs	r2, #80	@ 0x50
 800051c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800051e:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_COMP1_Init+0x44>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_COMP1_Init+0x44>)
 8000526:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800052a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <MX_COMP1_Init+0x44>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_COMP1_Init+0x44>)
 8000534:	2231      	movs	r2, #49	@ 0x31
 8000536:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <MX_COMP1_Init+0x44>)
 800053a:	f001 faff 	bl	8001b3c <HAL_COMP_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8000544:	f000 fa6a 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000084 	.word	0x20000084
 8000550:	40010200 	.word	0x40010200

08000554 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <HAL_COMP_MspInit+0x90>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d131      	bne.n	80005da <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <HAL_COMP_MspInit+0x94>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a1b      	ldr	r2, [pc, #108]	@ (80005e8 <HAL_COMP_MspInit+0x94>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <HAL_COMP_MspInit+0x94>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA0     ------> COMP1_OUT
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800058e:	2301      	movs	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 800059e:	2308      	movs	r3, #8
 80005a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f002 f970 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c6:	f002 f963 	bl	8002890 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2040      	movs	r0, #64	@ 0x40
 80005d0:	f001 fdf5 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80005d4:	2040      	movs	r0, #64	@ 0x40
 80005d6:	f001 fe0c 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010200 	.word	0x40010200
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2230      	movs	r2, #48	@ 0x30
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 fc91 	bl	8007f20 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005fe:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <MX_DAC1_Init+0x6c>)
 8000600:	4a16      	ldr	r2, [pc, #88]	@ (800065c <MX_DAC1_Init+0x70>)
 8000602:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000604:	4814      	ldr	r0, [pc, #80]	@ (8000658 <MX_DAC1_Init+0x6c>)
 8000606:	f001 fe0e 	bl	8002226 <HAL_DAC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000610:	f000 fa04 	bl	8000a1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000614:	2302      	movs	r3, #2
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000630:	2304      	movs	r3, #4
 8000632:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <MX_DAC1_Init+0x6c>)
 8000640:	f001 feae 	bl	80023a0 <HAL_DAC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800064a:	f000 f9e7 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3730      	adds	r7, #48	@ 0x30
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000a8 	.word	0x200000a8
 800065c:	50000800 	.word	0x50000800

08000660 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_DAC_MspInit+0x74>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d124      	bne.n	80006cc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HAL_DAC_MspInit+0x78>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <HAL_DAC_MspInit+0x78>)
 8000688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_DAC_MspInit+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_DAC_MspInit+0x78>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <HAL_DAC_MspInit+0x78>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <HAL_DAC_MspInit+0x78>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006b2:	2310      	movs	r3, #16
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f002 f8e2 	bl	8002890 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	@ 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	50000800 	.word	0x50000800
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_GPIO_Init+0xa8>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a23      	ldr	r2, [pc, #140]	@ (8000784 <MX_GPIO_Init+0xa8>)
 80006f8:	f043 0320 	orr.w	r3, r3, #32
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_GPIO_Init+0xa8>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a1d      	ldr	r2, [pc, #116]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_GPIO_Init+0xa8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_GPIO_Init+0xa8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075a:	f002 fa1b 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800075e:	2320      	movs	r3, #32
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f002 f88a 	bl	8002890 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	@ 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000796:	2201      	movs	r2, #1
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <__io_putchar+0x20>)
 800079a:	f005 f81b 	bl	80057d4 <HAL_UART_Transmit>
	return ch;
 800079e:	687b      	ldr	r3, [r7, #4]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000015c 	.word	0x2000015c

080007ac <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	if(hcomp==&hcomp1){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_COMP_TriggerCallback+0x2c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d109      	bne.n	80007d0 <HAL_COMP_TriggerCallback+0x24>
        __HAL_TIM_SET_COUNTER(&htim2, 0); // 将定时器计数器设置为 0
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <HAL_COMP_TriggerCallback+0x30>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Base_Start_IT(&htim2);
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <HAL_COMP_TriggerCallback+0x30>)
 80007c6:	f003 fb1d 	bl	8003e04 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start(&htim2);
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <HAL_COMP_TriggerCallback+0x30>)
 80007cc:	f003 fa82 	bl	8003cd4 <HAL_TIM_Base_Start>
	}
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000084 	.word	0x20000084
 80007dc:	20000110 	.word	0x20000110

080007e0 <HAL_TIM_PeriodElapsedCallback>:

// 更新回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d132      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x76>
        HAL_TIM_Base_Stop(&htim2);
 80007f0:	481b      	ldr	r0, [pc, #108]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007f2:	f003 fadf 	bl	8003db4 <HAL_TIM_Base_Stop>
		if(HAL_COMP_GetOutputLevel(&hcomp1)==COMP_OUTPUT_LEVEL_HIGH){//判断为上升沿
 80007f6:	481b      	ldr	r0, [pc, #108]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007f8:	f001 fbf6 	bl	8001fe8 <HAL_COMP_GetOutputLevel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d111      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f002 f9c3 	bl	8002b94 <HAL_GPIO_WritePin>
			TIM1->CCR1=zkb;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000810:	edd3 7a00 	vldr	s15, [r3]
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800081a:	ee17 2a90 	vmov	r2, s15
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2=0;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000822:	2200      	movs	r2, #0
 8000824:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		if(HAL_COMP_GetOutputLevel(&hcomp1)==COMP_OUTPUT_LEVEL_LOW){//判断为上升沿
 8000826:	480f      	ldr	r0, [pc, #60]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000828:	f001 fbde 	bl	8001fe8 <HAL_COMP_GetOutputLevel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d111      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x76>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083a:	f002 f9ab 	bl	8002b94 <HAL_GPIO_WritePin>
			TIM1->CCR1=0;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2=zkb;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800084c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000850:	ee17 2a90 	vmov	r2, s15
 8000854:	639a      	str	r2, [r3, #56]	@ 0x38
		}
    }
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000110 	.word	0x20000110
 8000864:	20000084 	.word	0x20000084
 8000868:	200000bc 	.word	0x200000bc
 800086c:	40012c00 	.word	0x40012c00

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 ff52 	bl	800171e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f883 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff2d 	bl	80006dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000882:	f000 fe55 	bl	8001530 <MX_USART1_UART_Init>
  MX_COMP1_Init();
 8000886:	f7ff fe3f 	bl	8000508 <MX_COMP1_Init>
  MX_DAC1_Init();
 800088a:	f7ff feaf 	bl	80005ec <MX_DAC1_Init>
  MX_TIM1_Init();
 800088e:	f000 fc8d 	bl	80011ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000892:	f000 fd4d 	bl	8001330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000896:	f000 fa83 	bl	8000da0 <OLED_Init>
  OLED_Clear();
 800089a:	f000 f94d 	bl	8000b38 <OLED_Clear>
  OLED_ShowString(0, 0, "IM1281_demo");
 800089e:	4a2e      	ldr	r2, [pc, #184]	@ (8000958 <main+0xe8>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 fa4e 	bl	8000d44 <OLED_ShowString>
  printf("start\n");
 80008a8:	482c      	ldr	r0, [pc, #176]	@ (800095c <main+0xec>)
 80008aa:	f007 fa59 	bl	8007d60 <puts>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, g_vofa_rx_buffer, VOFA_FRAME_RECEIVE_MAX_LENGTH);
 80008ae:	2228      	movs	r2, #40	@ 0x28
 80008b0:	492b      	ldr	r1, [pc, #172]	@ (8000960 <main+0xf0>)
 80008b2:	482c      	ldr	r0, [pc, #176]	@ (8000964 <main+0xf4>)
 80008b4:	f006 ffef 	bl	8007896 <HAL_UARTEx_ReceiveToIdle_IT>
  uint32_t VOLTAGE_COMP=2050;
 80008b8:	f640 0302 	movw	r3, #2050	@ 0x802
 80008bc:	607b      	str	r3, [r7, #4]
  HAL_COMP_Start(&hcomp1);
 80008be:	482a      	ldr	r0, [pc, #168]	@ (8000968 <main+0xf8>)
 80008c0:	f001 fad6 	bl	8001e70 <HAL_COMP_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, VOLTAGE_COMP);//DAC输出1.43V电压
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	4828      	ldr	r0, [pc, #160]	@ (800096c <main+0xfc>)
 80008cc:	f001 fd3a 	bl	8002344 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);//启动DAC1
 80008d0:	2100      	movs	r1, #0
 80008d2:	4826      	ldr	r0, [pc, #152]	@ (800096c <main+0xfc>)
 80008d4:	f001 fcca 	bl	800226c <HAL_DAC_Start>

  HAL_TIM_Base_Start(&htim1);
 80008d8:	4825      	ldr	r0, [pc, #148]	@ (8000970 <main+0x100>)
 80008da:	f003 f9fb 	bl	8003cd4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80008de:	2100      	movs	r1, #0
 80008e0:	4823      	ldr	r0, [pc, #140]	@ (8000970 <main+0x100>)
 80008e2:	f003 fb69 	bl	8003fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80008e6:	2104      	movs	r1, #4
 80008e8:	4821      	ldr	r0, [pc, #132]	@ (8000970 <main+0x100>)
 80008ea:	f003 fb65 	bl	8003fb8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	481f      	ldr	r0, [pc, #124]	@ (8000970 <main+0x100>)
 80008f2:	f004 fcb5 	bl	8005260 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80008f6:	2104      	movs	r1, #4
 80008f8:	481d      	ldr	r0, [pc, #116]	@ (8000970 <main+0x100>)
 80008fa:	f004 fcb1 	bl	8005260 <HAL_TIMEx_PWMN_Start>
  zkb=100;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <main+0x104>)
 8000900:	4a1d      	ldr	r2, [pc, #116]	@ (8000978 <main+0x108>)
 8000902:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Vofa_Test();
	  zkb+=80;
 8000904:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <main+0x104>)
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800097c <main+0x10c>
 800090e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <main+0x104>)
 8000914:	edc3 7a00 	vstr	s15, [r3]
	  if(zkb>=1000)
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <main+0x104>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000980 <main+0x110>
 8000922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092a:	db02      	blt.n	8000932 <main+0xc2>
		  zkb=100;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <main+0x104>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <main+0x108>)
 8000930:	601a      	str	r2, [r3, #0]
	  OLED_ShowNum(0, 2, zkb, 4, 16);
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <main+0x104>)
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093c:	2310      	movs	r3, #16
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2304      	movs	r3, #4
 8000942:	ee17 2a90 	vmov	r2, s15
 8000946:	2102      	movs	r1, #2
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f995 	bl	8000c78 <OLED_ShowNum>
	  HAL_Delay(2000);
 800094e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000952:	f000 ff55 	bl	8001800 <HAL_Delay>
	  zkb+=80;
 8000956:	e7d5      	b.n	8000904 <main+0x94>
 8000958:	08008344 	.word	0x08008344
 800095c:	08008350 	.word	0x08008350
 8000960:	200001f0 	.word	0x200001f0
 8000964:	2000015c 	.word	0x2000015c
 8000968:	20000084 	.word	0x20000084
 800096c:	200000a8 	.word	0x200000a8
 8000970:	200000c4 	.word	0x200000c4
 8000974:	200000bc 	.word	0x200000bc
 8000978:	42c80000 	.word	0x42c80000
 800097c:	42a00000 	.word	0x42a00000
 8000980:	447a0000 	.word	0x447a0000

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	@ 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2238      	movs	r2, #56	@ 0x38
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f007 fac4 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009aa:	f002 f90b 	bl	8002bc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80009c8:	2319      	movs	r3, #25
 80009ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 f9a5 	bl	8002d2c <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009e8:	f000 f818 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2103      	movs	r1, #3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fca3 	bl	8003350 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a10:	f000 f804 	bl	8000a1c <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3750      	adds	r7, #80	@ 0x50
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <OLED_WR_Byte>:
#include "oledfont.h"  
//��SSD1106д��һ���ֽڡ�
//dat:Ҫд�������/����
//cmd:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <OLED_WR_Byte+0x24>
	  OLED_DC_Set();
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a44:	4826      	ldr	r0, [pc, #152]	@ (8000ae0 <OLED_WR_Byte+0xb8>)
 8000a46:	f002 f8a5 	bl	8002b94 <HAL_GPIO_WritePin>
 8000a4a:	e005      	b.n	8000a58 <OLED_WR_Byte+0x30>
	else 
	  OLED_DC_Clr();		  
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a52:	4823      	ldr	r0, [pc, #140]	@ (8000ae0 <OLED_WR_Byte+0xb8>)
 8000a54:	f002 f89e 	bl	8002b94 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5e:	4820      	ldr	r0, [pc, #128]	@ (8000ae0 <OLED_WR_Byte+0xb8>)
 8000a60:	f002 f898 	bl	8002b94 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e026      	b.n	8000ab8 <OLED_WR_Byte+0x90>
	{			  
		OLED_SCLK_Clr();
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a74:	f002 f88e 	bl	8002b94 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da07      	bge.n	8000a90 <OLED_WR_Byte+0x68>
		   OLED_SDIN_Set();
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f002 f883 	bl	8002b94 <HAL_GPIO_WritePin>
 8000a8e:	e006      	b.n	8000a9e <OLED_WR_Byte+0x76>
		else 
		   OLED_SDIN_Clr();
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f002 f87b 	bl	8002b94 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa8:	f002 f874 	bl	8002b94 <HAL_GPIO_WritePin>
		dat<<=1;   
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d9d5      	bls.n	8000a6a <OLED_WR_Byte+0x42>
	}				 		  
	OLED_CS_Set();
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <OLED_WR_Byte+0xb8>)
 8000ac6:	f002 f865 	bl	8002b94 <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <OLED_WR_Byte+0xb8>)
 8000ad2:	f002 f85f 	bl	8002b94 <HAL_GPIO_WritePin>
} 
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <OLED_Set_Pos>:

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	4613      	mov	r3, r2
 8000af2:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	3b50      	subs	r3, #80	@ 0x50
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff93 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	091b      	lsrs	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff89 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	f003 030e 	and.w	r3, r3, #14
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff7c 	bl	8000a28 <OLED_WR_Byte>
}   	  
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e01f      	b.n	8000b84 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	3b50      	subs	r3, #80	@ 0x50
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff6b 	bl	8000a28 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff ff67 	bl	8000a28 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2010      	movs	r0, #16
 8000b5e:	f7ff ff63 	bl	8000a28 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8000b62:	2300      	movs	r3, #0
 8000b64:	71bb      	strb	r3, [r7, #6]
 8000b66:	e006      	b.n	8000b76 <OLED_Clear+0x3e>
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff5c 	bl	8000a28 <OLED_WR_Byte>
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	3301      	adds	r3, #1
 8000b74:	71bb      	strb	r3, [r7, #6]
 8000b76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	daf4      	bge.n	8000b68 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	3301      	adds	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d9dc      	bls.n	8000b44 <OLED_Clear+0xc>
	} //������ʾ
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(u8 x,u8 y,u8 chr)
{      	
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	71bb      	strb	r3, [r7, #6]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73bb      	strb	r3, [r7, #14]
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 8000bae:	797b      	ldrb	r3, [r7, #5]
 8000bb0:	3b20      	subs	r3, #32
 8000bb2:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da04      	bge.n	8000bc6 <OLED_ShowChar+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 8000bc6:	79ba      	ldrb	r2, [r7, #6]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff89 	bl	8000ae4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e00c      	b.n	8000bf2 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	011a      	lsls	r2, r3, #4
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a16      	ldr	r2, [pc, #88]	@ (8000c3c <OLED_ShowChar+0xa8>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff1e 	bl	8000a28 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d9ef      	bls.n	8000bd8 <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff6e 	bl	8000ae4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e00d      	b.n	8000c2a <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	011a      	lsls	r2, r3, #4
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4413      	add	r3, r2
 8000c16:	3308      	adds	r3, #8
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <OLED_ShowChar+0xa8>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff02 	bl	8000a28 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3301      	adds	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	d9ee      	bls.n	8000c0e <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08008358 	.word	0x08008358

08000c40 <oled_pow>:
//m^n����
u32 oled_pow(u8 m,u8 n)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8000c50:	2301      	movs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8000c54:	e004      	b.n	8000c60 <oled_pow+0x20>
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	71ba      	strb	r2, [r7, #6]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f5      	bne.n	8000c56 <oled_pow+0x16>
	return result;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}				  
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <OLED_ShowNum>:
//len :���ֵ�λ��
//size:�����С
//mode:ģʽ	0,���ģʽ;1,����ģʽ
//num:��ֵ(0~4294967295);	 		  
void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	603a      	str	r2, [r7, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	460b      	mov	r3, r1
 8000c88:	71bb      	strb	r3, [r7, #6]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e049      	b.n	8000d2c <OLED_ShowNum+0xb4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8000c98:	797a      	ldrb	r2, [r7, #5]
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f7ff ffca 	bl	8000c40 <oled_pow>
 8000cac:	4602      	mov	r2, r0
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <OLED_ShowNum+0xc8>)
 8000cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	1aca      	subs	r2, r1, r3
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d119      	bne.n	8000d04 <OLED_ShowNum+0x8c>
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	797b      	ldrb	r3, [r7, #5]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	da14      	bge.n	8000d04 <OLED_ShowNum+0x8c>
		{
			if(temp==0)
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10f      	bne.n	8000d00 <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ');
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	085b      	lsrs	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	fb12 f303 	smulbb	r3, r2, r3
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	79b9      	ldrb	r1, [r7, #6]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff4b 	bl	8000b94 <OLED_ShowChar>
				continue;
 8000cfe:	e012      	b.n	8000d26 <OLED_ShowNum+0xae>
			}else enshow=1; 
 8000d00:	2301      	movs	r3, #1
 8000d02:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0'); 
 8000d04:	7e3b      	ldrb	r3, [r7, #24]
 8000d06:	085b      	lsrs	r3, r3, #1
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	fb12 f303 	smulbb	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4413      	add	r3, r2
 8000d16:	b2d8      	uxtb	r0, r3
 8000d18:	7b7b      	ldrb	r3, [r7, #13]
 8000d1a:	3330      	adds	r3, #48	@ 0x30
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff ff37 	bl	8000b94 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	797b      	ldrb	r3, [r7, #5]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3b1      	bcc.n	8000c98 <OLED_ShowNum+0x20>
	}
} 
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	cccccccd 	.word	0xcccccccd

08000d44 <OLED_ShowString>:
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(u8 x,u8 y,u8 *chr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	603a      	str	r2, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	460b      	mov	r3, r1
 8000d52:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8000d58:	e016      	b.n	8000d88 <OLED_ShowString+0x44>
	{		OLED_ShowChar(x,y,chr[j]);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	79b9      	ldrb	r1, [r7, #6]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff14 	bl	8000b94 <OLED_ShowChar>
			x+=8;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	3308      	adds	r3, #8
 8000d70:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b78      	cmp	r3, #120	@ 0x78
 8000d76:	d904      	bls.n	8000d82 <OLED_ShowString+0x3e>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	3302      	adds	r3, #2
 8000d80:	71bb      	strb	r3, [r7, #6]
			j++;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	3301      	adds	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1e2      	bne.n	8000d5a <OLED_ShowString+0x16>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <OLED_Init>:
} 


//��ʼ��				    
void OLED_Init(void)
{ 	
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b62      	ldr	r3, [pc, #392]	@ (8000f40 <OLED_Init+0x1a0>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a61      	ldr	r2, [pc, #388]	@ (8000f40 <OLED_Init+0x1a0>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f40 <OLED_Init+0x1a0>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b5c      	ldr	r3, [pc, #368]	@ (8000f40 <OLED_Init+0x1a0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f40 <OLED_Init+0x1a0>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b59      	ldr	r3, [pc, #356]	@ (8000f40 <OLED_Init+0x1a0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000de6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4851      	ldr	r0, [pc, #324]	@ (8000f44 <OLED_Init+0x1a4>)
 8000e00:	f001 fd46 	bl	8002890 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000e0a:	484e      	ldr	r0, [pc, #312]	@ (8000f44 <OLED_Init+0x1a4>)
 8000e0c:	f001 fec2 	bl	8002b94 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2c:	f001 fd30 	bl	8002890 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f001 feab 	bl	8002b94 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e3e:	2064      	movs	r0, #100	@ 0x64
 8000e40:	f000 fcde 	bl	8001800 <HAL_Delay>

	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8000e44:	2100      	movs	r1, #0
 8000e46:	20ae      	movs	r0, #174	@ 0xae
 8000e48:	f7ff fdee 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fdea 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8000e54:	2100      	movs	r1, #0
 8000e56:	2010      	movs	r0, #16
 8000e58:	f7ff fde6 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2040      	movs	r0, #64	@ 0x40
 8000e60:	f7ff fde2 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8000e64:	2100      	movs	r1, #0
 8000e66:	2081      	movs	r0, #129	@ 0x81
 8000e68:	f7ff fdde 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	20cf      	movs	r0, #207	@ 0xcf
 8000e70:	f7ff fdda 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 8000e74:	2100      	movs	r1, #0
 8000e76:	20a1      	movs	r0, #161	@ 0xa1
 8000e78:	f7ff fdd6 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	20c8      	movs	r0, #200	@ 0xc8
 8000e80:	f7ff fdd2 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8000e84:	2100      	movs	r1, #0
 8000e86:	20a6      	movs	r0, #166	@ 0xa6
 8000e88:	f7ff fdce 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	20a8      	movs	r0, #168	@ 0xa8
 8000e90:	f7ff fdca 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 8000e94:	2100      	movs	r1, #0
 8000e96:	203f      	movs	r0, #63	@ 0x3f
 8000e98:	f7ff fdc6 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	20d3      	movs	r0, #211	@ 0xd3
 8000ea0:	f7ff fdc2 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fdbe 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8000eac:	2100      	movs	r1, #0
 8000eae:	20d5      	movs	r0, #213	@ 0xd5
 8000eb0:	f7ff fdba 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	20f0      	movs	r0, #240	@ 0xf0
 8000eb8:	f7ff fdb6 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	20d9      	movs	r0, #217	@ 0xd9
 8000ec0:	f7ff fdb2 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	20f1      	movs	r0, #241	@ 0xf1
 8000ec8:	f7ff fdae 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8000ecc:	2100      	movs	r1, #0
 8000ece:	20da      	movs	r0, #218	@ 0xda
 8000ed0:	f7ff fdaa 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2012      	movs	r0, #18
 8000ed8:	f7ff fda6 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8000edc:	2100      	movs	r1, #0
 8000ede:	20db      	movs	r0, #219	@ 0xdb
 8000ee0:	f7ff fda2 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2040      	movs	r0, #64	@ 0x40
 8000ee8:	f7ff fd9e 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8000eec:	2100      	movs	r1, #0
 8000eee:	2020      	movs	r0, #32
 8000ef0:	f7ff fd9a 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff fd96 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8000efc:	2100      	movs	r1, #0
 8000efe:	208d      	movs	r0, #141	@ 0x8d
 8000f00:	f7ff fd92 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 8000f04:	2100      	movs	r1, #0
 8000f06:	2014      	movs	r0, #20
 8000f08:	f7ff fd8e 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	20a4      	movs	r0, #164	@ 0xa4
 8000f10:	f7ff fd8a 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 8000f14:	2100      	movs	r1, #0
 8000f16:	20a6      	movs	r0, #166	@ 0xa6
 8000f18:	f7ff fd86 	bl	8000a28 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	20af      	movs	r0, #175	@ 0xaf
 8000f20:	f7ff fd82 	bl	8000a28 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 8000f24:	2100      	movs	r1, #0
 8000f26:	20af      	movs	r0, #175	@ 0xaf
 8000f28:	f7ff fd7e 	bl	8000a28 <OLED_WR_Byte>
	OLED_Clear();
 8000f2c:	f7ff fe04 	bl	8000b38 <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 8000f30:	2100      	movs	r1, #0
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fdd6 	bl	8000ae4 <OLED_Set_Pos>
}  
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48000400 	.word	0x48000400

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f7e:	f001 fec5 	bl	8002d0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 fbed 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ff6:	f003 f8f1 	bl	80041dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000c4 	.word	0x200000c4

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f003 f8e7 	bl	80041dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000110 	.word	0x20000110

08001018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <USART1_IRQHandler+0x10>)
 800101e:	f004 fc67 	bl	80058f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000015c 	.word	0x2000015c

0800102c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <COMP1_2_3_IRQHandler+0x10>)
 8001032:	f000 ff65 	bl	8001f00 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000084 	.word	0x20000084

08001040 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001052:	f3af 8000 	nop.w
 8001056:	4601      	mov	r1, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf0      	blt.n	8001052 <_read+0x12>
  }

  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e009      	b.n	80010a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fb77 	bl	8000788 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf1      	blt.n	800108c <_write+0x12>
  }
  return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_close>:

int _close(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010da:	605a      	str	r2, [r3, #4]
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_isatty>:

int _isatty(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f006 ff46 	bl	8007fdc <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20020000 	.word	0x20020000
 800117c:	00000400 	.word	0x00000400
 8001180:	200000c0 	.word	0x200000c0
 8001184:	20000370 	.word	0x20000370

08001188 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09c      	sub	sp, #112	@ 0x70
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2234      	movs	r2, #52	@ 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 fe9a 	bl	8007f20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001328 <MX_TIM1_Init+0x17c>)
 80011ee:	4a4f      	ldr	r2, [pc, #316]	@ (800132c <MX_TIM1_Init+0x180>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001328 <MX_TIM1_Init+0x17c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001328 <MX_TIM1_Init+0x17c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80011fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001328 <MX_TIM1_Init+0x17c>)
 8001200:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001204:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b48      	ldr	r3, [pc, #288]	@ (8001328 <MX_TIM1_Init+0x17c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120c:	4b46      	ldr	r3, [pc, #280]	@ (8001328 <MX_TIM1_Init+0x17c>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001212:	4b45      	ldr	r3, [pc, #276]	@ (8001328 <MX_TIM1_Init+0x17c>)
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001218:	4843      	ldr	r0, [pc, #268]	@ (8001328 <MX_TIM1_Init+0x17c>)
 800121a:	f002 fd03 	bl	8003c24 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001224:	f7ff fbfa 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800122e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001232:	4619      	mov	r1, r3
 8001234:	483c      	ldr	r0, [pc, #240]	@ (8001328 <MX_TIM1_Init+0x17c>)
 8001236:	f003 fa35 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001240:	f7ff fbec 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001244:	4838      	ldr	r0, [pc, #224]	@ (8001328 <MX_TIM1_Init+0x17c>)
 8001246:	f002 fe55 	bl	8003ef4 <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001250:	f7ff fbe4 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001260:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001264:	4619      	mov	r1, r3
 8001266:	4830      	ldr	r0, [pc, #192]	@ (8001328 <MX_TIM1_Init+0x17c>)
 8001268:	f004 f8bc 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001272:	f7ff fbd3 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	@ 0x60
 8001278:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001282:	2300      	movs	r3, #0
 8001284:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001292:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	4823      	ldr	r0, [pc, #140]	@ (8001328 <MX_TIM1_Init+0x17c>)
 800129c:	f003 f8ee 	bl	800447c <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012a6:	f7ff fbb9 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ae:	2204      	movs	r2, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	481d      	ldr	r0, [pc, #116]	@ (8001328 <MX_TIM1_Init+0x17c>)
 80012b4:	f003 f8e2 	bl	800447c <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012be:	f7ff fbad 	bl	8000a1c <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80012c2:	4819      	ldr	r0, [pc, #100]	@ (8001328 <MX_TIM1_Init+0x17c>)
 80012c4:	f004 f9b8 	bl	8005638 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80012c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80012ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80012d8:	230a      	movs	r3, #10
 80012da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001300:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM1_Init+0x17c>)
 800130c:	f004 f900 	bl	8005510 <HAL_TIMEx_ConfigBreakDeadTime>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8001316:	f7ff fb81 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM1_Init+0x17c>)
 800131c:	f000 f896 	bl	800144c <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3770      	adds	r7, #112	@ 0x70
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000c4 	.word	0x200000c4
 800132c:	40012c00 	.word	0x40012c00

08001330 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134e:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001350:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001354:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001358:	f242 720f 	movw	r2, #9999	@ 0x270f
 800135c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001366:	220a      	movs	r2, #10
 8001368:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_TIM2_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001376:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001378:	f002 fc54 	bl	8003c24 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001382:	f7ff fb4b 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_TIM2_Init+0x98>)
 8001394:	f003 f986 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800139e:	f7ff fb3d 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <MX_TIM2_Init+0x98>)
 80013b0:	f004 f818 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ba:	f7ff fb2f 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000110 	.word	0x20000110

080013cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <HAL_TIM_Base_MspInit+0x78>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d114      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013de:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e2:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 80013e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2019      	movs	r0, #25
 80013fc:	f000 fedf 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001400:	2019      	movs	r0, #25
 8001402:	f000 fef6 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001406:	e018      	b.n	800143a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001410:	d113      	bne.n	800143a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6593      	str	r3, [r2, #88]	@ 0x58
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_TIM_Base_MspInit+0x7c>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	201c      	movs	r0, #28
 8001430:	f000 fec5 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001434:	201c      	movs	r0, #28
 8001436:	f000 fedc 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012c00 	.word	0x40012c00
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2d      	ldr	r2, [pc, #180]	@ (8001520 <HAL_TIM_MspPostInit+0xd4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d154      	bne.n	8001518 <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a2c      	ldr	r2, [pc, #176]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a26      	ldr	r2, [pc, #152]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a20      	ldr	r2, [pc, #128]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_TIM_MspPostInit+0xd8>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b6:	2303      	movs	r3, #3
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014c6:	2302      	movs	r3, #2
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4815      	ldr	r0, [pc, #84]	@ (8001528 <HAL_TIM_MspPostInit+0xdc>)
 80014d2:	f001 f9dd 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f4:	f001 f9cc 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001508:	2306      	movs	r3, #6
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <HAL_TIM_MspPostInit+0xe0>)
 8001514:	f001 f9bc 	bl	8002890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40012c00 	.word	0x40012c00
 8001524:	40021000 	.word	0x40021000
 8001528:	48000800 	.word	0x48000800
 800152c:	48000400 	.word	0x48000400

08001530 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001536:	4a23      	ldr	r2, [pc, #140]	@ (80015c4 <MX_USART1_UART_Init+0x94>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001578:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800157a:	f004 f8db 	bl	8005734 <HAL_UART_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001584:	f7ff fa4a 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800158c:	f006 f907 	bl	800779e <HAL_UARTEx_SetTxFifoThreshold>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001596:	f7ff fa41 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159a:	2100      	movs	r1, #0
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 800159e:	f006 f93c 	bl	800781a <HAL_UARTEx_SetRxFifoThreshold>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015a8:	f7ff fa38 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	@ (80015c0 <MX_USART1_UART_Init+0x90>)
 80015ae:	f006 f8bd 	bl	800772c <HAL_UARTEx_DisableFifoMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015b8:	f7ff fa30 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000015c 	.word	0x2000015c
 80015c4:	40013800 	.word	0x40013800

080015c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09e      	sub	sp, #120	@ 0x78
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2254      	movs	r2, #84	@ 0x54
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 fc99 	bl	8007f20 <memset>
  if(uartHandle->Instance==USART1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a22      	ldr	r2, [pc, #136]	@ (800167c <HAL_UART_MspInit+0xb4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d13d      	bne.n	8001674 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4618      	mov	r0, r3
 8001606:	f002 f8bf 	bl	8003788 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001610:	f7ff fa04 	bl	8000a1c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_UART_MspInit+0xb8>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_UART_MspInit+0xb8>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_UART_MspInit+0xb8>)
 8001622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_UART_MspInit+0xb8>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <HAL_UART_MspInit+0xb8>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_UART_MspInit+0xb8>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001644:	2330      	movs	r3, #48	@ 0x30
 8001646:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001654:	2307      	movs	r3, #7
 8001656:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <HAL_UART_MspInit+0xbc>)
 8001660:	f001 f916 	bl	8002890 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2025      	movs	r0, #37	@ 0x25
 800166a:	f000 fda8 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166e:	2025      	movs	r0, #37	@ 0x25
 8001670:	f000 fdbf 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001674:	bf00      	nop
 8001676:	3778      	adds	r7, #120	@ 0x78
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013800 	.word	0x40013800
 8001680:	40021000 	.word	0x40021000
 8001684:	48000800 	.word	0x48000800

08001688 <HAL_UARTEx_RxEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1){//MCU作为从机接收上位机的逻辑
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_UARTEx_RxEventCallback+0x34>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d10b      	bne.n	80016b4 <HAL_UARTEx_RxEventCallback+0x2c>
		g_vofa_frame_received=VOFA_SET_OK;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_UARTEx_RxEventCallback+0x38>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
		g_vofa_frame_size=Size;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80016a8:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, g_vofa_rx_buffer, VOFA_FRAME_RECEIVE_MAX_LENGTH);
 80016aa:	2228      	movs	r2, #40	@ 0x28
 80016ac:	4906      	ldr	r1, [pc, #24]	@ (80016c8 <HAL_UARTEx_RxEventCallback+0x40>)
 80016ae:	4803      	ldr	r0, [pc, #12]	@ (80016bc <HAL_UARTEx_RxEventCallback+0x34>)
 80016b0:	f006 f8f1 	bl	8007896 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000015c 	.word	0x2000015c
 80016c0:	20000218 	.word	0x20000218
 80016c4:	20000219 	.word	0x20000219
 80016c8:	200001f0 	.word	0x200001f0

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff fd5a 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f006 fc75 	bl	8007fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7ff f8b7 	bl	8000870 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   r0, =_estack
 8001704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001710:	08008998 	.word	0x08008998
  ldr r2, =_sbss
 8001714:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001718:	2000036c 	.word	0x2000036c

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>

0800171e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 fd3d 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	200f      	movs	r0, #15
 8001730:	f000 f80e 	bl	8001750 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e001      	b.n	8001744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001740:	f7ff fc02 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001744:	79fb      	ldrb	r3, [r7, #7]

}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_InitTick+0x68>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d022      	beq.n	80017aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001764:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_InitTick+0x6c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_InitTick+0x68>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fd48 	bl	800220e <HAL_SYSTICK_Config>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d809      	bhi.n	800179e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178a:	2200      	movs	r2, #0
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	f04f 30ff 	mov.w	r0, #4294967295
 8001792:	f000 fd14 	bl	80021be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_InitTick+0x70>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e007      	b.n	80017ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e004      	b.n	80017ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_IncTick+0x1c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_IncTick+0x20>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a03      	ldr	r2, [pc, #12]	@ (80017e0 <HAL_IncTick+0x1c>)
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	2000021c 	.word	0x2000021c
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000021c 	.word	0x2000021c

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d004      	beq.n	8001824 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_Delay+0x40>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001824:	bf00      	nop
 8001826:	f7ff ffdf 	bl	80017e8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8f7      	bhi.n	8001826 <HAL_Delay+0x26>
  {
  }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000008 	.word	0x20000008

08001844 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <LL_EXTI_EnableIT_0_31+0x20>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4904      	ldr	r1, [pc, #16]	@ (8001864 <LL_EXTI_EnableIT_0_31+0x20>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40010400 	.word	0x40010400

08001868 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <LL_EXTI_EnableIT_32_63+0x20>)
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	4904      	ldr	r1, [pc, #16]	@ (8001888 <LL_EXTI_EnableIT_32_63+0x20>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	620b      	str	r3, [r1, #32]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40010400 	.word	0x40010400

0800188c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	43db      	mvns	r3, r3
 800189c:	4904      	ldr	r1, [pc, #16]	@ (80018b0 <LL_EXTI_DisableIT_0_31+0x24>)
 800189e:	4013      	ands	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40010400 	.word	0x40010400

080018b4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <LL_EXTI_DisableIT_32_63+0x24>)
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4904      	ldr	r1, [pc, #16]	@ (80018d8 <LL_EXTI_DisableIT_32_63+0x24>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	620b      	str	r3, [r1, #32]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40010400 	.word	0x40010400

080018dc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4904      	ldr	r1, [pc, #16]	@ (80018fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]

}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40010400 	.word	0x40010400

08001900 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <LL_EXTI_EnableEvent_32_63+0x20>)
 800190a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190c:	4904      	ldr	r1, [pc, #16]	@ (8001920 <LL_EXTI_EnableEvent_32_63+0x20>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4313      	orrs	r3, r2
 8001912:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40010400 	.word	0x40010400

08001924 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <LL_EXTI_DisableEvent_0_31+0x24>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	43db      	mvns	r3, r3
 8001934:	4904      	ldr	r1, [pc, #16]	@ (8001948 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001936:	4013      	ands	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40010400 	.word	0x40010400

0800194c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	43db      	mvns	r3, r3
 800195c:	4904      	ldr	r1, [pc, #16]	@ (8001970 <LL_EXTI_DisableEvent_32_63+0x24>)
 800195e:	4013      	ands	r3, r2
 8001960:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40010400 	.word	0x40010400

08001974 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4904      	ldr	r1, [pc, #16]	@ (8001994 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40010400 	.word	0x40010400

08001998 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80019a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019a4:	4904      	ldr	r1, [pc, #16]	@ (80019b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40010400 	.word	0x40010400

080019bc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	4904      	ldr	r1, [pc, #16]	@ (80019e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]

}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40010400 	.word	0x40010400

080019e4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80019ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4904      	ldr	r1, [pc, #16]	@ (8001a08 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40010400 	.word	0x40010400

08001a0c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	4904      	ldr	r1, [pc, #16]	@ (8001a2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40010400 	.word	0x40010400

08001a30 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a3c:	4904      	ldr	r1, [pc, #16]	@ (8001a50 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40010400 	.word	0x40010400

08001a54 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4904      	ldr	r1, [pc, #16]	@ (8001a78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	60cb      	str	r3, [r1, #12]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40010400 	.word	0x40010400

08001a7c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4904      	ldr	r1, [pc, #16]	@ (8001aa0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d101      	bne.n	8001abe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40010400 	.word	0x40010400

08001ad0 <LL_EXTI_IsActiveFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_32_63(uint32_t ExtiLine)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d101      	bne.n	8001aea <LL_EXTI_IsActiveFlag_32_63+0x1a>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_EXTI_IsActiveFlag_32_63+0x1c>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40010400 	.word	0x40010400

08001afc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6153      	str	r3, [r2, #20]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40010400 	.word	0x40010400

08001b1c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	77fb      	strb	r3, [r7, #31]
 8001b56:	e181      	b.n	8001e5c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b66:	d102      	bne.n	8001b6e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
 8001b6c:	e176      	b.n	8001e5c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7f5b      	ldrb	r3, [r3, #29]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d108      	bne.n	8001b8a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe fce5 	bl	8000554 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b94:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b90      	ldr	r3, [pc, #576]	@ (8001dfc <HAL_COMP_Init+0x2c0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d016      	beq.n	8001c04 <HAL_COMP_Init+0xc8>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d113      	bne.n	8001c04 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b88      	ldr	r3, [pc, #544]	@ (8001e00 <HAL_COMP_Init+0x2c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	4a88      	ldr	r2, [pc, #544]	@ (8001e04 <HAL_COMP_Init+0x2c8>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8001bf6:	e002      	b.n	8001bfe <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	@ (8001e08 <HAL_COMP_Init+0x2cc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d028      	beq.n	8001c60 <HAL_COMP_Init+0x124>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7e      	ldr	r2, [pc, #504]	@ (8001e0c <HAL_COMP_Init+0x2d0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d020      	beq.n	8001c5a <HAL_COMP_Init+0x11e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001e10 <HAL_COMP_Init+0x2d4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <HAL_COMP_Init+0x118>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7b      	ldr	r2, [pc, #492]	@ (8001e14 <HAL_COMP_Init+0x2d8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d010      	beq.n	8001c4e <HAL_COMP_Init+0x112>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a79      	ldr	r2, [pc, #484]	@ (8001e18 <HAL_COMP_Init+0x2dc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d008      	beq.n	8001c48 <HAL_COMP_Init+0x10c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a78      	ldr	r2, [pc, #480]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_COMP_Init+0x108>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e00f      	b.n	8001c64 <HAL_COMP_Init+0x128>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e00d      	b.n	8001c64 <HAL_COMP_Init+0x128>
 8001c48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001c4c:	e00a      	b.n	8001c64 <HAL_COMP_Init+0x128>
 8001c4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c52:	e007      	b.n	8001c64 <HAL_COMP_Init+0x128>
 8001c54:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c58:	e004      	b.n	8001c64 <HAL_COMP_Init+0x128>
 8001c5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c5e:	e001      	b.n	8001c64 <HAL_COMP_Init+0x128>
 8001c60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c64:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80b6 	beq.w	8001de0 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d011      	beq.n	8001ca4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a65      	ldr	r2, [pc, #404]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_COMP_Init+0x158>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a64      	ldr	r2, [pc, #400]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d103      	bne.n	8001c9c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8001c94:	6938      	ldr	r0, [r7, #16]
 8001c96:	f7ff fe7f 	bl	8001998 <LL_EXTI_EnableRisingTrig_32_63>
 8001c9a:	e014      	b.n	8001cc6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8001c9c:	6938      	ldr	r0, [r7, #16]
 8001c9e:	f7ff fe69 	bl	8001974 <LL_EXTI_EnableRisingTrig_0_31>
 8001ca2:	e010      	b.n	8001cc6 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5c      	ldr	r2, [pc, #368]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_COMP_Init+0x17c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d103      	bne.n	8001cc0 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8001cb8:	6938      	ldr	r0, [r7, #16]
 8001cba:	f7ff fe93 	bl	80019e4 <LL_EXTI_DisableRisingTrig_32_63>
 8001cbe:	e002      	b.n	8001cc6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8001cc0:	6938      	ldr	r0, [r7, #16]
 8001cc2:	f7ff fe7b 	bl	80019bc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d011      	beq.n	8001cf6 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a51      	ldr	r2, [pc, #324]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d004      	beq.n	8001ce6 <HAL_COMP_Init+0x1aa>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d103      	bne.n	8001cee <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8001ce6:	6938      	ldr	r0, [r7, #16]
 8001ce8:	f7ff fea2 	bl	8001a30 <LL_EXTI_EnableFallingTrig_32_63>
 8001cec:	e014      	b.n	8001d18 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8001cee:	6938      	ldr	r0, [r7, #16]
 8001cf0:	f7ff fe8c 	bl	8001a0c <LL_EXTI_EnableFallingTrig_0_31>
 8001cf4:	e010      	b.n	8001d18 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a48      	ldr	r2, [pc, #288]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_COMP_Init+0x1ce>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a46      	ldr	r2, [pc, #280]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d103      	bne.n	8001d12 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8001d0a:	6938      	ldr	r0, [r7, #16]
 8001d0c:	f7ff feb6 	bl	8001a7c <LL_EXTI_DisableFallingTrig_32_63>
 8001d10:	e002      	b.n	8001d18 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001d12:	6938      	ldr	r0, [r7, #16]
 8001d14:	f7ff fe9e 	bl	8001a54 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_COMP_Init+0x1f0>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3e      	ldr	r2, [pc, #248]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d103      	bne.n	8001d34 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8001d2c:	6938      	ldr	r0, [r7, #16]
 8001d2e:	f7ff fef5 	bl	8001b1c <LL_EXTI_ClearFlag_32_63>
 8001d32:	e002      	b.n	8001d3a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8001d34:	6938      	ldr	r0, [r7, #16]
 8001d36:	f7ff fee1 	bl	8001afc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d011      	beq.n	8001d6a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a34      	ldr	r2, [pc, #208]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_COMP_Init+0x21e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a32      	ldr	r2, [pc, #200]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d103      	bne.n	8001d62 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8001d5a:	6938      	ldr	r0, [r7, #16]
 8001d5c:	f7ff fdd0 	bl	8001900 <LL_EXTI_EnableEvent_32_63>
 8001d60:	e014      	b.n	8001d8c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f7ff fdba 	bl	80018dc <LL_EXTI_EnableEvent_0_31>
 8001d68:	e010      	b.n	8001d8c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_COMP_Init+0x242>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a29      	ldr	r2, [pc, #164]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d103      	bne.n	8001d86 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8001d7e:	6938      	ldr	r0, [r7, #16]
 8001d80:	f7ff fde4 	bl	800194c <LL_EXTI_DisableEvent_32_63>
 8001d84:	e002      	b.n	8001d8c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8001d86:	6938      	ldr	r0, [r7, #16]
 8001d88:	f7ff fdcc 	bl	8001924 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d011      	beq.n	8001dbc <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_COMP_Init+0x270>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d103      	bne.n	8001db4 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8001dac:	6938      	ldr	r0, [r7, #16]
 8001dae:	f7ff fd5b 	bl	8001868 <LL_EXTI_EnableIT_32_63>
 8001db2:	e04b      	b.n	8001e4c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8001db4:	6938      	ldr	r0, [r7, #16]
 8001db6:	f7ff fd45 	bl	8001844 <LL_EXTI_EnableIT_0_31>
 8001dba:	e047      	b.n	8001e4c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_COMP_Init+0x294>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a15      	ldr	r2, [pc, #84]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d103      	bne.n	8001dd8 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8001dd0:	6938      	ldr	r0, [r7, #16]
 8001dd2:	f7ff fd6f 	bl	80018b4 <LL_EXTI_DisableIT_32_63>
 8001dd6:	e039      	b.n	8001e4c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8001dd8:	6938      	ldr	r0, [r7, #16]
 8001dda:	f7ff fd57 	bl	800188c <LL_EXTI_DisableIT_0_31>
 8001dde:	e035      	b.n	8001e4c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_COMP_Init+0x2e0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_COMP_Init+0x2b8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <HAL_COMP_Init+0x2e4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d117      	bne.n	8001e24 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8001df4:	6938      	ldr	r0, [r7, #16]
 8001df6:	f7ff fda9 	bl	800194c <LL_EXTI_DisableEvent_32_63>
 8001dfa:	e016      	b.n	8001e2a <HAL_COMP_Init+0x2ee>
 8001dfc:	ff007e0f 	.word	0xff007e0f
 8001e00:	20000000 	.word	0x20000000
 8001e04:	053e2d63 	.word	0x053e2d63
 8001e08:	40010200 	.word	0x40010200
 8001e0c:	40010204 	.word	0x40010204
 8001e10:	40010208 	.word	0x40010208
 8001e14:	4001020c 	.word	0x4001020c
 8001e18:	40010210 	.word	0x40010210
 8001e1c:	40010214 	.word	0x40010214
 8001e20:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001e24:	6938      	ldr	r0, [r7, #16]
 8001e26:	f7ff fd7d 	bl	8001924 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e68 <HAL_COMP_Init+0x32c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_COMP_Init+0x302>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0c      	ldr	r2, [pc, #48]	@ (8001e6c <HAL_COMP_Init+0x330>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d103      	bne.n	8001e46 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8001e3e:	6938      	ldr	r0, [r7, #16]
 8001e40:	f7ff fd38 	bl	80018b4 <LL_EXTI_DisableIT_32_63>
 8001e44:	e002      	b.n	8001e4c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001e46:	6938      	ldr	r0, [r7, #16]
 8001e48:	f7ff fd20 	bl	800188c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7f5b      	ldrb	r3, [r3, #29]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40010214 	.word	0x40010214
 8001e6c:	40010218 	.word	0x40010218

08001e70 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	e02e      	b.n	8001eea <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e9a:	d102      	bne.n	8001ea2 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e023      	b.n	8001eea <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7f5b      	ldrb	r3, [r3, #29]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11c      	bne.n	8001ee6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_COMP_Start+0x88>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_COMP_Start+0x8c>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0cda      	lsrs	r2, r3, #19
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ed6:	e002      	b.n	8001ede <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <HAL_COMP_Start+0x68>
 8001ee4:	e001      	b.n	8001eea <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001fcc <HAL_COMP_IRQHandler+0xcc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d028      	beq.n	8001f64 <HAL_COMP_IRQHandler+0x64>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd0 <HAL_COMP_IRQHandler+0xd0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d020      	beq.n	8001f5e <HAL_COMP_IRQHandler+0x5e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd4 <HAL_COMP_IRQHandler+0xd4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d018      	beq.n	8001f58 <HAL_COMP_IRQHandler+0x58>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd8 <HAL_COMP_IRQHandler+0xd8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d010      	beq.n	8001f52 <HAL_COMP_IRQHandler+0x52>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a29      	ldr	r2, [pc, #164]	@ (8001fdc <HAL_COMP_IRQHandler+0xdc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d008      	beq.n	8001f4c <HAL_COMP_IRQHandler+0x4c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a28      	ldr	r2, [pc, #160]	@ (8001fe0 <HAL_COMP_IRQHandler+0xe0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_COMP_IRQHandler+0x48>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e00f      	b.n	8001f68 <HAL_COMP_IRQHandler+0x68>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e00d      	b.n	8001f68 <HAL_COMP_IRQHandler+0x68>
 8001f4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001f50:	e00a      	b.n	8001f68 <HAL_COMP_IRQHandler+0x68>
 8001f52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f56:	e007      	b.n	8001f68 <HAL_COMP_IRQHandler+0x68>
 8001f58:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f5c:	e004      	b.n	8001f68 <HAL_COMP_IRQHandler+0x68>
 8001f5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f62:	e001      	b.n	8001f68 <HAL_COMP_IRQHandler+0x68>
 8001f64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f68:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(COMP7)
  if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_COMP_IRQHandler+0xe0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <HAL_COMP_IRQHandler+0x82>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_COMP_IRQHandler+0xe4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <HAL_COMP_IRQHandler+0x94>
  {
    if (LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 8001f82:	68b8      	ldr	r0, [r7, #8]
 8001f84:	f7ff fda4 	bl	8001ad0 <LL_EXTI_IsActiveFlag_32_63>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
    if (LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 8001f92:	e007      	b.n	8001fa4 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f7ff fd85 	bl	8001aa4 <LL_EXTI_IsActiveFlag_0_31>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(COMP7)
    if (tmp_comp_exti_flag_set == 2UL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d103      	bne.n	8001fb8 <HAL_COMP_IRQHandler+0xb8>
    {
      LL_EXTI_ClearFlag_32_63(exti_line);
 8001fb0:	68b8      	ldr	r0, [r7, #8]
 8001fb2:	f7ff fdb3 	bl	8001b1c <LL_EXTI_ClearFlag_32_63>
 8001fb6:	e002      	b.n	8001fbe <HAL_COMP_IRQHandler+0xbe>
    }
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f7ff fd9f 	bl	8001afc <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fbf4 	bl	80007ac <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40010200 	.word	0x40010200
 8001fd0:	40010204 	.word	0x40010204
 8001fd4:	40010208 	.word	0x40010208
 8001fd8:	4001020c 	.word	0x4001020c
 8001fdc:	40010210 	.word	0x40010210
 8001fe0:	40010214 	.word	0x40010214
 8001fe4:	40010218 	.word	0x40010218

08001fe8 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(const COMP_HandleTypeDef *hcomp)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0f9b      	lsrs	r3, r3, #30
 8001ff8:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	@ (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	@ (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	@ (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	@ 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff40 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff90 	bl	80020fc <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5f 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff33 	bl	800206c <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa4 	bl	8002164 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e014      	b.n	8002262 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fe fa09 	bl	8000660 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e056      	b.n	800232e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	795b      	ldrb	r3, [r3, #5]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_DAC_Start+0x20>
 8002288:	2302      	movs	r3, #2
 800228a:	e050      	b.n	800232e <HAL_DAC_Start+0xc2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2201      	movs	r2, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <HAL_DAC_Start+0xd0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <HAL_DAC_Start+0xd4>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80022c2:	e002      	b.n	80022ca <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d11d      	bne.n	8002320 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	e014      	b.n	8002320 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2102      	movs	r1, #2
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0202 	orr.w	r2, r2, #2
 800231e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000000 	.word	0x20000000
 8002340:	053e2d63 	.word	0x053e2d63

08002344 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e018      	b.n	8002392 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	3308      	adds	r3, #8
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e004      	b.n	8002388 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3314      	adds	r3, #20
 8002386:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	461a      	mov	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_DAC_ConfigChannel+0x1c>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e19e      	b.n	80026fe <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	795b      	ldrb	r3, [r3, #5]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_DAC_ConfigChannel+0x2c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e198      	b.n	80026fe <HAL_DAC_ConfigChannel+0x35e>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2202      	movs	r2, #2
 80023d6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d17a      	bne.n	80024d6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fa02 	bl	80017e8 <HAL_GetTick>
 80023e4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13d      	bne.n	8002468 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023ec:	e018      	b.n	8002420 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023ee:	f7ff f9fb 	bl	80017e8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d911      	bls.n	8002420 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f043 0208 	orr.w	r2, r3, #8
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2203      	movs	r2, #3
 800241a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e16e      	b.n	80026fe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1df      	bne.n	80023ee <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40
 8002438:	e020      	b.n	800247c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800243a:	f7ff f9d5 	bl	80017e8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d90f      	bls.n	8002468 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244e:	2b00      	cmp	r3, #0
 8002450:	da0a      	bge.n	8002468 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f043 0208 	orr.w	r2, r3, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2203      	movs	r2, #3
 8002462:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e14a      	b.n	80026fe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246e:	2b00      	cmp	r3, #0
 8002470:	dbe3      	blt.n	800243a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800247a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	ea02 0103 	and.w	r1, r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	409a      	lsls	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	21ff      	movs	r1, #255	@ 0xff
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	ea02 0103 	and.w	r1, r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d11d      	bne.n	800251a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	221f      	movs	r2, #31
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	4013      	ands	r3, r2
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250e:	4313      	orrs	r3, r2
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2207      	movs	r2, #7
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002532:	4013      	ands	r3, r2
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	e00f      	b.n	8002564 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d102      	bne.n	8002552 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800254c:	2301      	movs	r3, #1
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	e008      	b.n	8002564 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800255a:	2301      	movs	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	e001      	b.n	8002564 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	6a3a      	ldr	r2, [r7, #32]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002586:	4013      	ands	r3, r2
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	791b      	ldrb	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_DAC_ConfigChannel+0x1f8>
 8002592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002596:	e000      	b.n	800259a <HAL_DAC_ConfigChannel+0x1fa>
 8002598:	2300      	movs	r3, #0
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b2:	4013      	ands	r3, r2
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	795b      	ldrb	r3, [r3, #5]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_DAC_ConfigChannel+0x224>
 80025be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025c2:	e000      	b.n	80025c6 <HAL_DAC_ConfigChannel+0x226>
 80025c4:	2300      	movs	r3, #0
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d114      	bne.n	8002606 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80025dc:	f001 f856 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80025e0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_DAC_ConfigChannel+0x368>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d904      	bls.n	80025f4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f2:	e00f      	b.n	8002614 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4a45      	ldr	r2, [pc, #276]	@ (800270c <HAL_DAC_ConfigChannel+0x36c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d90a      	bls.n	8002612 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
 8002604:	e006      	b.n	8002614 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	4313      	orrs	r3, r2
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002610:	e000      	b.n	8002614 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002612:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002622:	4313      	orrs	r3, r2
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002666:	4013      	ands	r3, r2
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267e:	4313      	orrs	r3, r2
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002688:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	22c0      	movs	r2, #192	@ 0xc0
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43da      	mvns	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	400a      	ands	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	ea02 0103 	and.w	r1, r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3728      	adds	r7, #40	@ 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	09896800 	.word	0x09896800
 800270c:	04c4b400 	.word	0x04c4b400

08002710 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d005      	beq.n	8002734 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2204      	movs	r2, #4
 800272c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e037      	b.n	80027a4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002752:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002780:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00c      	beq.n	80027a4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002798:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027a2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d00d      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e047      	b.n	8002886 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 020e 	bic.w	r2, r2, #14
 8002804:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002842:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800285a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002864:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
    }
  }
  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800289e:	e15a      	b.n	8002b56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 814c 	beq.w	8002b50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d005      	beq.n	80028d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0201 	and.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b03      	cmp	r3, #3
 800293c:	d017      	beq.n	800296e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d123      	bne.n	80029c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	6939      	ldr	r1, [r7, #16]
 80029be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80a6 	beq.w	8002b50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a04:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_GPIO_Init+0x2e4>)
 8002a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a08:	4a5a      	ldr	r2, [pc, #360]	@ (8002b74 <HAL_GPIO_Init+0x2e4>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a10:	4b58      	ldr	r3, [pc, #352]	@ (8002b74 <HAL_GPIO_Init+0x2e4>)
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1c:	4a56      	ldr	r2, [pc, #344]	@ (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a46:	d01f      	beq.n	8002a88 <HAL_GPIO_Init+0x1f8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b7c <HAL_GPIO_Init+0x2ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d019      	beq.n	8002a84 <HAL_GPIO_Init+0x1f4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4b      	ldr	r2, [pc, #300]	@ (8002b80 <HAL_GPIO_Init+0x2f0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1f0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b84 <HAL_GPIO_Init+0x2f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1ec>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a49      	ldr	r2, [pc, #292]	@ (8002b88 <HAL_GPIO_Init+0x2f8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1e8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a48      	ldr	r2, [pc, #288]	@ (8002b8c <HAL_GPIO_Init+0x2fc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1e4>
 8002a70:	2305      	movs	r3, #5
 8002a72:	e00a      	b.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a74:	2306      	movs	r3, #6
 8002a76:	e008      	b.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	e006      	b.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e004      	b.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e002      	b.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	f002 0203 	and.w	r2, r2, #3
 8002a90:	0092      	lsls	r2, r2, #2
 8002a92:	4093      	lsls	r3, r2
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9a:	4937      	ldr	r1, [pc, #220]	@ (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002acc:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af6:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002afc:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b20:	4a1b      	ldr	r2, [pc, #108]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b4a:	4a11      	ldr	r2, [pc, #68]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3301      	adds	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f47f ae9d 	bne.w	80028a0 <HAL_GPIO_Init+0x10>
  }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	48000400 	.word	0x48000400
 8002b80:	48000800 	.word	0x48000800
 8002b84:	48000c00 	.word	0x48000c00
 8002b88:	48001000 	.word	0x48001000
 8002b8c:	48001400 	.word	0x48001400
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d141      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bde:	d131      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be0:	4b47      	ldr	r3, [pc, #284]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be6:	4a46      	ldr	r2, [pc, #280]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	4b43      	ldr	r3, [pc, #268]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf8:	4a41      	ldr	r2, [pc, #260]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c00:	4b40      	ldr	r3, [pc, #256]	@ (8002d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2232      	movs	r2, #50	@ 0x32
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9b      	lsrs	r3, r3, #18
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c16:	e002      	b.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1e:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d102      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f2      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c32:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d158      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e057      	b.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c44:	4b2e      	ldr	r3, [pc, #184]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c54:	e04d      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5c:	d141      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b28      	ldr	r3, [pc, #160]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d131      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	4b20      	ldr	r3, [pc, #128]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c84:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2232      	movs	r2, #50	@ 0x32
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca2:	e002      	b.n	8002caa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d102      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f2      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d112      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e011      	b.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ce0:	e007      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40007000 	.word	0x40007000
 8002d04:	20000000 	.word	0x20000000
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1a:	6093      	str	r3, [r2, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e2fe      	b.n	800333c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d075      	beq.n	8002e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	4b97      	ldr	r3, [pc, #604]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	4b94      	ldr	r3, [pc, #592]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3e>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d05b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x108>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d157      	bne.n	8002e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e2d9      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x74>
 8002d92:	4b85      	ldr	r3, [pc, #532]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a84      	ldr	r2, [pc, #528]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e01d      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x98>
 8002daa:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7e      	ldr	r2, [pc, #504]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7b      	ldr	r2, [pc, #492]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002dc4:	4b78      	ldr	r3, [pc, #480]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a77      	ldr	r2, [pc, #476]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b75      	ldr	r3, [pc, #468]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a74      	ldr	r2, [pc, #464]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fd00 	bl	80017e8 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fcfc 	bl	80017e8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e29e      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0xc0>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fcec 	bl	80017e8 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe fce8 	bl	80017e8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e28a      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e26:	4b60      	ldr	r3, [pc, #384]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe8>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b59      	ldr	r3, [pc, #356]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e4c:	4b56      	ldr	r3, [pc, #344]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0x136>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d002      	beq.n	8002e68 <HAL_RCC_OscConfig+0x13c>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d11f      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e68:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x154>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e25d      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e80:	4b49      	ldr	r3, [pc, #292]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	4946      	ldr	r1, [pc, #280]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e94:	4b45      	ldr	r3, [pc, #276]	@ (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fc59 	bl	8001750 <HAL_InitTick>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d043      	beq.n	8002f2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e249      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d023      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fc94 	bl	80017e8 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fc90 	bl	80017e8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e232      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed6:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	492d      	ldr	r1, [pc, #180]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
 8002ef6:	e01a      	b.n	8002f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fc70 	bl	80017e8 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fc6c 	bl	80017e8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e20e      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1e:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x1e0>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d041      	beq.n	8002fbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7fe fc49 	bl	80017e8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5a:	f7fe fc45 	bl	80017e8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e1e7      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ef      	beq.n	8002f5a <HAL_RCC_OscConfig+0x22e>
 8002f7a:	e020      	b.n	8002fbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f82:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fc2c 	bl	80017e8 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f92:	e00d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe fc28 	bl	80017e8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d906      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1ca      	b.n	800333c <HAL_RCC_OscConfig+0x610>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ea      	bne.n	8002f94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80a6 	beq.w	8003118 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fd0:	4b84      	ldr	r3, [pc, #528]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2b4>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2b6>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a7e      	ldr	r2, [pc, #504]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	4b79      	ldr	r3, [pc, #484]	@ (80031e8 <HAL_RCC_OscConfig+0x4bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300e:	4b76      	ldr	r3, [pc, #472]	@ (80031e8 <HAL_RCC_OscConfig+0x4bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a75      	ldr	r2, [pc, #468]	@ (80031e8 <HAL_RCC_OscConfig+0x4bc>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fbe5 	bl	80017e8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fbe1 	bl	80017e8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e183      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	4b6c      	ldr	r3, [pc, #432]	@ (80031e8 <HAL_RCC_OscConfig+0x4bc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_RCC_OscConfig+0x32e>
 8003048:	4b66      	ldr	r3, [pc, #408]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304e:	4a65      	ldr	r2, [pc, #404]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003058:	e024      	b.n	80030a4 <HAL_RCC_OscConfig+0x378>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d110      	bne.n	8003084 <HAL_RCC_OscConfig+0x358>
 8003062:	4b60      	ldr	r3, [pc, #384]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	4a5e      	ldr	r2, [pc, #376]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003072:	4b5c      	ldr	r3, [pc, #368]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003078:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003082:	e00f      	b.n	80030a4 <HAL_RCC_OscConfig+0x378>
 8003084:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308a:	4a56      	ldr	r2, [pc, #344]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003094:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	4a52      	ldr	r2, [pc, #328]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe fb9c 	bl	80017e8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe fb98 	bl	80017e8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e138      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ed      	beq.n	80030b4 <HAL_RCC_OscConfig+0x388>
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fb85 	bl	80017e8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fb81 	bl	80017e8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e121      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f8:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ed      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003106:	7ffb      	ldrb	r3, [r7, #31]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b35      	ldr	r3, [pc, #212]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	4a34      	ldr	r2, [pc, #208]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003116:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800312c:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003132:	4a2c      	ldr	r2, [pc, #176]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fb54 	bl	80017e8 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003144:	f7fe fb50 	bl	80017e8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0f2      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003156:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x418>
 8003164:	e01b      	b.n	800319e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003166:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003168:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800316c:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fb37 	bl	80017e8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317e:	f7fe fb33 	bl	80017e8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0d5      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003190:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80c9 	beq.w	800333a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a8:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	f000 8083 	beq.w	80032bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d15e      	bne.n	800327c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a08      	ldr	r2, [pc, #32]	@ (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80031c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe fb0d 	bl	80017e8 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	e00c      	b.n	80031ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe fb09 	bl	80017e8 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d905      	bls.n	80031ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0ab      	b.n	800333c <HAL_RCC_OscConfig+0x610>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	4b55      	ldr	r3, [pc, #340]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ec      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f8:	4b52      	ldr	r3, [pc, #328]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	4b52      	ldr	r3, [pc, #328]	@ (8003348 <HAL_RCC_OscConfig+0x61c>)
 80031fe:	4013      	ands	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6a11      	ldr	r1, [r2, #32]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003208:	3a01      	subs	r2, #1
 800320a:	0112      	lsls	r2, r2, #4
 800320c:	4311      	orrs	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003212:	0212      	lsls	r2, r2, #8
 8003214:	4311      	orrs	r1, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800321a:	0852      	lsrs	r2, r2, #1
 800321c:	3a01      	subs	r2, #1
 800321e:	0552      	lsls	r2, r2, #21
 8003220:	4311      	orrs	r1, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003226:	0852      	lsrs	r2, r2, #1
 8003228:	3a01      	subs	r2, #1
 800322a:	0652      	lsls	r2, r2, #25
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003232:	06d2      	lsls	r2, r2, #27
 8003234:	430a      	orrs	r2, r1
 8003236:	4943      	ldr	r1, [pc, #268]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 8003238:	4313      	orrs	r3, r2
 800323a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b41      	ldr	r3, [pc, #260]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a40      	ldr	r2, [pc, #256]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 8003242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003246:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003248:	4b3e      	ldr	r3, [pc, #248]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a3d      	ldr	r2, [pc, #244]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 800324e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003252:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fac8 	bl	80017e8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fac4 	bl	80017e8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e066      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326e:	4b35      	ldr	r3, [pc, #212]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x530>
 800327a:	e05e      	b.n	800333a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	4b31      	ldr	r3, [pc, #196]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a30      	ldr	r2, [pc, #192]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 8003282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe faae 	bl	80017e8 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe faaa 	bl	80017e8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04c      	b.n	800333c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a2:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032ae:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	4924      	ldr	r1, [pc, #144]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_OscConfig+0x620>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	60cb      	str	r3, [r1, #12]
 80032ba:	e03e      	b.n	800333a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e039      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <HAL_RCC_OscConfig+0x618>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d12c      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	3b01      	subs	r3, #1
 80032e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d123      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d11b      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d113      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d109      	bne.n	8003336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	019f800c 	.word	0x019f800c
 800334c:	feeefffc 	.word	0xfeeefffc

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e11e      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b91      	ldr	r3, [pc, #580]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b8e      	ldr	r3, [pc, #568]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	498c      	ldr	r1, [pc, #560]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b8a      	ldr	r3, [pc, #552]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e106      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d073      	beq.n	800348c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d129      	bne.n	8003400 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ac:	4b81      	ldr	r3, [pc, #516]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0f4      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033bc:	f000 f99e 	bl	80036fc <RCC_GetSysClockFreqFromPLLSource>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4a7c      	ldr	r2, [pc, #496]	@ (80035b8 <HAL_RCC_ClockConfig+0x268>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d93f      	bls.n	800344a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033ca:	4b7a      	ldr	r3, [pc, #488]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d033      	beq.n	800344a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12f      	bne.n	800344a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033ea:	4b72      	ldr	r3, [pc, #456]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033f2:	4a70      	ldr	r2, [pc, #448]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e024      	b.n	800344a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d107      	bne.n	8003418 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003408:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0c6      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003418:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0be      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003428:	f000 f8ce 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 800342c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4a61      	ldr	r2, [pc, #388]	@ (80035b8 <HAL_RCC_ClockConfig+0x268>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d909      	bls.n	800344a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003436:	4b5f      	ldr	r3, [pc, #380]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800343e:	4a5d      	ldr	r2, [pc, #372]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003444:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b5a      	ldr	r3, [pc, #360]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4957      	ldr	r1, [pc, #348]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fe f9c4 	bl	80017e8 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe f9c0 	bl	80017e8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e095      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b4e      	ldr	r3, [pc, #312]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a4:	4b43      	ldr	r3, [pc, #268]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034bc:	4b3d      	ldr	r3, [pc, #244]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034c4:	4a3b      	ldr	r2, [pc, #236]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034cc:	4b39      	ldr	r3, [pc, #228]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4936      	ldr	r1, [pc, #216]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
 80034de:	e008      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d105      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034e6:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a32      	ldr	r2, [pc, #200]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f2:	4b2f      	ldr	r3, [pc, #188]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d21d      	bcs.n	800353c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 020f 	bic.w	r2, r3, #15
 8003508:	4929      	ldr	r1, [pc, #164]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003510:	f7fe f96a 	bl	80017e8 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe f966 	bl	80017e8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e03b      	b.n	80035a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b20      	ldr	r3, [pc, #128]	@ (80035b0 <HAL_RCC_ClockConfig+0x260>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d1ed      	bne.n	8003518 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4917      	ldr	r1, [pc, #92]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003566:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490f      	ldr	r1, [pc, #60]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800357a:	f000 f825 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <HAL_RCC_ClockConfig+0x264>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490c      	ldr	r1, [pc, #48]	@ (80035bc <HAL_RCC_ClockConfig+0x26c>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <HAL_RCC_ClockConfig+0x270>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800359a:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_ClockConfig+0x274>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe f8d6 	bl	8001750 <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	04c4b400 	.word	0x04c4b400
 80035bc:	08008948 	.word	0x08008948
 80035c0:	20000000 	.word	0x20000000
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d102      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035da:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e047      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d102      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035ec:	4b26      	ldr	r3, [pc, #152]	@ (8003688 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e03e      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035f2:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d136      	bne.n	800366c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035fe:	4b20      	ldr	r3, [pc, #128]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3301      	adds	r3, #1
 8003614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d10c      	bne.n	8003636 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800361c:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <HAL_RCC_GetSysClockFreq+0xc0>)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003626:	68d2      	ldr	r2, [r2, #12]
 8003628:	0a12      	lsrs	r2, r2, #8
 800362a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	617b      	str	r3, [r7, #20]
      break;
 8003634:	e00c      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003636:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003640:	68d2      	ldr	r2, [r2, #12]
 8003642:	0a12      	lsrs	r2, r2, #8
 8003644:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
      break;
 800364e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0e5b      	lsrs	r3, r3, #25
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	3301      	adds	r3, #1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e001      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003670:	693b      	ldr	r3, [r7, #16]
}
 8003672:	4618      	mov	r0, r3
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	00f42400 	.word	0x00f42400
 8003688:	007a1200 	.word	0x007a1200

0800368c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003690:	4b03      	ldr	r3, [pc, #12]	@ (80036a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003692:	681b      	ldr	r3, [r3, #0]
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000000 	.word	0x20000000

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036a8:	f7ff fff0 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4904      	ldr	r1, [pc, #16]	@ (80036cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08008958 	.word	0x08008958

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036d4:	f7ff ffda 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0adb      	lsrs	r3, r3, #11
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08008958 	.word	0x08008958

080036fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003702:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800370c:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d10c      	bne.n	800373a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003720:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	4a14      	ldr	r2, [pc, #80]	@ (800377c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68d2      	ldr	r2, [r2, #12]
 800372c:	0a12      	lsrs	r2, r2, #8
 800372e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	617b      	str	r3, [r7, #20]
    break;
 8003738:	e00c      	b.n	8003754 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373a:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	4a0e      	ldr	r2, [pc, #56]	@ (800377c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	0a12      	lsrs	r2, r2, #8
 8003748:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
    break;
 8003752:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0e5b      	lsrs	r3, r3, #25
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800376e:	687b      	ldr	r3, [r7, #4]
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	007a1200 	.word	0x007a1200
 8003784:	00f42400 	.word	0x00f42400

08003788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003790:	2300      	movs	r3, #0
 8003792:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003794:	2300      	movs	r3, #0
 8003796:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8098 	beq.w	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b43      	ldr	r3, [pc, #268]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b40      	ldr	r3, [pc, #256]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ba:	4a3f      	ldr	r2, [pc, #252]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c2:	4b3d      	ldr	r3, [pc, #244]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ce:	2301      	movs	r3, #1
 80037d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d2:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a39      	ldr	r2, [pc, #228]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037de:	f7fe f803 	bl	80017e8 <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037e4:	e009      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fd ffff 	bl	80017e8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d902      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	74fb      	strb	r3, [r7, #19]
        break;
 80037f8:	e005      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fa:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ef      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d159      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800380c:	4b2a      	ldr	r3, [pc, #168]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003816:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01e      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	d019      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003828:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003834:	4b20      	ldr	r3, [pc, #128]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	4a1f      	ldr	r2, [pc, #124]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003844:	4b1c      	ldr	r3, [pc, #112]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003854:	4a18      	ldr	r2, [pc, #96]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fd ffbf 	bl	80017e8 <HAL_GetTick>
 800386a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386c:	e00b      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd ffbb 	bl	80017e8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d902      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	74fb      	strb	r3, [r7, #19]
            break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ec      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389a:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a8:	4903      	ldr	r1, [pc, #12]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038b0:	e008      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	74bb      	strb	r3, [r7, #18]
 80038b6:	e005      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c4:	7c7b      	ldrb	r3, [r7, #17]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d105      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ca:	4ba7      	ldr	r3, [pc, #668]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	4aa6      	ldr	r2, [pc, #664]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038e2:	4ba1      	ldr	r3, [pc, #644]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e8:	f023 0203 	bic.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	499d      	ldr	r1, [pc, #628]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003904:	4b98      	ldr	r3, [pc, #608]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f023 020c 	bic.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4995      	ldr	r1, [pc, #596]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003926:	4b90      	ldr	r3, [pc, #576]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	498c      	ldr	r1, [pc, #560]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003948:	4b87      	ldr	r3, [pc, #540]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	4984      	ldr	r1, [pc, #528]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800396a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	497b      	ldr	r1, [pc, #492]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800398c:	4b76      	ldr	r3, [pc, #472]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	4973      	ldr	r1, [pc, #460]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	496a      	ldr	r1, [pc, #424]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d0:	4b65      	ldr	r3, [pc, #404]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4962      	ldr	r1, [pc, #392]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	4959      	ldr	r1, [pc, #356]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a14:	4b54      	ldr	r3, [pc, #336]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	4951      	ldr	r1, [pc, #324]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a36:	4b4c      	ldr	r3, [pc, #304]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	4948      	ldr	r1, [pc, #288]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a58:	4b43      	ldr	r3, [pc, #268]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4940      	ldr	r1, [pc, #256]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b3b      	ldr	r3, [pc, #236]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a90:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	4932      	ldr	r1, [pc, #200]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aae:	d105      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ac8:	4b27      	ldr	r3, [pc, #156]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad6:	4924      	ldr	r1, [pc, #144]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003af2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0e:	4916      	ldr	r1, [pc, #88]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b20:	4b11      	ldr	r3, [pc, #68]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a10      	ldr	r2, [pc, #64]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	4908      	ldr	r1, [pc, #32]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b56:	d109      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b58:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a02      	ldr	r2, [pc, #8]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b62:	60d3      	str	r3, [r2, #12]
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b78:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	4926      	ldr	r1, [pc, #152]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b98:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	4918      	ldr	r1, [pc, #96]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bd0:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	490a      	ldr	r1, [pc, #40]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000

08003c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e049      	b.n	8003cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fbbe 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fe5c 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e04c      	b.n	8003d86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	@ (8003d94 <HAL_TIM_Base_Start+0xc0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d022      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d06:	d01d      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <HAL_TIM_Base_Start+0xc4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d018      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	@ (8003d9c <HAL_TIM_Base_Start+0xc8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <HAL_TIM_Base_Start+0xcc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00e      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <HAL_TIM_Base_Start+0xd0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	@ (8003da8 <HAL_TIM_Base_Start+0xd4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_Base_Start+0x70>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dac <HAL_TIM_Base_Start+0xd8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d115      	bne.n	8003d70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_TIM_Base_Start+0xdc>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d015      	beq.n	8003d82 <HAL_TIM_Base_Start+0xae>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5c:	d011      	beq.n	8003d82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	e008      	b.n	8003d82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40013400 	.word	0x40013400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40015000 	.word	0x40015000
 8003db0:	00010007 	.word	0x00010007

08003db4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10f      	bne.n	8003dec <HAL_TIM_Base_Stop+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_Base_Stop+0x38>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e054      	b.n	8003ec6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a26      	ldr	r2, [pc, #152]	@ (8003ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d022      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e46:	d01d      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d018      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	@ (8003edc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <HAL_TIM_Base_Start_IT+0xe8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d115      	bne.n	8003eb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d015      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0xbe>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d011      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	e008      	b.n	8003ec2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40015000 	.word	0x40015000
 8003ef0:	00010007 	.word	0x00010007

08003ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e049      	b.n	8003f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f841 	bl	8003fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 fcf4 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start+0x24>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e03c      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d109      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x3e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e02f      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x58>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e022      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d109      	bne.n	800402a <HAL_TIM_PWM_Start+0x72>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e015      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b10      	cmp	r3, #16
 800402e:	d109      	bne.n	8004044 <HAL_TIM_PWM_Start+0x8c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e008      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0a6      	b.n	80041ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0xb6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800406c:	e023      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0xc6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800407c:	e01b      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xd6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800408c:	e013      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0xe6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800409c:	e00b      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xf6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ac:	e003      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f8a8 	bl	8005214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_TIM_PWM_Start+0x1fc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_TIM_PWM_Start+0x148>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a39      	ldr	r2, [pc, #228]	@ (80041b8 <HAL_TIM_PWM_Start+0x200>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_TIM_PWM_Start+0x148>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a37      	ldr	r2, [pc, #220]	@ (80041bc <HAL_TIM_PWM_Start+0x204>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_TIM_PWM_Start+0x148>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a36      	ldr	r2, [pc, #216]	@ (80041c0 <HAL_TIM_PWM_Start+0x208>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIM_PWM_Start+0x148>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a34      	ldr	r2, [pc, #208]	@ (80041c4 <HAL_TIM_PWM_Start+0x20c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_PWM_Start+0x148>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a33      	ldr	r2, [pc, #204]	@ (80041c8 <HAL_TIM_PWM_Start+0x210>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_PWM_Start+0x14c>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_TIM_PWM_Start+0x14e>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <HAL_TIM_PWM_Start+0x1fc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d01d      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a26      	ldr	r2, [pc, #152]	@ (80041cc <HAL_TIM_PWM_Start+0x214>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <HAL_TIM_PWM_Start+0x218>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a23      	ldr	r2, [pc, #140]	@ (80041d4 <HAL_TIM_PWM_Start+0x21c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <HAL_TIM_PWM_Start+0x200>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a18      	ldr	r2, [pc, #96]	@ (80041bc <HAL_TIM_PWM_Start+0x204>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIM_PWM_Start+0x1b2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a18      	ldr	r2, [pc, #96]	@ (80041c8 <HAL_TIM_PWM_Start+0x210>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d115      	bne.n	8004196 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_TIM_PWM_Start+0x220>)
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d015      	beq.n	80041a8 <HAL_TIM_PWM_Start+0x1f0>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004182:	d011      	beq.n	80041a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004194:	e008      	b.n	80041a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e000      	b.n	80041aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40013400 	.word	0x40013400
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800
 80041c8:	40015000 	.word	0x40015000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	00010007 	.word	0x00010007

080041dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d020      	beq.n	8004240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0202 	mvn.w	r2, #2
 8004210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fb5c 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fb4e 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fb5f 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d020      	beq.n	800428c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01b      	beq.n	800428c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0204 	mvn.w	r2, #4
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fb36 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fb28 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb39 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d020      	beq.n	80042d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0208 	mvn.w	r2, #8
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2204      	movs	r2, #4
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fb10 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fb02 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fb13 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01b      	beq.n	8004324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0210 	mvn.w	r2, #16
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2208      	movs	r2, #8
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 faea 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fadc 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 faed 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0201 	mvn.w	r2, #1
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc fa4c 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 f97e 	bl	8005672 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 f976 	bl	8005686 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 faa7 	bl	800490c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0220 	mvn.w	r2, #32
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f001 f93e 	bl	800565e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80043fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f001 f94a 	bl	800569a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 f942 	bl	80056ae <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00c      	beq.n	800444e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 f93a 	bl	80056c2 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 f932 	bl	80056d6 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004496:	2302      	movs	r3, #2
 8004498:	e0ff      	b.n	800469a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b14      	cmp	r3, #20
 80044a6:	f200 80f0 	bhi.w	800468a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	08004505 	.word	0x08004505
 80044b4:	0800468b 	.word	0x0800468b
 80044b8:	0800468b 	.word	0x0800468b
 80044bc:	0800468b 	.word	0x0800468b
 80044c0:	08004545 	.word	0x08004545
 80044c4:	0800468b 	.word	0x0800468b
 80044c8:	0800468b 	.word	0x0800468b
 80044cc:	0800468b 	.word	0x0800468b
 80044d0:	08004587 	.word	0x08004587
 80044d4:	0800468b 	.word	0x0800468b
 80044d8:	0800468b 	.word	0x0800468b
 80044dc:	0800468b 	.word	0x0800468b
 80044e0:	080045c7 	.word	0x080045c7
 80044e4:	0800468b 	.word	0x0800468b
 80044e8:	0800468b 	.word	0x0800468b
 80044ec:	0800468b 	.word	0x0800468b
 80044f0:	08004609 	.word	0x08004609
 80044f4:	0800468b 	.word	0x0800468b
 80044f8:	0800468b 	.word	0x0800468b
 80044fc:	0800468b 	.word	0x0800468b
 8004500:	08004649 	.word	0x08004649
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fabc 	bl	8004a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0208 	orr.w	r2, r2, #8
 800451e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0204 	bic.w	r2, r2, #4
 800452e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6999      	ldr	r1, [r3, #24]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	619a      	str	r2, [r3, #24]
      break;
 8004542:	e0a5      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb36 	bl	8004bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800455e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6999      	ldr	r1, [r3, #24]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	021a      	lsls	r2, r3, #8
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	619a      	str	r2, [r3, #24]
      break;
 8004584:	e084      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fba9 	bl	8004ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0208 	orr.w	r2, r2, #8
 80045a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0204 	bic.w	r2, r2, #4
 80045b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69d9      	ldr	r1, [r3, #28]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	61da      	str	r2, [r3, #28]
      break;
 80045c4:	e064      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fc1b 	bl	8004e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69d9      	ldr	r1, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	021a      	lsls	r2, r3, #8
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	61da      	str	r2, [r3, #28]
      break;
 8004606:	e043      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fc8e 	bl	8004f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0208 	orr.w	r2, r2, #8
 8004622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0204 	bic.w	r2, r2, #4
 8004632:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004646:	e023      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fcd8 	bl	8005004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004662:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004672:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	021a      	lsls	r2, r3, #8
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004688:	e002      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
      break;
 800468e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop

080046a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_ConfigClockSource+0x1c>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0f6      	b.n	80048ae <HAL_TIM_ConfigClockSource+0x20a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80046de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a6f      	ldr	r2, [pc, #444]	@ (80048b8 <HAL_TIM_ConfigClockSource+0x214>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	f000 80c1 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004700:	4a6d      	ldr	r2, [pc, #436]	@ (80048b8 <HAL_TIM_ConfigClockSource+0x214>)
 8004702:	4293      	cmp	r3, r2
 8004704:	f200 80c6 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004708:	4a6c      	ldr	r2, [pc, #432]	@ (80048bc <HAL_TIM_ConfigClockSource+0x218>)
 800470a:	4293      	cmp	r3, r2
 800470c:	f000 80b9 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004710:	4a6a      	ldr	r2, [pc, #424]	@ (80048bc <HAL_TIM_ConfigClockSource+0x218>)
 8004712:	4293      	cmp	r3, r2
 8004714:	f200 80be 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004718:	4a69      	ldr	r2, [pc, #420]	@ (80048c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	f000 80b1 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004720:	4a67      	ldr	r2, [pc, #412]	@ (80048c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f200 80b6 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004728:	4a66      	ldr	r2, [pc, #408]	@ (80048c4 <HAL_TIM_ConfigClockSource+0x220>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f000 80a9 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004730:	4a64      	ldr	r2, [pc, #400]	@ (80048c4 <HAL_TIM_ConfigClockSource+0x220>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f200 80ae 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004738:	4a63      	ldr	r2, [pc, #396]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x224>)
 800473a:	4293      	cmp	r3, r2
 800473c:	f000 80a1 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004740:	4a61      	ldr	r2, [pc, #388]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x224>)
 8004742:	4293      	cmp	r3, r2
 8004744:	f200 80a6 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004748:	4a60      	ldr	r2, [pc, #384]	@ (80048cc <HAL_TIM_ConfigClockSource+0x228>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f000 8099 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004750:	4a5e      	ldr	r2, [pc, #376]	@ (80048cc <HAL_TIM_ConfigClockSource+0x228>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f200 809e 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004758:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800475c:	f000 8091 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004760:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004764:	f200 8096 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800476c:	f000 8089 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 8004770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004774:	f200 808e 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477c:	d03e      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0x158>
 800477e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004782:	f200 8087 	bhi.w	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478a:	f000 8086 	beq.w	800489a <HAL_TIM_ConfigClockSource+0x1f6>
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004792:	d87f      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 8004794:	2b70      	cmp	r3, #112	@ 0x70
 8004796:	d01a      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x12a>
 8004798:	2b70      	cmp	r3, #112	@ 0x70
 800479a:	d87b      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 800479c:	2b60      	cmp	r3, #96	@ 0x60
 800479e:	d050      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x19e>
 80047a0:	2b60      	cmp	r3, #96	@ 0x60
 80047a2:	d877      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a4:	2b50      	cmp	r3, #80	@ 0x50
 80047a6:	d03c      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x17e>
 80047a8:	2b50      	cmp	r3, #80	@ 0x50
 80047aa:	d873      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d058      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x1be>
 80047b0:	2b40      	cmp	r3, #64	@ 0x40
 80047b2:	d86f      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b4:	2b30      	cmp	r3, #48	@ 0x30
 80047b6:	d064      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 80047b8:	2b30      	cmp	r3, #48	@ 0x30
 80047ba:	d86b      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d060      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d867      	bhi.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05c      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d05a      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x1de>
 80047cc:	e062      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	f000 fcf9 	bl	80051d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	609a      	str	r2, [r3, #8]
      break;
 80047fa:	e04f      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	f000 fce2 	bl	80051d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800481e:	609a      	str	r2, [r3, #8]
      break;
 8004820:	e03c      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	461a      	mov	r2, r3
 8004830:	f000 fc54 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2150      	movs	r1, #80	@ 0x50
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fcad 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004840:	e02c      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800484e:	461a      	mov	r2, r3
 8004850:	f000 fc73 	bl	800513a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2160      	movs	r1, #96	@ 0x60
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fc9d 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004860:	e01c      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	461a      	mov	r2, r3
 8004870:	f000 fc34 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2140      	movs	r1, #64	@ 0x40
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fc8d 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004880:	e00c      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f000 fc84 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004892:	e003      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      break;
 8004898:	e000      	b.n	800489c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800489a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	00100070 	.word	0x00100070
 80048bc:	00100060 	.word	0x00100060
 80048c0:	00100050 	.word	0x00100050
 80048c4:	00100040 	.word	0x00100040
 80048c8:	00100030 	.word	0x00100030
 80048cc:	00100020 	.word	0x00100020

080048d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a4c      	ldr	r2, [pc, #304]	@ (8004a64 <TIM_Base_SetConfig+0x144>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d017      	beq.n	8004968 <TIM_Base_SetConfig+0x48>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493e:	d013      	beq.n	8004968 <TIM_Base_SetConfig+0x48>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a49      	ldr	r2, [pc, #292]	@ (8004a68 <TIM_Base_SetConfig+0x148>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x48>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a48      	ldr	r2, [pc, #288]	@ (8004a6c <TIM_Base_SetConfig+0x14c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x48>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a47      	ldr	r2, [pc, #284]	@ (8004a70 <TIM_Base_SetConfig+0x150>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x48>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a46      	ldr	r2, [pc, #280]	@ (8004a74 <TIM_Base_SetConfig+0x154>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x48>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a45      	ldr	r2, [pc, #276]	@ (8004a78 <TIM_Base_SetConfig+0x158>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a39      	ldr	r2, [pc, #228]	@ (8004a64 <TIM_Base_SetConfig+0x144>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d023      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d01f      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a36      	ldr	r2, [pc, #216]	@ (8004a68 <TIM_Base_SetConfig+0x148>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01b      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a35      	ldr	r2, [pc, #212]	@ (8004a6c <TIM_Base_SetConfig+0x14c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d017      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a34      	ldr	r2, [pc, #208]	@ (8004a70 <TIM_Base_SetConfig+0x150>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a33      	ldr	r2, [pc, #204]	@ (8004a74 <TIM_Base_SetConfig+0x154>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a33      	ldr	r2, [pc, #204]	@ (8004a7c <TIM_Base_SetConfig+0x15c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a32      	ldr	r2, [pc, #200]	@ (8004a80 <TIM_Base_SetConfig+0x160>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a31      	ldr	r2, [pc, #196]	@ (8004a84 <TIM_Base_SetConfig+0x164>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_Base_SetConfig+0xaa>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a78 <TIM_Base_SetConfig+0x158>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d108      	bne.n	80049dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <TIM_Base_SetConfig+0x144>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <TIM_Base_SetConfig+0x110>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a74 <TIM_Base_SetConfig+0x154>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00f      	beq.n	8004a30 <TIM_Base_SetConfig+0x110>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1a      	ldr	r2, [pc, #104]	@ (8004a7c <TIM_Base_SetConfig+0x15c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <TIM_Base_SetConfig+0x110>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <TIM_Base_SetConfig+0x160>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d007      	beq.n	8004a30 <TIM_Base_SetConfig+0x110>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a18      	ldr	r2, [pc, #96]	@ (8004a84 <TIM_Base_SetConfig+0x164>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_Base_SetConfig+0x110>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a13      	ldr	r2, [pc, #76]	@ (8004a78 <TIM_Base_SetConfig+0x158>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]
  }
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40015000 	.word	0x40015000
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800

08004a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f023 0201 	bic.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 0302 	bic.w	r3, r3, #2
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a30      	ldr	r2, [pc, #192]	@ (8004ba4 <TIM_OC1_SetConfig+0x11c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <TIM_OC1_SetConfig+0x88>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba8 <TIM_OC1_SetConfig+0x120>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00f      	beq.n	8004b10 <TIM_OC1_SetConfig+0x88>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a2e      	ldr	r2, [pc, #184]	@ (8004bac <TIM_OC1_SetConfig+0x124>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_OC1_SetConfig+0x88>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb0 <TIM_OC1_SetConfig+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_OC1_SetConfig+0x88>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb4 <TIM_OC1_SetConfig+0x12c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_OC1_SetConfig+0x88>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bb8 <TIM_OC1_SetConfig+0x130>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10c      	bne.n	8004b2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 0308 	bic.w	r3, r3, #8
 8004b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba4 <TIM_OC1_SetConfig+0x11c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_OC1_SetConfig+0xd2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <TIM_OC1_SetConfig+0x120>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_OC1_SetConfig+0xd2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <TIM_OC1_SetConfig+0x124>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_OC1_SetConfig+0xd2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb0 <TIM_OC1_SetConfig+0x128>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_OC1_SetConfig+0xd2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	@ (8004bb4 <TIM_OC1_SetConfig+0x12c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_OC1_SetConfig+0xd2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a18      	ldr	r2, [pc, #96]	@ (8004bb8 <TIM_OC1_SetConfig+0x130>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d111      	bne.n	8004b7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	621a      	str	r2, [r3, #32]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40013400 	.word	0x40013400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800
 8004bb8:	40015000 	.word	0x40015000

08004bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f023 0210 	bic.w	r2, r3, #16
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0320 	bic.w	r3, r3, #32
 8004c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ccc <TIM_OC2_SetConfig+0x110>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_OC2_SetConfig+0x74>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd0 <TIM_OC2_SetConfig+0x114>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_OC2_SetConfig+0x74>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd4 <TIM_OC2_SetConfig+0x118>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <TIM_OC2_SetConfig+0x110>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <TIM_OC2_SetConfig+0xc0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <TIM_OC2_SetConfig+0x114>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_OC2_SetConfig+0xc0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd8 <TIM_OC2_SetConfig+0x11c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <TIM_OC2_SetConfig+0xc0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	@ (8004cdc <TIM_OC2_SetConfig+0x120>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_OC2_SetConfig+0xc0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce0 <TIM_OC2_SetConfig+0x124>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_OC2_SetConfig+0xc0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <TIM_OC2_SetConfig+0x118>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d113      	bne.n	8004ca4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40015000 	.word	0x40015000
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <TIM_OC3_SetConfig+0x10c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_OC3_SetConfig+0x72>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <TIM_OC3_SetConfig+0x110>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC3_SetConfig+0x72>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a29      	ldr	r2, [pc, #164]	@ (8004df8 <TIM_OC3_SetConfig+0x114>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1e      	ldr	r2, [pc, #120]	@ (8004df0 <TIM_OC3_SetConfig+0x10c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <TIM_OC3_SetConfig+0xbe>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <TIM_OC3_SetConfig+0x110>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <TIM_OC3_SetConfig+0xbe>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <TIM_OC3_SetConfig+0x118>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_OC3_SetConfig+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <TIM_OC3_SetConfig+0x11c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <TIM_OC3_SetConfig+0xbe>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1b      	ldr	r2, [pc, #108]	@ (8004e04 <TIM_OC3_SetConfig+0x120>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC3_SetConfig+0xbe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <TIM_OC3_SetConfig+0x114>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d113      	bne.n	8004dca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40015000 	.word	0x40015000
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <TIM_OC4_SetConfig+0x110>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_OC4_SetConfig+0x74>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004f1c <TIM_OC4_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_OC4_SetConfig+0x74>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a2a      	ldr	r2, [pc, #168]	@ (8004f20 <TIM_OC4_SetConfig+0x118>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10d      	bne.n	8004e98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <TIM_OC4_SetConfig+0x110>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <TIM_OC4_SetConfig+0xc0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f1c <TIM_OC4_SetConfig+0x114>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_OC4_SetConfig+0xc0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <TIM_OC4_SetConfig+0x11c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_OC4_SetConfig+0xc0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f28 <TIM_OC4_SetConfig+0x120>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_OC4_SetConfig+0xc0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <TIM_OC4_SetConfig+0x124>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC4_SetConfig+0xc0>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <TIM_OC4_SetConfig+0x118>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d113      	bne.n	8004ef0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ece:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ed6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	019b      	lsls	r3, r3, #6
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40015000 	.word	0x40015000
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <TIM_OC5_SetConfig+0xbc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x82>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <TIM_OC5_SetConfig+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00f      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x82>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a17      	ldr	r2, [pc, #92]	@ (8004ff4 <TIM_OC5_SetConfig+0xc4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x82>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	@ (8004ff8 <TIM_OC5_SetConfig+0xc8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x82>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a15      	ldr	r2, [pc, #84]	@ (8004ffc <TIM_OC5_SetConfig+0xcc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x82>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a14      	ldr	r2, [pc, #80]	@ (8005000 <TIM_OC5_SetConfig+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d109      	bne.n	8004fc6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800
 8005000:	40015000 	.word	0x40015000

08005004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800504a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	051b      	lsls	r3, r3, #20
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1a      	ldr	r2, [pc, #104]	@ (80050c4 <TIM_OC6_SetConfig+0xc0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <TIM_OC6_SetConfig+0x84>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <TIM_OC6_SetConfig+0xc4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00f      	beq.n	8005088 <TIM_OC6_SetConfig+0x84>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <TIM_OC6_SetConfig+0xc8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_OC6_SetConfig+0x84>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a17      	ldr	r2, [pc, #92]	@ (80050d0 <TIM_OC6_SetConfig+0xcc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_OC6_SetConfig+0x84>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a16      	ldr	r2, [pc, #88]	@ (80050d4 <TIM_OC6_SetConfig+0xd0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_OC6_SetConfig+0x84>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a15      	ldr	r2, [pc, #84]	@ (80050d8 <TIM_OC6_SetConfig+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d109      	bne.n	800509c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800508e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40013400 	.word	0x40013400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800
 80050d8:	40015000 	.word	0x40015000

080050dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 030a 	bic.w	r3, r3, #10
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513a:	b480      	push	{r7}
 800513c:	b087      	sub	sp, #28
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f023 0210 	bic.w	r2, r3, #16
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80051b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f043 0307 	orr.w	r3, r3, #7
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	609a      	str	r2, [r3, #8]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2201      	movs	r2, #1
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_TIMEx_PWMN_Start+0x24>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e022      	b.n	80052ca <HAL_TIMEx_PWMN_Start+0x6a>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d109      	bne.n	800529e <HAL_TIMEx_PWMN_Start+0x3e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e015      	b.n	80052ca <HAL_TIMEx_PWMN_Start+0x6a>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d109      	bne.n	80052b8 <HAL_TIMEx_PWMN_Start+0x58>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e008      	b.n	80052ca <HAL_TIMEx_PWMN_Start+0x6a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e073      	b.n	80053ba <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <HAL_TIMEx_PWMN_Start+0x82>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e0:	e013      	b.n	800530a <HAL_TIMEx_PWMN_Start+0xaa>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d104      	bne.n	80052f2 <HAL_TIMEx_PWMN_Start+0x92>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052f0:	e00b      	b.n	800530a <HAL_TIMEx_PWMN_Start+0xaa>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d104      	bne.n	8005302 <HAL_TIMEx_PWMN_Start+0xa2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005300:	e003      	b.n	800530a <HAL_TIMEx_PWMN_Start+0xaa>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2204      	movs	r2, #4
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f9e9 	bl	80056ea <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005326:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a25      	ldr	r2, [pc, #148]	@ (80053c4 <HAL_TIMEx_PWMN_Start+0x164>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d022      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d01d      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <HAL_TIMEx_PWMN_Start+0x168>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a20      	ldr	r2, [pc, #128]	@ (80053cc <HAL_TIMEx_PWMN_Start+0x16c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1e      	ldr	r2, [pc, #120]	@ (80053d0 <HAL_TIMEx_PWMN_Start+0x170>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <HAL_TIMEx_PWMN_Start+0x174>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_TIMEx_PWMN_Start+0x178>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIMEx_PWMN_Start+0x118>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <HAL_TIMEx_PWMN_Start+0x17c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d115      	bne.n	80053a4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	4b18      	ldr	r3, [pc, #96]	@ (80053e0 <HAL_TIMEx_PWMN_Start+0x180>)
 8005380:	4013      	ands	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d015      	beq.n	80053b6 <HAL_TIMEx_PWMN_Start+0x156>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005390:	d011      	beq.n	80053b6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a2:	e008      	b.n	80053b6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e000      	b.n	80053b8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40015000 	.word	0x40015000
 80053e0:	00010007 	.word	0x00010007

080053e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e074      	b.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a34      	ldr	r2, [pc, #208]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a33      	ldr	r2, [pc, #204]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a31      	ldr	r2, [pc, #196]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d108      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005440:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547c:	d01d      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1f      	ldr	r2, [pc, #124]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d018      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1d      	ldr	r2, [pc, #116]	@ (8005504 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1c      	ldr	r2, [pc, #112]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10c      	bne.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40015000 	.word	0x40015000
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40014000 	.word	0x40014000

08005510 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005528:	2302      	movs	r3, #2
 800552a:	e078      	b.n	800561e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1c      	ldr	r2, [pc, #112]	@ (800562c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005630 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	@ (8005634 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d11c      	bne.n	800560c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40015000 	.word	0x40015000

08005638 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800564e:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b087      	sub	sp, #28
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2204      	movs	r2, #4
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	43db      	mvns	r3, r3
 800570c:	401a      	ands	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	431a      	orrs	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e042      	b.n	80057cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fb ff35 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2224      	movs	r2, #36	@ 0x24
 8005762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 ff12 	bl	80065a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fc13 	bl	8005fb0 <UART_SetConfig>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e01b      	b.n	80057cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 ff91 	bl	80066ec <UART_CheckIdleState>
 80057ca:	4603      	mov	r3, r0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d17b      	bne.n	80058e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_UART_Transmit+0x26>
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e074      	b.n	80058e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	@ 0x21
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fb ffeb 	bl	80017e8 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582c:	d108      	bne.n	8005840 <HAL_UART_Transmit+0x6c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e003      	b.n	8005848 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005848:	e030      	b.n	80058ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	@ 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fff3 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e03d      	b.n	80058e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005880:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3302      	adds	r3, #2
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e007      	b.n	800589a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1c8      	bne.n	800584a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	2140      	movs	r1, #64	@ 0x40
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 ffbc 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b0ba      	sub	sp, #232	@ 0xe8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005916:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800591a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800591e:	4013      	ands	r3, r2
 8005920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11b      	bne.n	8005964 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d015      	beq.n	8005964 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8300 	beq.w	8005f5a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
      }
      return;
 8005962:	e2fa      	b.n	8005f5a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8123 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800596e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005972:	4b8d      	ldr	r3, [pc, #564]	@ (8005ba8 <HAL_UART_IRQHandler+0x2b8>)
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800597a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800597e:	4b8b      	ldr	r3, [pc, #556]	@ (8005bac <HAL_UART_IRQHandler+0x2bc>)
 8005980:	4013      	ands	r3, r2
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8116 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d011      	beq.n	80059b8 <HAL_UART_IRQHandler+0xc8>
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d011      	beq.n	80059e8 <HAL_UART_IRQHandler+0xf8>
 80059c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2202      	movs	r2, #2
 80059d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <HAL_UART_IRQHandler+0x128>
 80059f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2204      	movs	r2, #4
 8005a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	f043 0202 	orr.w	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a34:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba8 <HAL_UART_IRQHandler+0x2b8>)
 8005a36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2208      	movs	r2, #8
 8005a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	f043 0208 	orr.w	r2, r3, #8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d012      	beq.n	8005a86 <HAL_UART_IRQHandler+0x196>
 8005a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8266 	beq.w	8005f5e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d013      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005acc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d005      	beq.n	8005aea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ae2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d054      	beq.n	8005b94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 f838 	bl	8006b60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b40      	cmp	r3, #64	@ 0x40
 8005afc:	d146      	bne.n	8005b8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1d9      	bne.n	8005afe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d017      	beq.n	8005b84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5a:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <HAL_UART_IRQHandler+0x2c0>)
 8005b5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fc fe2c 	bl	80027c2 <HAL_DMA_Abort_IT>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d019      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b82:	e00f      	b.n	8005ba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa09 	bl	8005f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8a:	e00b      	b.n	8005ba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa05 	bl	8005f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b92:	e007      	b.n	8005ba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fa01 	bl	8005f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005ba2:	e1dc      	b.n	8005f5e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	bf00      	nop
    return;
 8005ba6:	e1da      	b.n	8005f5e <HAL_UART_IRQHandler+0x66e>
 8005ba8:	10000001 	.word	0x10000001
 8005bac:	04000120 	.word	0x04000120
 8005bb0:	08006c2d 	.word	0x08006c2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 8170 	bne.w	8005e9e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8169 	beq.w	8005e9e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8162 	beq.w	8005e9e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2210      	movs	r2, #16
 8005be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	f040 80d8 	bne.w	8005da2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80af 	beq.w	8005d68 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c14:	429a      	cmp	r2, r3
 8005c16:	f080 80a7 	bcs.w	8005d68 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 8087 	bne.w	8005d46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1da      	bne.n	8005c38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ca6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e1      	bne.n	8005c82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ce8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e3      	bne.n	8005cbe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e4      	bne.n	8005d04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fc fce5 	bl	8002710 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fb fc91 	bl	8001688 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d66:	e0fc      	b.n	8005f62 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d72:	429a      	cmp	r2, r3
 8005d74:	f040 80f5 	bne.w	8005f62 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	f040 80eb 	bne.w	8005f62 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fb fc74 	bl	8001688 <HAL_UARTEx_RxEventCallback>
      return;
 8005da0:	e0df      	b.n	8005f62 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80d1 	beq.w	8005f66 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80cc 	beq.w	8005f66 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e4      	bne.n	8005dce <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	623b      	str	r3, [r7, #32]
   return(result);
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3308      	adds	r3, #8
 8005e28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e1      	bne.n	8005e04 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0310 	bic.w	r3, r3, #16
 8005e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	69b9      	ldr	r1, [r7, #24]
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	617b      	str	r3, [r7, #20]
   return(result);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e4      	bne.n	8005e54 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fb fbf6 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e9c:	e063      	b.n	8005f66 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x5d8>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 fc15 	bl	80076f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ec6:	e051      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d014      	beq.n	8005efe <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d03a      	beq.n	8005f6a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
    }
    return;
 8005efc:	e035      	b.n	8005f6a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_UART_IRQHandler+0x62e>
 8005f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fe9e 	bl	8006c58 <UART_EndTransmit_IT>
    return;
 8005f1c:	e026      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <HAL_UART_IRQHandler+0x64e>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fbee 	bl	8007718 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f3c:	e016      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d010      	beq.n	8005f6c <HAL_UART_IRQHandler+0x67c>
 8005f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da0c      	bge.n	8005f6c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 fbd6 	bl	8007704 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f58:	e008      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
      return;
 8005f5a:	bf00      	nop
 8005f5c:	e006      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
    return;
 8005f5e:	bf00      	nop
 8005f60:	e004      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
      return;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
      return;
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <HAL_UART_IRQHandler+0x67c>
    return;
 8005f6a:	bf00      	nop
  }
}
 8005f6c:	37e8      	adds	r7, #232	@ 0xe8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop

08005f74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb4:	b08c      	sub	sp, #48	@ 0x30
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4baa      	ldr	r3, [pc, #680]	@ (8006288 <UART_SetConfig+0x2d8>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a9f      	ldr	r2, [pc, #636]	@ (800628c <UART_SetConfig+0x2dc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006018:	4313      	orrs	r3, r2
 800601a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006026:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006030:	430b      	orrs	r3, r1
 8006032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	f023 010f 	bic.w	r1, r3, #15
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a90      	ldr	r2, [pc, #576]	@ (8006290 <UART_SetConfig+0x2e0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d125      	bne.n	80060a0 <UART_SetConfig+0xf0>
 8006054:	4b8f      	ldr	r3, [pc, #572]	@ (8006294 <UART_SetConfig+0x2e4>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b03      	cmp	r3, #3
 8006060:	d81a      	bhi.n	8006098 <UART_SetConfig+0xe8>
 8006062:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <UART_SetConfig+0xb8>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006079 	.word	0x08006079
 800606c:	08006089 	.word	0x08006089
 8006070:	08006081 	.word	0x08006081
 8006074:	08006091 	.word	0x08006091
 8006078:	2301      	movs	r3, #1
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607e:	e116      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006080:	2302      	movs	r3, #2
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006086:	e112      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608e:	e10e      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e10a      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e106      	b.n	80062ae <UART_SetConfig+0x2fe>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a7c      	ldr	r2, [pc, #496]	@ (8006298 <UART_SetConfig+0x2e8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d138      	bne.n	800611c <UART_SetConfig+0x16c>
 80060aa:	4b7a      	ldr	r3, [pc, #488]	@ (8006294 <UART_SetConfig+0x2e4>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	d82d      	bhi.n	8006114 <UART_SetConfig+0x164>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0x110>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	08006115 	.word	0x08006115
 80060c8:	08006115 	.word	0x08006115
 80060cc:	08006115 	.word	0x08006115
 80060d0:	08006105 	.word	0x08006105
 80060d4:	08006115 	.word	0x08006115
 80060d8:	08006115 	.word	0x08006115
 80060dc:	08006115 	.word	0x08006115
 80060e0:	080060fd 	.word	0x080060fd
 80060e4:	08006115 	.word	0x08006115
 80060e8:	08006115 	.word	0x08006115
 80060ec:	08006115 	.word	0x08006115
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	e0d8      	b.n	80062ae <UART_SetConfig+0x2fe>
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006102:	e0d4      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610a:	e0d0      	b.n	80062ae <UART_SetConfig+0x2fe>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006112:	e0cc      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611a:	e0c8      	b.n	80062ae <UART_SetConfig+0x2fe>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5e      	ldr	r2, [pc, #376]	@ (800629c <UART_SetConfig+0x2ec>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d125      	bne.n	8006172 <UART_SetConfig+0x1c2>
 8006126:	4b5b      	ldr	r3, [pc, #364]	@ (8006294 <UART_SetConfig+0x2e4>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006130:	2b30      	cmp	r3, #48	@ 0x30
 8006132:	d016      	beq.n	8006162 <UART_SetConfig+0x1b2>
 8006134:	2b30      	cmp	r3, #48	@ 0x30
 8006136:	d818      	bhi.n	800616a <UART_SetConfig+0x1ba>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d00a      	beq.n	8006152 <UART_SetConfig+0x1a2>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d814      	bhi.n	800616a <UART_SetConfig+0x1ba>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <UART_SetConfig+0x19a>
 8006144:	2b10      	cmp	r3, #16
 8006146:	d008      	beq.n	800615a <UART_SetConfig+0x1aa>
 8006148:	e00f      	b.n	800616a <UART_SetConfig+0x1ba>
 800614a:	2300      	movs	r3, #0
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006150:	e0ad      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006152:	2302      	movs	r3, #2
 8006154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006158:	e0a9      	b.n	80062ae <UART_SetConfig+0x2fe>
 800615a:	2304      	movs	r3, #4
 800615c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006160:	e0a5      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006162:	2308      	movs	r3, #8
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006168:	e0a1      	b.n	80062ae <UART_SetConfig+0x2fe>
 800616a:	2310      	movs	r3, #16
 800616c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006170:	e09d      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4a      	ldr	r2, [pc, #296]	@ (80062a0 <UART_SetConfig+0x2f0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d125      	bne.n	80061c8 <UART_SetConfig+0x218>
 800617c:	4b45      	ldr	r3, [pc, #276]	@ (8006294 <UART_SetConfig+0x2e4>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006182:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006186:	2bc0      	cmp	r3, #192	@ 0xc0
 8006188:	d016      	beq.n	80061b8 <UART_SetConfig+0x208>
 800618a:	2bc0      	cmp	r3, #192	@ 0xc0
 800618c:	d818      	bhi.n	80061c0 <UART_SetConfig+0x210>
 800618e:	2b80      	cmp	r3, #128	@ 0x80
 8006190:	d00a      	beq.n	80061a8 <UART_SetConfig+0x1f8>
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d814      	bhi.n	80061c0 <UART_SetConfig+0x210>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <UART_SetConfig+0x1f0>
 800619a:	2b40      	cmp	r3, #64	@ 0x40
 800619c:	d008      	beq.n	80061b0 <UART_SetConfig+0x200>
 800619e:	e00f      	b.n	80061c0 <UART_SetConfig+0x210>
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a6:	e082      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061a8:	2302      	movs	r3, #2
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ae:	e07e      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061b0:	2304      	movs	r3, #4
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b6:	e07a      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061b8:	2308      	movs	r3, #8
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061be:	e076      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061c0:	2310      	movs	r3, #16
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c6:	e072      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a35      	ldr	r2, [pc, #212]	@ (80062a4 <UART_SetConfig+0x2f4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d12a      	bne.n	8006228 <UART_SetConfig+0x278>
 80061d2:	4b30      	ldr	r3, [pc, #192]	@ (8006294 <UART_SetConfig+0x2e4>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e0:	d01a      	beq.n	8006218 <UART_SetConfig+0x268>
 80061e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e6:	d81b      	bhi.n	8006220 <UART_SetConfig+0x270>
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ec:	d00c      	beq.n	8006208 <UART_SetConfig+0x258>
 80061ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f2:	d815      	bhi.n	8006220 <UART_SetConfig+0x270>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <UART_SetConfig+0x250>
 80061f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fc:	d008      	beq.n	8006210 <UART_SetConfig+0x260>
 80061fe:	e00f      	b.n	8006220 <UART_SetConfig+0x270>
 8006200:	2300      	movs	r3, #0
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006206:	e052      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620e:	e04e      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006216:	e04a      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e046      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006226:	e042      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a17      	ldr	r2, [pc, #92]	@ (800628c <UART_SetConfig+0x2dc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d13a      	bne.n	80062a8 <UART_SetConfig+0x2f8>
 8006232:	4b18      	ldr	r3, [pc, #96]	@ (8006294 <UART_SetConfig+0x2e4>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006238:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800623c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006240:	d01a      	beq.n	8006278 <UART_SetConfig+0x2c8>
 8006242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006246:	d81b      	bhi.n	8006280 <UART_SetConfig+0x2d0>
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624c:	d00c      	beq.n	8006268 <UART_SetConfig+0x2b8>
 800624e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006252:	d815      	bhi.n	8006280 <UART_SetConfig+0x2d0>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <UART_SetConfig+0x2b0>
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625c:	d008      	beq.n	8006270 <UART_SetConfig+0x2c0>
 800625e:	e00f      	b.n	8006280 <UART_SetConfig+0x2d0>
 8006260:	2300      	movs	r3, #0
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e022      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006268:	2302      	movs	r3, #2
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e01e      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e01a      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e016      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006286:	e012      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006288:	cfff69f3 	.word	0xcfff69f3
 800628c:	40008000 	.word	0x40008000
 8006290:	40013800 	.word	0x40013800
 8006294:	40021000 	.word	0x40021000
 8006298:	40004400 	.word	0x40004400
 800629c:	40004800 	.word	0x40004800
 80062a0:	40004c00 	.word	0x40004c00
 80062a4:	40005000 	.word	0x40005000
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4aae      	ldr	r2, [pc, #696]	@ (800656c <UART_SetConfig+0x5bc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	f040 8097 	bne.w	80063e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d823      	bhi.n	800630a <UART_SetConfig+0x35a>
 80062c2:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <UART_SetConfig+0x318>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	0800630b 	.word	0x0800630b
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	0800630b 	.word	0x0800630b
 80062d8:	080062fb 	.word	0x080062fb
 80062dc:	0800630b 	.word	0x0800630b
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	0800630b 	.word	0x0800630b
 80062e8:	08006303 	.word	0x08006303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fd f9da 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062f2:	e010      	b.n	8006316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006570 <UART_SetConfig+0x5c0>)
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062f8:	e00d      	b.n	8006316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062fa:	f7fd f965 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80062fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006300:	e009      	b.n	8006316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006308:	e005      	b.n	8006316 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8130 	beq.w	800657e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	4a94      	ldr	r2, [pc, #592]	@ (8006574 <UART_SetConfig+0x5c4>)
 8006324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006328:	461a      	mov	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006330:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	d305      	bcc.n	800634e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	429a      	cmp	r2, r3
 800634c:	d903      	bls.n	8006356 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006354:	e113      	b.n	800657e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	2200      	movs	r2, #0
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	60fa      	str	r2, [r7, #12]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	4a84      	ldr	r2, [pc, #528]	@ (8006574 <UART_SetConfig+0x5c4>)
 8006364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006368:	b29b      	uxth	r3, r3
 800636a:	2200      	movs	r2, #0
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006378:	f7f9 ff4e 	bl	8000218 <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	020b      	lsls	r3, r1, #8
 800638e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006392:	0202      	lsls	r2, r0, #8
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	0849      	lsrs	r1, r1, #1
 800639a:	2000      	movs	r0, #0
 800639c:	460c      	mov	r4, r1
 800639e:	4605      	mov	r5, r0
 80063a0:	eb12 0804 	adds.w	r8, r2, r4
 80063a4:	eb43 0905 	adc.w	r9, r3, r5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	469a      	mov	sl, r3
 80063b0:	4693      	mov	fp, r2
 80063b2:	4652      	mov	r2, sl
 80063b4:	465b      	mov	r3, fp
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f7f9 ff2d 	bl	8000218 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4613      	mov	r3, r2
 80063c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063cc:	d308      	bcc.n	80063e0 <UART_SetConfig+0x430>
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063d4:	d204      	bcs.n	80063e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e0ce      	b.n	800657e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063e6:	e0ca      	b.n	800657e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063f0:	d166      	bne.n	80064c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d827      	bhi.n	800644a <UART_SetConfig+0x49a>
 80063fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <UART_SetConfig+0x450>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006425 	.word	0x08006425
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006435 	.word	0x08006435
 800640c:	0800644b 	.word	0x0800644b
 8006410:	0800643b 	.word	0x0800643b
 8006414:	0800644b 	.word	0x0800644b
 8006418:	0800644b 	.word	0x0800644b
 800641c:	0800644b 	.word	0x0800644b
 8006420:	08006443 	.word	0x08006443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006424:	f7fd f93e 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8006428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800642a:	e014      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642c:	f7fd f950 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8006430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006432:	e010      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4b4e      	ldr	r3, [pc, #312]	@ (8006570 <UART_SetConfig+0x5c0>)
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006438:	e00d      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643a:	f7fd f8c5 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 800643e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006440:	e009      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006448:	e005      	b.n	8006456 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8090 	beq.w	800657e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	4a44      	ldr	r2, [pc, #272]	@ (8006574 <UART_SetConfig+0x5c4>)
 8006464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006468:	461a      	mov	r2, r3
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006470:	005a      	lsls	r2, r3, #1
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d916      	bls.n	80064b8 <UART_SetConfig+0x508>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006490:	d212      	bcs.n	80064b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f023 030f 	bic.w	r3, r3, #15
 800649a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	8bfb      	ldrh	r3, [r7, #30]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	8bfa      	ldrh	r2, [r7, #30]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	e062      	b.n	800657e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064be:	e05e      	b.n	800657e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d828      	bhi.n	800651a <UART_SetConfig+0x56a>
 80064c8:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <UART_SetConfig+0x520>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fd f8d6 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 80064f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064fa:	e014      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fd f8e8 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006502:	e010      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b1a      	ldr	r3, [pc, #104]	@ (8006570 <UART_SetConfig+0x5c0>)
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006508:	e00d      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fd f85d 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 800650e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006510:	e009      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006518:	e005      	b.n	8006526 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006524:	bf00      	nop
    }

    if (pclk != 0U)
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d028      	beq.n	800657e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	4a10      	ldr	r2, [pc, #64]	@ (8006574 <UART_SetConfig+0x5c4>)
 8006532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006536:	461a      	mov	r2, r3
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	fbb3 f2f2 	udiv	r2, r3, r2
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	441a      	add	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d910      	bls.n	8006578 <UART_SetConfig+0x5c8>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655c:	d20c      	bcs.n	8006578 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	b29a      	uxth	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e009      	b.n	800657e <UART_SetConfig+0x5ce>
 800656a:	bf00      	nop
 800656c:	40008000 	.word	0x40008000
 8006570:	00f42400 	.word	0x00f42400
 8006574:	08008960 	.word	0x08008960
      }
      else
      {
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2201      	movs	r2, #1
 8006582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2201      	movs	r2, #1
 800658a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2200      	movs	r2, #0
 8006598:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800659a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3730      	adds	r7, #48	@ 0x30
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01a      	beq.n	80066be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066a6:	d10a      	bne.n	80066be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
  }
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b098      	sub	sp, #96	@ 0x60
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066fc:	f7fb f874 	bl	80017e8 <HAL_GetTick>
 8006700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b08      	cmp	r3, #8
 800670e:	d12f      	bne.n	8006770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006718:	2200      	movs	r2, #0
 800671a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f88e 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d022      	beq.n	8006770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800673e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006748:	647b      	str	r3, [r7, #68]	@ 0x44
 800674a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800674e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e6      	bne.n	800672a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e063      	b.n	8006838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b04      	cmp	r3, #4
 800677c:	d149      	bne.n	8006812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800677e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006786:	2200      	movs	r2, #0
 8006788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f857 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d03c      	beq.n	8006812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	623b      	str	r3, [r7, #32]
   return(result);
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e6      	bne.n	8006798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3308      	adds	r3, #8
 80067e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ea:	61fa      	str	r2, [r7, #28]
 80067ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	617b      	str	r3, [r7, #20]
   return(result);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e5      	bne.n	80067ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e012      	b.n	8006838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3758      	adds	r7, #88	@ 0x58
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006850:	e04f      	b.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d04b      	beq.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fa ffc5 	bl	80017e8 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <UART_WaitOnFlagUntilTimeout+0x30>
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e04e      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d037      	beq.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b80      	cmp	r3, #128	@ 0x80
 8006886:	d034      	beq.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b40      	cmp	r3, #64	@ 0x40
 800688c:	d031      	beq.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d110      	bne.n	80068be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2208      	movs	r2, #8
 80068a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f95b 	bl	8006b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2208      	movs	r2, #8
 80068ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e029      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068cc:	d111      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f941 	bl	8006b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e00f      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4013      	ands	r3, r2
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	bf0c      	ite	eq
 8006902:	2301      	moveq	r3, #1
 8006904:	2300      	movne	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	429a      	cmp	r2, r3
 800690e:	d0a0      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800691c:	b480      	push	{r7}
 800691e:	b0a3      	sub	sp, #140	@ 0x8c
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694e:	d10e      	bne.n	800696e <UART_Start_Receive_IT+0x52>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <UART_Start_Receive_IT+0x48>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800695e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006962:	e02d      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	22ff      	movs	r2, #255	@ 0xff
 8006968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800696c:	e028      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <UART_Start_Receive_IT+0x76>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <UART_Start_Receive_IT+0x6c>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	22ff      	movs	r2, #255	@ 0xff
 8006982:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006986:	e01b      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	227f      	movs	r2, #127	@ 0x7f
 800698c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006990:	e016      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800699a:	d10d      	bne.n	80069b8 <UART_Start_Receive_IT+0x9c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <UART_Start_Receive_IT+0x92>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	227f      	movs	r2, #127	@ 0x7f
 80069a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ac:	e008      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	223f      	movs	r2, #63	@ 0x3f
 80069b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069b6:	e003      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	@ 0x22
 80069cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80069e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80069f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80069f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80069fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e3      	bne.n	80069d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a10:	d14f      	bne.n	8006ab2 <UART_Start_Receive_IT+0x196>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d349      	bcc.n	8006ab2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d107      	bne.n	8006a38 <UART_Start_Receive_IT+0x11c>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a47      	ldr	r2, [pc, #284]	@ (8006b50 <UART_Start_Receive_IT+0x234>)
 8006a34:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a36:	e002      	b.n	8006a3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a46      	ldr	r2, [pc, #280]	@ (8006b54 <UART_Start_Receive_IT+0x238>)
 8006a3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01a      	beq.n	8006a7c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a6a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e4      	bne.n	8006a46 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e5      	bne.n	8006a7c <UART_Start_Receive_IT+0x160>
 8006ab0:	e046      	b.n	8006b40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aba:	d107      	bne.n	8006acc <UART_Start_Receive_IT+0x1b0>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a24      	ldr	r2, [pc, #144]	@ (8006b58 <UART_Start_Receive_IT+0x23c>)
 8006ac8:	675a      	str	r2, [r3, #116]	@ 0x74
 8006aca:	e002      	b.n	8006ad2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a23      	ldr	r2, [pc, #140]	@ (8006b5c <UART_Start_Receive_IT+0x240>)
 8006ad0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d019      	beq.n	8006b0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006aee:	677b      	str	r3, [r7, #116]	@ 0x74
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006afe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_Start_Receive_IT+0x1be>
 8006b0c:	e018      	b.n	8006b40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f043 0320 	orr.w	r3, r3, #32
 8006b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	6a3a      	ldr	r2, [r7, #32]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	378c      	adds	r7, #140	@ 0x8c
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	08007385 	.word	0x08007385
 8006b54:	08007021 	.word	0x08007021
 8006b58:	08006e69 	.word	0x08006e69
 8006b5c:	08006cb1 	.word	0x08006cb1

08006b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b095      	sub	sp, #84	@ 0x54
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e3      	bne.n	8006b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d118      	bne.n	8006c0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f023 0310 	bic.w	r3, r3, #16
 8006bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6979      	ldr	r1, [r7, #20]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	613b      	str	r3, [r7, #16]
   return(result);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e6      	bne.n	8006bda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c20:	bf00      	nop
 8006c22:	3754      	adds	r7, #84	@ 0x54
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff f9a6 	bl	8005f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e6      	bne.n	8006c60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff f967 	bl	8005f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca6:	bf00      	nop
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b09c      	sub	sp, #112	@ 0x70
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cc8:	2b22      	cmp	r3, #34	@ 0x22
 8006cca:	f040 80be 	bne.w	8006e4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cdc:	b2d9      	uxtb	r1, r3
 8006cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce8:	400a      	ands	r2, r1
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f040 80a1 	bne.w	8006e5a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e6      	bne.n	8006d18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a33      	ldr	r2, [pc, #204]	@ (8006e64 <UART_RxISR_8BIT+0x1b4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d01f      	beq.n	8006ddc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d018      	beq.n	8006ddc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	623b      	str	r3, [r7, #32]
   return(result);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e6      	bne.n	8006daa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d12e      	bne.n	8006e42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0310 	bic.w	r3, r3, #16
 8006dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	69b9      	ldr	r1, [r7, #24]
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	617b      	str	r3, [r7, #20]
   return(result);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d103      	bne.n	8006e32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fa fc24 	bl	8001688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e40:	e00b      	b.n	8006e5a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff f8a0 	bl	8005f88 <HAL_UART_RxCpltCallback>
}
 8006e48:	e007      	b.n	8006e5a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0208 	orr.w	r2, r2, #8
 8006e58:	619a      	str	r2, [r3, #24]
}
 8006e5a:	bf00      	nop
 8006e5c:	3770      	adds	r7, #112	@ 0x70
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40008000 	.word	0x40008000

08006e68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b09c      	sub	sp, #112	@ 0x70
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e80:	2b22      	cmp	r3, #34	@ 0x22
 8006e82:	f040 80be 	bne.w	8007002 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e94:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006e9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ea4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 80a1 	bne.w	8007012 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ee4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ef0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ef4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e6      	bne.n	8006ed0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f22:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a33      	ldr	r2, [pc, #204]	@ (800701c <UART_RxISR_16BIT+0x1b4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d01f      	beq.n	8006f94 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d018      	beq.n	8006f94 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f82:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e6      	bne.n	8006f62 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d12e      	bne.n	8006ffa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0310 	bic.w	r3, r3, #16
 8006fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6979      	ldr	r1, [r7, #20]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e6      	bne.n	8006fa2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b10      	cmp	r3, #16
 8006fe0:	d103      	bne.n	8006fea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fa fb48 	bl	8001688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ff8:	e00b      	b.n	8007012 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fe ffc4 	bl	8005f88 <HAL_UART_RxCpltCallback>
}
 8007000:	e007      	b.n	8007012 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0208 	orr.w	r2, r2, #8
 8007010:	619a      	str	r2, [r3, #24]
}
 8007012:	bf00      	nop
 8007014:	3770      	adds	r7, #112	@ 0x70
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40008000 	.word	0x40008000

08007020 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b0ac      	sub	sp, #176	@ 0xb0
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800702e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007056:	2b22      	cmp	r3, #34	@ 0x22
 8007058:	f040 8183 	bne.w	8007362 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007062:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007066:	e126      	b.n	80072b6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007072:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007076:	b2d9      	uxtb	r1, r3
 8007078:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	400a      	ands	r2, r1
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d053      	beq.n	8007162 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d011      	beq.n	80070ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80070c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2201      	movs	r2, #1
 80070d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e0:	f043 0201 	orr.w	r2, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d011      	beq.n	800711a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80070f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2202      	movs	r2, #2
 8007108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007110:	f043 0204 	orr.w	r2, r3, #4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800711a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d011      	beq.n	800714a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2204      	movs	r2, #4
 8007138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	f043 0202 	orr.w	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007150:	2b00      	cmp	r3, #0
 8007152:	d006      	beq.n	8007162 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fe ff21 	bl	8005f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 80a3 	bne.w	80072b6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800717e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007194:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007198:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80071a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e4      	bne.n	8007170 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80071b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 80071d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80071d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80071dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e1      	bne.n	80071a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a60      	ldr	r2, [pc, #384]	@ (800737c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d021      	beq.n	8007244 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01a      	beq.n	8007244 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800721c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800721e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007230:	657b      	str	r3, [r7, #84]	@ 0x54
 8007232:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007236:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800723e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e4      	bne.n	800720e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d130      	bne.n	80072ae <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	f023 0310 	bic.w	r3, r3, #16
 8007266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007274:	643b      	str	r3, [r7, #64]	@ 0x40
 8007276:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800727a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e4      	bne.n	8007252 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b10      	cmp	r3, #16
 8007294:	d103      	bne.n	800729e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2210      	movs	r2, #16
 800729c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa f9ee 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80072ac:	e00e      	b.n	80072cc <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fe fe6a 	bl	8005f88 <HAL_UART_RxCpltCallback>
        break;
 80072b4:	e00a      	b.n	80072cc <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072b6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d006      	beq.n	80072cc <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80072be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f47f aece 	bne.w	8007068 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072d2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d049      	beq.n	8007372 <UART_RxISR_8BIT_FIFOEN+0x352>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072e4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d242      	bcs.n	8007372 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007302:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007310:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e3      	bne.n	80072ec <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a16      	ldr	r2, [pc, #88]	@ (8007380 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007328:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	60bb      	str	r3, [r7, #8]
   return(result);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f043 0320 	orr.w	r3, r3, #32
 800733e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6979      	ldr	r1, [r7, #20]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	613b      	str	r3, [r7, #16]
   return(result);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e4      	bne.n	800732a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007360:	e007      	b.n	8007372 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0208 	orr.w	r2, r2, #8
 8007370:	619a      	str	r2, [r3, #24]
}
 8007372:	bf00      	nop
 8007374:	37b0      	adds	r7, #176	@ 0xb0
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40008000 	.word	0x40008000
 8007380:	08006cb1 	.word	0x08006cb1

08007384 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b0ae      	sub	sp, #184	@ 0xb8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007392:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ba:	2b22      	cmp	r3, #34	@ 0x22
 80073bc:	f040 8187 	bne.w	80076ce <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ca:	e12a      	b.n	8007622 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80073de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80073e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80073e6:	4013      	ands	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	2b00      	cmp	r3, #0
 8007420:	d053      	beq.n	80074ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d011      	beq.n	8007452 <UART_RxISR_16BIT_FIFOEN+0xce>
 800742e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2201      	movs	r2, #1
 8007440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007448:	f043 0201 	orr.w	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007452:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d011      	beq.n	8007482 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800745e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2202      	movs	r2, #2
 8007470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007478:	f043 0204 	orr.w	r2, r3, #4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007486:	f003 0304 	and.w	r3, r3, #4
 800748a:	2b00      	cmp	r3, #0
 800748c:	d011      	beq.n	80074b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800748e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2204      	movs	r2, #4
 80074a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a8:	f043 0202 	orr.w	r2, r3, #2
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fe fd6d 	bl	8005f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 80a5 	bne.w	8007622 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007502:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800750c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e2      	bne.n	80074d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800753a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800753c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e1      	bne.n	8007512 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a60      	ldr	r2, [pc, #384]	@ (80076e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d021      	beq.n	80075b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01a      	beq.n	80075b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800758a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800758e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800759c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800759e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e4      	bne.n	800757a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d130      	bne.n	800761a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ce:	f023 0310 	bic.w	r3, r3, #16
 80075d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e4      	bne.n	80075be <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d103      	bne.n	800760a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2210      	movs	r2, #16
 8007608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fa f838 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007618:	e00e      	b.n	8007638 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fe fcb4 	bl	8005f88 <HAL_UART_RxCpltCallback>
        break;
 8007620:	e00a      	b.n	8007638 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007622:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800762a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	f47f aeca 	bne.w	80073cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800763e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007642:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007646:	2b00      	cmp	r3, #0
 8007648:	d049      	beq.n	80076de <UART_RxISR_16BIT_FIFOEN+0x35a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007650:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007654:	429a      	cmp	r2, r3
 8007656:	d242      	bcs.n	80076de <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	623b      	str	r3, [r7, #32]
   return(result);
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800766e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800767c:	633a      	str	r2, [r7, #48]	@ 0x30
 800767e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e3      	bne.n	8007658 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007694:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f043 0320 	orr.w	r3, r3, #32
 80076aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	617b      	str	r3, [r7, #20]
   return(result);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e4      	bne.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076cc:	e007      	b.n	80076de <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699a      	ldr	r2, [r3, #24]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0208 	orr.w	r2, r2, #8
 80076dc:	619a      	str	r2, [r3, #24]
}
 80076de:	bf00      	nop
 80076e0:	37b8      	adds	r7, #184	@ 0xb8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	40008000 	.word	0x40008000
 80076ec:	08006e69 	.word	0x08006e69

080076f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_UARTEx_DisableFifoMode+0x16>
 800773e:	2302      	movs	r3, #2
 8007740:	e027      	b.n	8007792 <HAL_UARTEx_DisableFifoMode+0x66>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2224      	movs	r2, #36	@ 0x24
 800774e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0201 	bic.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007770:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e02d      	b.n	8007812 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2224      	movs	r2, #36	@ 0x24
 80077c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8a0 	bl	8007938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2220      	movs	r2, #32
 8007804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800782e:	2302      	movs	r3, #2
 8007830:	e02d      	b.n	800788e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2224      	movs	r2, #36	@ 0x24
 800783e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f862 	bl	8007938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b08c      	sub	sp, #48	@ 0x30
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	4613      	mov	r3, r2
 80078a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d13b      	bne.n	800792c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e034      	b.n	800792e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	461a      	mov	r2, r3
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f7ff f820 	bl	800691c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d11d      	bne.n	8007920 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2210      	movs	r2, #16
 80078ea:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	617b      	str	r3, [r7, #20]
   return(result);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f043 0310 	orr.w	r3, r3, #16
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
 800790c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6a39      	ldr	r1, [r7, #32]
 8007910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	61fb      	str	r3, [r7, #28]
   return(result);
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e6      	bne.n	80078ec <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800791e:	e002      	b.n	8007926 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8007926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800792a:	e000      	b.n	800792e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3730      	adds	r7, #48	@ 0x30
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007944:	2b00      	cmp	r3, #0
 8007946:	d108      	bne.n	800795a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007958:	e031      	b.n	80079be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800795a:	2308      	movs	r3, #8
 800795c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800795e:	2308      	movs	r3, #8
 8007960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	0e5b      	lsrs	r3, r3, #25
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	0f5b      	lsrs	r3, r3, #29
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	7b3a      	ldrb	r2, [r7, #12]
 8007986:	4911      	ldr	r1, [pc, #68]	@ (80079cc <UARTEx_SetNbDataToProcess+0x94>)
 8007988:	5c8a      	ldrb	r2, [r1, r2]
 800798a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800798e:	7b3a      	ldrb	r2, [r7, #12]
 8007990:	490f      	ldr	r1, [pc, #60]	@ (80079d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007994:	fb93 f3f2 	sdiv	r3, r3, r2
 8007998:	b29a      	uxth	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	7b7a      	ldrb	r2, [r7, #13]
 80079a4:	4909      	ldr	r1, [pc, #36]	@ (80079cc <UARTEx_SetNbDataToProcess+0x94>)
 80079a6:	5c8a      	ldrb	r2, [r1, r2]
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079ac:	7b7a      	ldrb	r2, [r7, #13]
 80079ae:	4908      	ldr	r1, [pc, #32]	@ (80079d0 <UARTEx_SetNbDataToProcess+0x98>)
 80079b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	08008978 	.word	0x08008978
 80079d0:	08008980 	.word	0x08008980

080079d4 <sbrk_aligned>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007a14 <sbrk_aligned+0x40>)
 80079d8:	460c      	mov	r4, r1
 80079da:	6831      	ldr	r1, [r6, #0]
 80079dc:	4605      	mov	r5, r0
 80079de:	b911      	cbnz	r1, 80079e6 <sbrk_aligned+0x12>
 80079e0:	f000 fada 	bl	8007f98 <_sbrk_r>
 80079e4:	6030      	str	r0, [r6, #0]
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f000 fad5 	bl	8007f98 <_sbrk_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d103      	bne.n	80079fa <sbrk_aligned+0x26>
 80079f2:	f04f 34ff 	mov.w	r4, #4294967295
 80079f6:	4620      	mov	r0, r4
 80079f8:	bd70      	pop	{r4, r5, r6, pc}
 80079fa:	1cc4      	adds	r4, r0, #3
 80079fc:	f024 0403 	bic.w	r4, r4, #3
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	d0f8      	beq.n	80079f6 <sbrk_aligned+0x22>
 8007a04:	1a21      	subs	r1, r4, r0
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fac6 	bl	8007f98 <_sbrk_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d1f2      	bne.n	80079f6 <sbrk_aligned+0x22>
 8007a10:	e7ef      	b.n	80079f2 <sbrk_aligned+0x1e>
 8007a12:	bf00      	nop
 8007a14:	20000220 	.word	0x20000220

08007a18 <_malloc_r>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	1ccd      	adds	r5, r1, #3
 8007a1e:	f025 0503 	bic.w	r5, r5, #3
 8007a22:	3508      	adds	r5, #8
 8007a24:	2d0c      	cmp	r5, #12
 8007a26:	bf38      	it	cc
 8007a28:	250c      	movcc	r5, #12
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	db01      	blt.n	8007a34 <_malloc_r+0x1c>
 8007a30:	42a9      	cmp	r1, r5
 8007a32:	d904      	bls.n	8007a3e <_malloc_r+0x26>
 8007a34:	230c      	movs	r3, #12
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b14 <_malloc_r+0xfc>
 8007a42:	f000 f869 	bl	8007b18 <__malloc_lock>
 8007a46:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	bb44      	cbnz	r4, 8007aa0 <_malloc_r+0x88>
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ffbf 	bl	80079d4 <sbrk_aligned>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	4604      	mov	r4, r0
 8007a5a:	d158      	bne.n	8007b0e <_malloc_r+0xf6>
 8007a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a60:	4627      	mov	r7, r4
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d143      	bne.n	8007aee <_malloc_r+0xd6>
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d04b      	beq.n	8007b02 <_malloc_r+0xea>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4630      	mov	r0, r6
 8007a70:	eb04 0903 	add.w	r9, r4, r3
 8007a74:	f000 fa90 	bl	8007f98 <_sbrk_r>
 8007a78:	4581      	cmp	r9, r0
 8007a7a:	d142      	bne.n	8007b02 <_malloc_r+0xea>
 8007a7c:	6821      	ldr	r1, [r4, #0]
 8007a7e:	1a6d      	subs	r5, r5, r1
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ffa6 	bl	80079d4 <sbrk_aligned>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d03a      	beq.n	8007b02 <_malloc_r+0xea>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	442b      	add	r3, r5
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	f8d8 3000 	ldr.w	r3, [r8]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	bb62      	cbnz	r2, 8007af4 <_malloc_r+0xdc>
 8007a9a:	f8c8 7000 	str.w	r7, [r8]
 8007a9e:	e00f      	b.n	8007ac0 <_malloc_r+0xa8>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	1b52      	subs	r2, r2, r5
 8007aa4:	d420      	bmi.n	8007ae8 <_malloc_r+0xd0>
 8007aa6:	2a0b      	cmp	r2, #11
 8007aa8:	d917      	bls.n	8007ada <_malloc_r+0xc2>
 8007aaa:	1961      	adds	r1, r4, r5
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	6025      	str	r5, [r4, #0]
 8007ab0:	bf18      	it	ne
 8007ab2:	6059      	strne	r1, [r3, #4]
 8007ab4:	6863      	ldr	r3, [r4, #4]
 8007ab6:	bf08      	it	eq
 8007ab8:	f8c8 1000 	streq.w	r1, [r8]
 8007abc:	5162      	str	r2, [r4, r5]
 8007abe:	604b      	str	r3, [r1, #4]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 f82f 	bl	8007b24 <__malloc_unlock>
 8007ac6:	f104 000b 	add.w	r0, r4, #11
 8007aca:	1d23      	adds	r3, r4, #4
 8007acc:	f020 0007 	bic.w	r0, r0, #7
 8007ad0:	1ac2      	subs	r2, r0, r3
 8007ad2:	bf1c      	itt	ne
 8007ad4:	1a1b      	subne	r3, r3, r0
 8007ad6:	50a3      	strne	r3, [r4, r2]
 8007ad8:	e7af      	b.n	8007a3a <_malloc_r+0x22>
 8007ada:	6862      	ldr	r2, [r4, #4]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	bf0c      	ite	eq
 8007ae0:	f8c8 2000 	streq.w	r2, [r8]
 8007ae4:	605a      	strne	r2, [r3, #4]
 8007ae6:	e7eb      	b.n	8007ac0 <_malloc_r+0xa8>
 8007ae8:	4623      	mov	r3, r4
 8007aea:	6864      	ldr	r4, [r4, #4]
 8007aec:	e7ae      	b.n	8007a4c <_malloc_r+0x34>
 8007aee:	463c      	mov	r4, r7
 8007af0:	687f      	ldr	r7, [r7, #4]
 8007af2:	e7b6      	b.n	8007a62 <_malloc_r+0x4a>
 8007af4:	461a      	mov	r2, r3
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d1fb      	bne.n	8007af4 <_malloc_r+0xdc>
 8007afc:	2300      	movs	r3, #0
 8007afe:	6053      	str	r3, [r2, #4]
 8007b00:	e7de      	b.n	8007ac0 <_malloc_r+0xa8>
 8007b02:	230c      	movs	r3, #12
 8007b04:	6033      	str	r3, [r6, #0]
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f80c 	bl	8007b24 <__malloc_unlock>
 8007b0c:	e794      	b.n	8007a38 <_malloc_r+0x20>
 8007b0e:	6005      	str	r5, [r0, #0]
 8007b10:	e7d6      	b.n	8007ac0 <_malloc_r+0xa8>
 8007b12:	bf00      	nop
 8007b14:	20000224 	.word	0x20000224

08007b18 <__malloc_lock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__malloc_lock+0x8>)
 8007b1a:	f000 ba8a 	b.w	8008032 <__retarget_lock_acquire_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20000368 	.word	0x20000368

08007b24 <__malloc_unlock>:
 8007b24:	4801      	ldr	r0, [pc, #4]	@ (8007b2c <__malloc_unlock+0x8>)
 8007b26:	f000 ba85 	b.w	8008034 <__retarget_lock_release_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	20000368 	.word	0x20000368

08007b30 <std>:
 8007b30:	2300      	movs	r3, #0
 8007b32:	b510      	push	{r4, lr}
 8007b34:	4604      	mov	r4, r0
 8007b36:	e9c0 3300 	strd	r3, r3, [r0]
 8007b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b3e:	6083      	str	r3, [r0, #8]
 8007b40:	8181      	strh	r1, [r0, #12]
 8007b42:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b44:	81c2      	strh	r2, [r0, #14]
 8007b46:	6183      	str	r3, [r0, #24]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	305c      	adds	r0, #92	@ 0x5c
 8007b4e:	f000 f9e7 	bl	8007f20 <memset>
 8007b52:	4b0d      	ldr	r3, [pc, #52]	@ (8007b88 <std+0x58>)
 8007b54:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b56:	4b0d      	ldr	r3, [pc, #52]	@ (8007b8c <std+0x5c>)
 8007b58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <std+0x60>)
 8007b5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <std+0x64>)
 8007b60:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <std+0x68>)
 8007b64:	6224      	str	r4, [r4, #32]
 8007b66:	429c      	cmp	r4, r3
 8007b68:	d006      	beq.n	8007b78 <std+0x48>
 8007b6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b6e:	4294      	cmp	r4, r2
 8007b70:	d002      	beq.n	8007b78 <std+0x48>
 8007b72:	33d0      	adds	r3, #208	@ 0xd0
 8007b74:	429c      	cmp	r4, r3
 8007b76:	d105      	bne.n	8007b84 <std+0x54>
 8007b78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f000 ba56 	b.w	8008030 <__retarget_lock_init_recursive>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	08007d71 	.word	0x08007d71
 8007b8c:	08007d93 	.word	0x08007d93
 8007b90:	08007dcb 	.word	0x08007dcb
 8007b94:	08007def 	.word	0x08007def
 8007b98:	20000228 	.word	0x20000228

08007b9c <stdio_exit_handler>:
 8007b9c:	4a02      	ldr	r2, [pc, #8]	@ (8007ba8 <stdio_exit_handler+0xc>)
 8007b9e:	4903      	ldr	r1, [pc, #12]	@ (8007bac <stdio_exit_handler+0x10>)
 8007ba0:	4803      	ldr	r0, [pc, #12]	@ (8007bb0 <stdio_exit_handler+0x14>)
 8007ba2:	f000 b869 	b.w	8007c78 <_fwalk_sglue>
 8007ba6:	bf00      	nop
 8007ba8:	2000000c 	.word	0x2000000c
 8007bac:	080081d5 	.word	0x080081d5
 8007bb0:	2000001c 	.word	0x2000001c

08007bb4 <cleanup_stdio>:
 8007bb4:	6841      	ldr	r1, [r0, #4]
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007be8 <cleanup_stdio+0x34>)
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	d001      	beq.n	8007bc4 <cleanup_stdio+0x10>
 8007bc0:	f000 fb08 	bl	80081d4 <_fflush_r>
 8007bc4:	68a1      	ldr	r1, [r4, #8]
 8007bc6:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <cleanup_stdio+0x38>)
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	d002      	beq.n	8007bd2 <cleanup_stdio+0x1e>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fb01 	bl	80081d4 <_fflush_r>
 8007bd2:	68e1      	ldr	r1, [r4, #12]
 8007bd4:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <cleanup_stdio+0x3c>)
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d004      	beq.n	8007be4 <cleanup_stdio+0x30>
 8007bda:	4620      	mov	r0, r4
 8007bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be0:	f000 baf8 	b.w	80081d4 <_fflush_r>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	bf00      	nop
 8007be8:	20000228 	.word	0x20000228
 8007bec:	20000290 	.word	0x20000290
 8007bf0:	200002f8 	.word	0x200002f8

08007bf4 <global_stdio_init.part.0>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c24 <global_stdio_init.part.0+0x30>)
 8007bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8007c28 <global_stdio_init.part.0+0x34>)
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8007c2c <global_stdio_init.part.0+0x38>)
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	2200      	movs	r2, #0
 8007c02:	2104      	movs	r1, #4
 8007c04:	f7ff ff94 	bl	8007b30 <std>
 8007c08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	2109      	movs	r1, #9
 8007c10:	f7ff ff8e 	bl	8007b30 <std>
 8007c14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c18:	2202      	movs	r2, #2
 8007c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1e:	2112      	movs	r1, #18
 8007c20:	f7ff bf86 	b.w	8007b30 <std>
 8007c24:	20000360 	.word	0x20000360
 8007c28:	20000228 	.word	0x20000228
 8007c2c:	08007b9d 	.word	0x08007b9d

08007c30 <__sfp_lock_acquire>:
 8007c30:	4801      	ldr	r0, [pc, #4]	@ (8007c38 <__sfp_lock_acquire+0x8>)
 8007c32:	f000 b9fe 	b.w	8008032 <__retarget_lock_acquire_recursive>
 8007c36:	bf00      	nop
 8007c38:	20000369 	.word	0x20000369

08007c3c <__sfp_lock_release>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	@ (8007c44 <__sfp_lock_release+0x8>)
 8007c3e:	f000 b9f9 	b.w	8008034 <__retarget_lock_release_recursive>
 8007c42:	bf00      	nop
 8007c44:	20000369 	.word	0x20000369

08007c48 <__sinit>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	f7ff fff0 	bl	8007c30 <__sfp_lock_acquire>
 8007c50:	6a23      	ldr	r3, [r4, #32]
 8007c52:	b11b      	cbz	r3, 8007c5c <__sinit+0x14>
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f7ff bff0 	b.w	8007c3c <__sfp_lock_release>
 8007c5c:	4b04      	ldr	r3, [pc, #16]	@ (8007c70 <__sinit+0x28>)
 8007c5e:	6223      	str	r3, [r4, #32]
 8007c60:	4b04      	ldr	r3, [pc, #16]	@ (8007c74 <__sinit+0x2c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f5      	bne.n	8007c54 <__sinit+0xc>
 8007c68:	f7ff ffc4 	bl	8007bf4 <global_stdio_init.part.0>
 8007c6c:	e7f2      	b.n	8007c54 <__sinit+0xc>
 8007c6e:	bf00      	nop
 8007c70:	08007bb5 	.word	0x08007bb5
 8007c74:	20000360 	.word	0x20000360

08007c78 <_fwalk_sglue>:
 8007c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	4688      	mov	r8, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	2600      	movs	r6, #0
 8007c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c88:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8c:	d505      	bpl.n	8007c9a <_fwalk_sglue+0x22>
 8007c8e:	6824      	ldr	r4, [r4, #0]
 8007c90:	2c00      	cmp	r4, #0
 8007c92:	d1f7      	bne.n	8007c84 <_fwalk_sglue+0xc>
 8007c94:	4630      	mov	r0, r6
 8007c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d907      	bls.n	8007cb0 <_fwalk_sglue+0x38>
 8007ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	d003      	beq.n	8007cb0 <_fwalk_sglue+0x38>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4638      	mov	r0, r7
 8007cac:	47c0      	blx	r8
 8007cae:	4306      	orrs	r6, r0
 8007cb0:	3568      	adds	r5, #104	@ 0x68
 8007cb2:	e7e9      	b.n	8007c88 <_fwalk_sglue+0x10>

08007cb4 <_puts_r>:
 8007cb4:	6a03      	ldr	r3, [r0, #32]
 8007cb6:	b570      	push	{r4, r5, r6, lr}
 8007cb8:	6884      	ldr	r4, [r0, #8]
 8007cba:	4605      	mov	r5, r0
 8007cbc:	460e      	mov	r6, r1
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <_puts_r+0x10>
 8007cc0:	f7ff ffc2 	bl	8007c48 <__sinit>
 8007cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cc6:	07db      	lsls	r3, r3, #31
 8007cc8:	d405      	bmi.n	8007cd6 <_puts_r+0x22>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	0598      	lsls	r0, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_puts_r+0x22>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cd2:	f000 f9ae 	bl	8008032 <__retarget_lock_acquire_recursive>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	0719      	lsls	r1, r3, #28
 8007cda:	d502      	bpl.n	8007ce2 <_puts_r+0x2e>
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d135      	bne.n	8007d4e <_puts_r+0x9a>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 f8c5 	bl	8007e74 <__swsetup_r>
 8007cea:	b380      	cbz	r0, 8007d4e <_puts_r+0x9a>
 8007cec:	f04f 35ff 	mov.w	r5, #4294967295
 8007cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf2:	07da      	lsls	r2, r3, #31
 8007cf4:	d405      	bmi.n	8007d02 <_puts_r+0x4e>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_puts_r+0x4e>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cfe:	f000 f999 	bl	8008034 <__retarget_lock_release_recursive>
 8007d02:	4628      	mov	r0, r5
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	da04      	bge.n	8007d14 <_puts_r+0x60>
 8007d0a:	69a2      	ldr	r2, [r4, #24]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	dc17      	bgt.n	8007d40 <_puts_r+0x8c>
 8007d10:	290a      	cmp	r1, #10
 8007d12:	d015      	beq.n	8007d40 <_puts_r+0x8c>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	7019      	strb	r1, [r3, #0]
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d22:	3b01      	subs	r3, #1
 8007d24:	60a3      	str	r3, [r4, #8]
 8007d26:	2900      	cmp	r1, #0
 8007d28:	d1ed      	bne.n	8007d06 <_puts_r+0x52>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da11      	bge.n	8007d52 <_puts_r+0x9e>
 8007d2e:	4622      	mov	r2, r4
 8007d30:	210a      	movs	r1, #10
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 f85f 	bl	8007df6 <__swbuf_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d0d7      	beq.n	8007cec <_puts_r+0x38>
 8007d3c:	250a      	movs	r5, #10
 8007d3e:	e7d7      	b.n	8007cf0 <_puts_r+0x3c>
 8007d40:	4622      	mov	r2, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f857 	bl	8007df6 <__swbuf_r>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d1e7      	bne.n	8007d1c <_puts_r+0x68>
 8007d4c:	e7ce      	b.n	8007cec <_puts_r+0x38>
 8007d4e:	3e01      	subs	r6, #1
 8007d50:	e7e4      	b.n	8007d1c <_puts_r+0x68>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	6022      	str	r2, [r4, #0]
 8007d58:	220a      	movs	r2, #10
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	e7ee      	b.n	8007d3c <_puts_r+0x88>
	...

08007d60 <puts>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	@ (8007d6c <puts+0xc>)
 8007d62:	4601      	mov	r1, r0
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f7ff bfa5 	b.w	8007cb4 <_puts_r>
 8007d6a:	bf00      	nop
 8007d6c:	20000018 	.word	0x20000018

08007d70 <__sread>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	460c      	mov	r4, r1
 8007d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d78:	f000 f8fc 	bl	8007f74 <_read_r>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	bfab      	itete	ge
 8007d80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d82:	89a3      	ldrhlt	r3, [r4, #12]
 8007d84:	181b      	addge	r3, r3, r0
 8007d86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d8a:	bfac      	ite	ge
 8007d8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d8e:	81a3      	strhlt	r3, [r4, #12]
 8007d90:	bd10      	pop	{r4, pc}

08007d92 <__swrite>:
 8007d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d96:	461f      	mov	r7, r3
 8007d98:	898b      	ldrh	r3, [r1, #12]
 8007d9a:	05db      	lsls	r3, r3, #23
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4616      	mov	r6, r2
 8007da2:	d505      	bpl.n	8007db0 <__swrite+0x1e>
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	2302      	movs	r3, #2
 8007daa:	2200      	movs	r2, #0
 8007dac:	f000 f8d0 	bl	8007f50 <_lseek_r>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	4632      	mov	r2, r6
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc6:	f000 b8f7 	b.w	8007fb8 <_write_r>

08007dca <__sseek>:
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	460c      	mov	r4, r1
 8007dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd2:	f000 f8bd 	bl	8007f50 <_lseek_r>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	bf15      	itete	ne
 8007ddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007de2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007de6:	81a3      	strheq	r3, [r4, #12]
 8007de8:	bf18      	it	ne
 8007dea:	81a3      	strhne	r3, [r4, #12]
 8007dec:	bd10      	pop	{r4, pc}

08007dee <__sclose>:
 8007dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df2:	f000 b89d 	b.w	8007f30 <_close_r>

08007df6 <__swbuf_r>:
 8007df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df8:	460e      	mov	r6, r1
 8007dfa:	4614      	mov	r4, r2
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	b118      	cbz	r0, 8007e08 <__swbuf_r+0x12>
 8007e00:	6a03      	ldr	r3, [r0, #32]
 8007e02:	b90b      	cbnz	r3, 8007e08 <__swbuf_r+0x12>
 8007e04:	f7ff ff20 	bl	8007c48 <__sinit>
 8007e08:	69a3      	ldr	r3, [r4, #24]
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	071a      	lsls	r2, r3, #28
 8007e10:	d501      	bpl.n	8007e16 <__swbuf_r+0x20>
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	b943      	cbnz	r3, 8007e28 <__swbuf_r+0x32>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 f82b 	bl	8007e74 <__swsetup_r>
 8007e1e:	b118      	cbz	r0, 8007e28 <__swbuf_r+0x32>
 8007e20:	f04f 37ff 	mov.w	r7, #4294967295
 8007e24:	4638      	mov	r0, r7
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	6922      	ldr	r2, [r4, #16]
 8007e2c:	1a98      	subs	r0, r3, r2
 8007e2e:	6963      	ldr	r3, [r4, #20]
 8007e30:	b2f6      	uxtb	r6, r6
 8007e32:	4283      	cmp	r3, r0
 8007e34:	4637      	mov	r7, r6
 8007e36:	dc05      	bgt.n	8007e44 <__swbuf_r+0x4e>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f9ca 	bl	80081d4 <_fflush_r>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1ed      	bne.n	8007e20 <__swbuf_r+0x2a>
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	60a3      	str	r3, [r4, #8]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	701e      	strb	r6, [r3, #0]
 8007e52:	6962      	ldr	r2, [r4, #20]
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d004      	beq.n	8007e64 <__swbuf_r+0x6e>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	07db      	lsls	r3, r3, #31
 8007e5e:	d5e1      	bpl.n	8007e24 <__swbuf_r+0x2e>
 8007e60:	2e0a      	cmp	r6, #10
 8007e62:	d1df      	bne.n	8007e24 <__swbuf_r+0x2e>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f9b4 	bl	80081d4 <_fflush_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d0d9      	beq.n	8007e24 <__swbuf_r+0x2e>
 8007e70:	e7d6      	b.n	8007e20 <__swbuf_r+0x2a>
	...

08007e74 <__swsetup_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4b29      	ldr	r3, [pc, #164]	@ (8007f1c <__swsetup_r+0xa8>)
 8007e78:	4605      	mov	r5, r0
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	b118      	cbz	r0, 8007e88 <__swsetup_r+0x14>
 8007e80:	6a03      	ldr	r3, [r0, #32]
 8007e82:	b90b      	cbnz	r3, 8007e88 <__swsetup_r+0x14>
 8007e84:	f7ff fee0 	bl	8007c48 <__sinit>
 8007e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e8c:	0719      	lsls	r1, r3, #28
 8007e8e:	d422      	bmi.n	8007ed6 <__swsetup_r+0x62>
 8007e90:	06da      	lsls	r2, r3, #27
 8007e92:	d407      	bmi.n	8007ea4 <__swsetup_r+0x30>
 8007e94:	2209      	movs	r2, #9
 8007e96:	602a      	str	r2, [r5, #0]
 8007e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea2:	e033      	b.n	8007f0c <__swsetup_r+0x98>
 8007ea4:	0758      	lsls	r0, r3, #29
 8007ea6:	d512      	bpl.n	8007ece <__swsetup_r+0x5a>
 8007ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eaa:	b141      	cbz	r1, 8007ebe <__swsetup_r+0x4a>
 8007eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	d002      	beq.n	8007eba <__swsetup_r+0x46>
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 f8bf 	bl	8008038 <_free_r>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6063      	str	r3, [r4, #4]
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f043 0308 	orr.w	r3, r3, #8
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	b94b      	cbnz	r3, 8007eee <__swsetup_r+0x7a>
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee4:	d003      	beq.n	8007eee <__swsetup_r+0x7a>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f9c1 	bl	8008270 <__smakebuf_r>
 8007eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef2:	f013 0201 	ands.w	r2, r3, #1
 8007ef6:	d00a      	beq.n	8007f0e <__swsetup_r+0x9a>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	60a2      	str	r2, [r4, #8]
 8007efc:	6962      	ldr	r2, [r4, #20]
 8007efe:	4252      	negs	r2, r2
 8007f00:	61a2      	str	r2, [r4, #24]
 8007f02:	6922      	ldr	r2, [r4, #16]
 8007f04:	b942      	cbnz	r2, 8007f18 <__swsetup_r+0xa4>
 8007f06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f0a:	d1c5      	bne.n	8007e98 <__swsetup_r+0x24>
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	0799      	lsls	r1, r3, #30
 8007f10:	bf58      	it	pl
 8007f12:	6962      	ldrpl	r2, [r4, #20]
 8007f14:	60a2      	str	r2, [r4, #8]
 8007f16:	e7f4      	b.n	8007f02 <__swsetup_r+0x8e>
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e7f7      	b.n	8007f0c <__swsetup_r+0x98>
 8007f1c:	20000018 	.word	0x20000018

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <_close_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d06      	ldr	r5, [pc, #24]	@ (8007f4c <_close_r+0x1c>)
 8007f34:	2300      	movs	r3, #0
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	602b      	str	r3, [r5, #0]
 8007f3c:	f7f9 f8b9 	bl	80010b2 <_close>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_close_r+0x1a>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_close_r+0x1a>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	20000364 	.word	0x20000364

08007f50 <_lseek_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d07      	ldr	r5, [pc, #28]	@ (8007f70 <_lseek_r+0x20>)
 8007f54:	4604      	mov	r4, r0
 8007f56:	4608      	mov	r0, r1
 8007f58:	4611      	mov	r1, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	602a      	str	r2, [r5, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7f9 f8ce 	bl	8001100 <_lseek>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_lseek_r+0x1e>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_lseek_r+0x1e>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20000364 	.word	0x20000364

08007f74 <_read_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d07      	ldr	r5, [pc, #28]	@ (8007f94 <_read_r+0x20>)
 8007f78:	4604      	mov	r4, r0
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	602a      	str	r2, [r5, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f7f9 f85c 	bl	8001040 <_read>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_read_r+0x1e>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_read_r+0x1e>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	20000364 	.word	0x20000364

08007f98 <_sbrk_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d06      	ldr	r5, [pc, #24]	@ (8007fb4 <_sbrk_r+0x1c>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f7f9 f8ba 	bl	800111c <_sbrk>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_sbrk_r+0x1a>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_sbrk_r+0x1a>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20000364 	.word	0x20000364

08007fb8 <_write_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	@ (8007fd8 <_write_r+0x20>)
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f7f9 f857 	bl	800107a <_write>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_write_r+0x1e>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_write_r+0x1e>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20000364 	.word	0x20000364

08007fdc <__errno>:
 8007fdc:	4b01      	ldr	r3, [pc, #4]	@ (8007fe4 <__errno+0x8>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000018 	.word	0x20000018

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4d0d      	ldr	r5, [pc, #52]	@ (8008020 <__libc_init_array+0x38>)
 8007fec:	4c0d      	ldr	r4, [pc, #52]	@ (8008024 <__libc_init_array+0x3c>)
 8007fee:	1b64      	subs	r4, r4, r5
 8007ff0:	10a4      	asrs	r4, r4, #2
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	42a6      	cmp	r6, r4
 8007ff6:	d109      	bne.n	800800c <__libc_init_array+0x24>
 8007ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8008028 <__libc_init_array+0x40>)
 8007ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800802c <__libc_init_array+0x44>)
 8007ffc:	f000 f996 	bl	800832c <_init>
 8008000:	1b64      	subs	r4, r4, r5
 8008002:	10a4      	asrs	r4, r4, #2
 8008004:	2600      	movs	r6, #0
 8008006:	42a6      	cmp	r6, r4
 8008008:	d105      	bne.n	8008016 <__libc_init_array+0x2e>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008010:	4798      	blx	r3
 8008012:	3601      	adds	r6, #1
 8008014:	e7ee      	b.n	8007ff4 <__libc_init_array+0xc>
 8008016:	f855 3b04 	ldr.w	r3, [r5], #4
 800801a:	4798      	blx	r3
 800801c:	3601      	adds	r6, #1
 800801e:	e7f2      	b.n	8008006 <__libc_init_array+0x1e>
 8008020:	08008990 	.word	0x08008990
 8008024:	08008990 	.word	0x08008990
 8008028:	08008990 	.word	0x08008990
 800802c:	08008994 	.word	0x08008994

08008030 <__retarget_lock_init_recursive>:
 8008030:	4770      	bx	lr

08008032 <__retarget_lock_acquire_recursive>:
 8008032:	4770      	bx	lr

08008034 <__retarget_lock_release_recursive>:
 8008034:	4770      	bx	lr
	...

08008038 <_free_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4605      	mov	r5, r0
 800803c:	2900      	cmp	r1, #0
 800803e:	d041      	beq.n	80080c4 <_free_r+0x8c>
 8008040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008044:	1f0c      	subs	r4, r1, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	bfb8      	it	lt
 800804a:	18e4      	addlt	r4, r4, r3
 800804c:	f7ff fd64 	bl	8007b18 <__malloc_lock>
 8008050:	4a1d      	ldr	r2, [pc, #116]	@ (80080c8 <_free_r+0x90>)
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	b933      	cbnz	r3, 8008064 <_free_r+0x2c>
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	4628      	mov	r0, r5
 800805c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008060:	f7ff bd60 	b.w	8007b24 <__malloc_unlock>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d908      	bls.n	800807a <_free_r+0x42>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	1821      	adds	r1, r4, r0
 800806c:	428b      	cmp	r3, r1
 800806e:	bf01      	itttt	eq
 8008070:	6819      	ldreq	r1, [r3, #0]
 8008072:	685b      	ldreq	r3, [r3, #4]
 8008074:	1809      	addeq	r1, r1, r0
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	e7ed      	b.n	8008056 <_free_r+0x1e>
 800807a:	461a      	mov	r2, r3
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	b10b      	cbz	r3, 8008084 <_free_r+0x4c>
 8008080:	42a3      	cmp	r3, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x42>
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	1850      	adds	r0, r2, r1
 8008088:	42a0      	cmp	r0, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x6c>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	4401      	add	r1, r0
 8008090:	1850      	adds	r0, r2, r1
 8008092:	4283      	cmp	r3, r0
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	d1e0      	bne.n	800805a <_free_r+0x22>
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6053      	str	r3, [r2, #4]
 800809e:	4408      	add	r0, r1
 80080a0:	6010      	str	r0, [r2, #0]
 80080a2:	e7da      	b.n	800805a <_free_r+0x22>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x74>
 80080a6:	230c      	movs	r3, #12
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	e7d6      	b.n	800805a <_free_r+0x22>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	1821      	adds	r1, r4, r0
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1809      	addeq	r1, r1, r0
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	6054      	str	r4, [r2, #4]
 80080c2:	e7ca      	b.n	800805a <_free_r+0x22>
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	20000224 	.word	0x20000224

080080cc <__sflush_r>:
 80080cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d4:	0716      	lsls	r6, r2, #28
 80080d6:	4605      	mov	r5, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	d454      	bmi.n	8008186 <__sflush_r+0xba>
 80080dc:	684b      	ldr	r3, [r1, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dc02      	bgt.n	80080e8 <__sflush_r+0x1c>
 80080e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dd48      	ble.n	800817a <__sflush_r+0xae>
 80080e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	d045      	beq.n	800817a <__sflush_r+0xae>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080f4:	682f      	ldr	r7, [r5, #0]
 80080f6:	6a21      	ldr	r1, [r4, #32]
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	d030      	beq.n	800815e <__sflush_r+0x92>
 80080fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	0759      	lsls	r1, r3, #29
 8008102:	d505      	bpl.n	8008110 <__sflush_r+0x44>
 8008104:	6863      	ldr	r3, [r4, #4]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800810a:	b10b      	cbz	r3, 8008110 <__sflush_r+0x44>
 800810c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800810e:	1ad2      	subs	r2, r2, r3
 8008110:	2300      	movs	r3, #0
 8008112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	4628      	mov	r0, r5
 8008118:	47b0      	blx	r6
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	d106      	bne.n	800812e <__sflush_r+0x62>
 8008120:	6829      	ldr	r1, [r5, #0]
 8008122:	291d      	cmp	r1, #29
 8008124:	d82b      	bhi.n	800817e <__sflush_r+0xb2>
 8008126:	4a2a      	ldr	r2, [pc, #168]	@ (80081d0 <__sflush_r+0x104>)
 8008128:	410a      	asrs	r2, r1
 800812a:	07d6      	lsls	r6, r2, #31
 800812c:	d427      	bmi.n	800817e <__sflush_r+0xb2>
 800812e:	2200      	movs	r2, #0
 8008130:	6062      	str	r2, [r4, #4]
 8008132:	04d9      	lsls	r1, r3, #19
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	d504      	bpl.n	8008144 <__sflush_r+0x78>
 800813a:	1c42      	adds	r2, r0, #1
 800813c:	d101      	bne.n	8008142 <__sflush_r+0x76>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	b903      	cbnz	r3, 8008144 <__sflush_r+0x78>
 8008142:	6560      	str	r0, [r4, #84]	@ 0x54
 8008144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008146:	602f      	str	r7, [r5, #0]
 8008148:	b1b9      	cbz	r1, 800817a <__sflush_r+0xae>
 800814a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800814e:	4299      	cmp	r1, r3
 8008150:	d002      	beq.n	8008158 <__sflush_r+0x8c>
 8008152:	4628      	mov	r0, r5
 8008154:	f7ff ff70 	bl	8008038 <_free_r>
 8008158:	2300      	movs	r3, #0
 800815a:	6363      	str	r3, [r4, #52]	@ 0x34
 800815c:	e00d      	b.n	800817a <__sflush_r+0xae>
 800815e:	2301      	movs	r3, #1
 8008160:	4628      	mov	r0, r5
 8008162:	47b0      	blx	r6
 8008164:	4602      	mov	r2, r0
 8008166:	1c50      	adds	r0, r2, #1
 8008168:	d1c9      	bne.n	80080fe <__sflush_r+0x32>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0c6      	beq.n	80080fe <__sflush_r+0x32>
 8008170:	2b1d      	cmp	r3, #29
 8008172:	d001      	beq.n	8008178 <__sflush_r+0xac>
 8008174:	2b16      	cmp	r3, #22
 8008176:	d11e      	bne.n	80081b6 <__sflush_r+0xea>
 8008178:	602f      	str	r7, [r5, #0]
 800817a:	2000      	movs	r0, #0
 800817c:	e022      	b.n	80081c4 <__sflush_r+0xf8>
 800817e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008182:	b21b      	sxth	r3, r3
 8008184:	e01b      	b.n	80081be <__sflush_r+0xf2>
 8008186:	690f      	ldr	r7, [r1, #16]
 8008188:	2f00      	cmp	r7, #0
 800818a:	d0f6      	beq.n	800817a <__sflush_r+0xae>
 800818c:	0793      	lsls	r3, r2, #30
 800818e:	680e      	ldr	r6, [r1, #0]
 8008190:	bf08      	it	eq
 8008192:	694b      	ldreq	r3, [r1, #20]
 8008194:	600f      	str	r7, [r1, #0]
 8008196:	bf18      	it	ne
 8008198:	2300      	movne	r3, #0
 800819a:	eba6 0807 	sub.w	r8, r6, r7
 800819e:	608b      	str	r3, [r1, #8]
 80081a0:	f1b8 0f00 	cmp.w	r8, #0
 80081a4:	dde9      	ble.n	800817a <__sflush_r+0xae>
 80081a6:	6a21      	ldr	r1, [r4, #32]
 80081a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081aa:	4643      	mov	r3, r8
 80081ac:	463a      	mov	r2, r7
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b0      	blx	r6
 80081b2:	2800      	cmp	r0, #0
 80081b4:	dc08      	bgt.n	80081c8 <__sflush_r+0xfc>
 80081b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	4407      	add	r7, r0
 80081ca:	eba8 0800 	sub.w	r8, r8, r0
 80081ce:	e7e7      	b.n	80081a0 <__sflush_r+0xd4>
 80081d0:	dfbffffe 	.word	0xdfbffffe

080081d4 <_fflush_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b913      	cbnz	r3, 80081e4 <_fflush_r+0x10>
 80081de:	2500      	movs	r5, #0
 80081e0:	4628      	mov	r0, r5
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	b118      	cbz	r0, 80081ee <_fflush_r+0x1a>
 80081e6:	6a03      	ldr	r3, [r0, #32]
 80081e8:	b90b      	cbnz	r3, 80081ee <_fflush_r+0x1a>
 80081ea:	f7ff fd2d 	bl	8007c48 <__sinit>
 80081ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0f3      	beq.n	80081de <_fflush_r+0xa>
 80081f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081f8:	07d0      	lsls	r0, r2, #31
 80081fa:	d404      	bmi.n	8008206 <_fflush_r+0x32>
 80081fc:	0599      	lsls	r1, r3, #22
 80081fe:	d402      	bmi.n	8008206 <_fflush_r+0x32>
 8008200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008202:	f7ff ff16 	bl	8008032 <__retarget_lock_acquire_recursive>
 8008206:	4628      	mov	r0, r5
 8008208:	4621      	mov	r1, r4
 800820a:	f7ff ff5f 	bl	80080cc <__sflush_r>
 800820e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008210:	07da      	lsls	r2, r3, #31
 8008212:	4605      	mov	r5, r0
 8008214:	d4e4      	bmi.n	80081e0 <_fflush_r+0xc>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	059b      	lsls	r3, r3, #22
 800821a:	d4e1      	bmi.n	80081e0 <_fflush_r+0xc>
 800821c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800821e:	f7ff ff09 	bl	8008034 <__retarget_lock_release_recursive>
 8008222:	e7dd      	b.n	80081e0 <_fflush_r+0xc>

08008224 <__swhatbuf_r>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	460c      	mov	r4, r1
 8008228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822c:	2900      	cmp	r1, #0
 800822e:	b096      	sub	sp, #88	@ 0x58
 8008230:	4615      	mov	r5, r2
 8008232:	461e      	mov	r6, r3
 8008234:	da0d      	bge.n	8008252 <__swhatbuf_r+0x2e>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800823c:	f04f 0100 	mov.w	r1, #0
 8008240:	bf14      	ite	ne
 8008242:	2340      	movne	r3, #64	@ 0x40
 8008244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008248:	2000      	movs	r0, #0
 800824a:	6031      	str	r1, [r6, #0]
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	b016      	add	sp, #88	@ 0x58
 8008250:	bd70      	pop	{r4, r5, r6, pc}
 8008252:	466a      	mov	r2, sp
 8008254:	f000 f848 	bl	80082e8 <_fstat_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	dbec      	blt.n	8008236 <__swhatbuf_r+0x12>
 800825c:	9901      	ldr	r1, [sp, #4]
 800825e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008266:	4259      	negs	r1, r3
 8008268:	4159      	adcs	r1, r3
 800826a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800826e:	e7eb      	b.n	8008248 <__swhatbuf_r+0x24>

08008270 <__smakebuf_r>:
 8008270:	898b      	ldrh	r3, [r1, #12]
 8008272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008274:	079d      	lsls	r5, r3, #30
 8008276:	4606      	mov	r6, r0
 8008278:	460c      	mov	r4, r1
 800827a:	d507      	bpl.n	800828c <__smakebuf_r+0x1c>
 800827c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	2301      	movs	r3, #1
 8008286:	6163      	str	r3, [r4, #20]
 8008288:	b003      	add	sp, #12
 800828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828c:	ab01      	add	r3, sp, #4
 800828e:	466a      	mov	r2, sp
 8008290:	f7ff ffc8 	bl	8008224 <__swhatbuf_r>
 8008294:	9f00      	ldr	r7, [sp, #0]
 8008296:	4605      	mov	r5, r0
 8008298:	4639      	mov	r1, r7
 800829a:	4630      	mov	r0, r6
 800829c:	f7ff fbbc 	bl	8007a18 <_malloc_r>
 80082a0:	b948      	cbnz	r0, 80082b6 <__smakebuf_r+0x46>
 80082a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a6:	059a      	lsls	r2, r3, #22
 80082a8:	d4ee      	bmi.n	8008288 <__smakebuf_r+0x18>
 80082aa:	f023 0303 	bic.w	r3, r3, #3
 80082ae:	f043 0302 	orr.w	r3, r3, #2
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	e7e2      	b.n	800827c <__smakebuf_r+0xc>
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	6020      	str	r0, [r4, #0]
 80082ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	9b01      	ldr	r3, [sp, #4]
 80082c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082c6:	b15b      	cbz	r3, 80082e0 <__smakebuf_r+0x70>
 80082c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082cc:	4630      	mov	r0, r6
 80082ce:	f000 f81d 	bl	800830c <_isatty_r>
 80082d2:	b128      	cbz	r0, 80082e0 <__smakebuf_r+0x70>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	431d      	orrs	r5, r3
 80082e4:	81a5      	strh	r5, [r4, #12]
 80082e6:	e7cf      	b.n	8008288 <__smakebuf_r+0x18>

080082e8 <_fstat_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	@ (8008308 <_fstat_r+0x20>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	f7f8 fee8 	bl	80010ca <_fstat>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d102      	bne.n	8008304 <_fstat_r+0x1c>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	b103      	cbz	r3, 8008304 <_fstat_r+0x1c>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	20000364 	.word	0x20000364

0800830c <_isatty_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	@ (8008328 <_isatty_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f8 fee7 	bl	80010ea <_isatty>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_isatty_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_isatty_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20000364 	.word	0x20000364

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
